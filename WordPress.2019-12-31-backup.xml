<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.3.2" created="2019-12-31 08:19" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>お首が長いのよ</title>
	<link>https://blog.killinsun.com</link>
	<description>チラシの裏</description>
	<pubDate>Tue, 31 Dec 2019 08:19:09 +0000</pubDate>
	<language>ja</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://blog.killinsun.com</wp:base_site_url>
	<wp:base_blog_url>https://blog.killinsun.com</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[killinsun]]></wp:author_login><wp:author_email><![CDATA[noneck.0311@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[首無しキリン]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

				
	<generator>https://wordpress.org/?v=5.3.2</generator>
<site xmlns="com-wordpress:feed-additions:1">156423649</site>
		<item>
		<title>【WEB開発メモ#2】 Expressの基礎を学んでみる</title>
		<link>https://blog.killinsun.com/?p=44</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://blog.killinsun.com/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[前回の記事では、真っさらなCentOS7にNode.jsとExpress4のインストールを行った。

そして、express-generatorを使って手軽に雛形を用意して実際に起動するまでを行いました。

今回は、インストールした　Expressについてどういった使い方をするのか、整理してみようと思います。

<hr />

<h2>今回目指す環境</h2>

<ul>
    <li>模擬的なデータを使用したり、簡易的にパラメータを送信したりして
ルーティングを学ぶ</li>
    <li>画像を表示させたり、cssを適用させたりする為の「静的ファイル」の扱いを学ぶ</li>
</ul>

<h2>そもそもexpressの役割とは</h2>

公式ドキュメントには、以下のように記載されています。

<blockquote>Express は、Web アプリケーションとモバイル・アプリケーション向けの一連の堅固な機能を提供する最小限で柔軟な Node.js Web アプリケーション・フレームワークです。</blockquote>

Node.jsはサーバサイドのJavaScript環境を提供し、Expressはそれを使ったWEBアプリケーションに必要なプログラムを集めたもの、という理解。

<ul>
    <li>ルーティング</li>
    <li>静的ファイル</li>
</ul>

なるほど、わかりません。

<h2>ルーティング</h2>

リクエストしたURIに対応した処理を行う事を言います。

例えば、 http://{FQDN}:3000/profile.html　にアクセスした時と http://{FQDN}:3000/logout.htmlにアクセスした時で、サーバ側で行われる処理が異なる事は想像がつくかと思います。または、
http://{FQDN}:3000/upload.html　に対してPOSTパラメータを送信したら、専用の処理が行われる事など。

###

まずは、/heroes にアクセスすると適当なユーザ一覧が表示される例を考えます。

以下のようなファイルを作成します。

<pre class="lang:js decode:true" title="routes/heroes.js">let express = require('express');
let router = express.Router();



/* GET users listing. */
router.get('/', function(req, res, next) {
    let heroes = [
                    { "Name": "Tony Stark",       "HeroName": "Ironman"},
                    { "Name": "Steve Rogers",     "HeroName": "Captain America"},
                    { "Name": "Thor Odinson",     "HeroName": "Thor"},
                    { "Name": "Bruce Banner",     "HeroName": "Hulk"},
                    { "Name": "Natasha Romanoff", "HeroName": "Black Window"},
                    { "Name": "Clint Barton",     "HeroName": "Hawkeye"}
                ]
    let body = "&lt;h1&gt;my heroes.&lt;/h1&gt;"
    for(let hero of heroes){
        body += hero.Name + " : " + hero.HeroName + "&lt;/br&gt;";
    }
    res.send(body);
});

module.exports = router;</pre>

&nbsp;

次に、本体となるapp.jsに上記のheroes.jsを読み込む処理を書きます。
9行目と25行目のコメントを目印にしてください。

<pre class="lang:js decode:true " title="app.js">let createError = require('http-errors');
let express = require('express');
let path = require('path');
let cookieParser = require('cookie-parser');
let logger = require('morgan');

let indexRouter = require('./routes/index');
let usersRouter = require('./routes/users');
let heroesRouter = require('./routes/heroes');  // 追加

let app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);
app.use('/heroes', heroesRouter);　//追加

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;</pre>

<ul>
    <li>9行目では、外部jsファイルを読み込む処理</li>
    <li>25行目では読み込んだjsファイルからなるオブジェクトをルーティングの対象として記載しています。</li>
</ul>

&nbsp;

この状態で、<strong>npm start</strong> でサーバを起動し、http://{FQDN}:3000/heroes　にアクセスしてみます。

<img class="alignnone wp-image-51" src="http://blog.killinsun.com/wp-content/uploads/2018/05/0afe8a355d21b3206574a2cad97ecec4.png" alt="" width="425" height="320" />

データが出力されましたね。
app.js内に記載した  <strong>app.use('/heroes', heroesRouter);</strong> は、/heroesでリクエストがきたらheroesRouterに転送する事を意味します。
また、heroesRouterが示すheroes.js内では<strong>router.get('/' ....</strong>という記載がありますが、ここでいう「/」は /heroesを意味します。 chrootのような感じでしょうか。

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2018-05-12 01:04:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="centos"><![CDATA[CentOS]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_755c256db13b3b167a4eb6d8614502ed]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Wordpress + nginx + CentOS7を環境をLet&#039;s encryptでHTTPS化した</title>
		<link>https://blog.killinsun.com/?p=116</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[「やらなきゃなーでも証明書だりーなー」と思ってたけど思い切って手を出してみたら１時間もかからずに（私の場合）設定完了してしまったので、未だにHTTPの人は早く移行しようっていう話。

作り直した時の為にメモしておく。

&nbsp;

<hr />

<h2>構成</h2>

<ul>
    <li>OS : CentOS7</li>
    <li>MW: nginx</li>
</ul>

すでにこの環境はWordpress環境がインストールされているので、既存のHTTPサーバをHTTPS化する方向で進める。

<h3>手順</h3>

とりあえず動けばいい時用にここを読む

<h4>初期構築編</h4>

<ul>
    <li>Let's encrypt（のクライアントツールである certbot）をインストール
<pre class="toolbar:2 lang:sh decode:true">sudo yum install epel-release
sudo yum install certbot python-certbot-apache</pre>
</li>
    <li>証明書を作成
<pre class="lang:default decode:true ">certbot certonly --webroot -w { Your document directory }  -d {Your domain name}</pre>
{ Your document directory} ... Wordpressを配置した場所。apacheなら/var/www/htmlとか。
{ Your domain name } ... あなたが使用しているWordPressのドメイン名。このブログならblog.killinsun.com</li>
    <li>nginxの設定ファイルを編集、または新規に個別設定ファイルを作成し、証明書を指定する</li>
    <li>nginxを再起動</li>
    <li>Wordpress管理ページのログインし、URLを変更する</li>
    <li>HTTPアクセスをHTTPSへリダイレクト</li>
</ul>

<h4>証明書更新準備編</h4>

<ol>
    <li>cronに設定追加</li>
</ol>

<h2>解説</h2>

以下は自分の理解の整理

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date><![CDATA[2018-08-27 23:17:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="centos"><![CDATA[CentOS]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>はじめてみる</title>
		<link>https://blog.killinsun.com/2012/08/%e3%81%af%e3%81%98%e3%82%81%e3%81%a6%e3%81%bf%e3%82%8b/</link>
		<pubDate>Fri, 03 Aug 2012 04:57:41 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
今までアメブロだったんだけど気分転換に、<br>周りでちょいとはやってる（？）はてなブログ開設。<br><br>まともな記録をのこしたいですね
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date><![CDATA[2012-08-03 13:57:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-03 04:57:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%81%af%e3%81%98%e3%82%81%e3%81%a6%e3%81%bf%e3%82%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-08-03-e381afe38198e38281e381a6e381bfe3828b.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[e52bff9531716062c091167d7fc4ab07006b52de]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=146]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>くずびより</title>
		<link>https://blog.killinsun.com/2012/08/fucking-days/</link>
		<pubDate>Tue, 07 Aug 2012 11:03:36 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
一日中ダラダラしてるかバイトの日かどちらかです。<br>
<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/dp/B001KO4IWG/?tag=hatena_st1-22&ascsubtag=d-1ajs09"><img src="https://images-fe.ssl-images-amazon.com/images/I/5130sdvZeDL._SL160_.jpg" class="hatena-asin-detail-image" alt="交響詩篇エウレカセブン Blu-ray BOX 1 （アンコールプレス版）" title="交響詩篇エウレカセブン Blu-ray BOX 1 （アンコールプレス版）"></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/dp/B001KO4IWG/?tag=hatena_st1-22&ascsubtag=d-1ajs09">交響詩篇エウレカセブン Blu-ray BOX 1 （アンコールプレス版）</a></p>
<ul>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%F3%A5%C0%A5%A4%A5%D3%A5%B8%A5%E5%A5%A2%A5%EB" class="keyword">バンダイビジュアル</a></li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2009/03/27</li>
<li><span class="hatena-asin-detail-label">メディア:</span> Blu-ray</li>
<li><span class="hatena-asin-detail-label">購入</span>: 4人 <span class="hatena-asin-detail-label">クリック</span>: 29回</li>
<li><a href="http://d.hatena.ne.jp/asin/B001KO4IWG" target="_blank" rel="noopener noreferrer">この商品を含むブログ (28件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>
エウレカセブンのDVD借りてきたんで、観てました。<br>今ちょうど　　エウレカセブンAOがオリンピックの影響で2週間の休みなので<br>おさらいに、と。<br><br><br>1話から観初めて２６話の「モーニング・グローリー」まで到達。<br>やっぱいいね。<br><br>レントンとエウレカのキャラはもちろんだけど<br>ゲッコーステイトのメンバーとか最高だ。<br><br>レントンが家でしてはじめて自分のレントンに対する気持ちに気付くエウレカ。<br>それを影でみているメンバー達。<br>せつない…<br><br>あ、ちなみに僕はマシューが好きです。<br><br><br>それはそうと、今月中下旬あたりに　<br>株式会社ラックで勤務している　川口　洋さんにお会いさせていただく事になりました。<br><br>セキュリティキャンプに当選してたら聞こうと思ってた<br>なんで日本の技術者って空洞化してるの　とか<br>セキュリティエンジニアってよくいうけど、なにやってんのさ　とか<br>後は技術的なお話云々…。<br>まだ質問するべきことは、大雑把で煮詰まってないけど。<br>同じセキュリティエンジニアを志す学校の人の疑問とかも質問してきちゃいます。<br><br>まぁ何より、社会人に対して自分からアプローチとって会いに行くっていうのは<br>自分にとってかなりの行動力を磨くチャンスというわけで…。<br><br>ぶっちゃけ門前払いされても仕方ないと思ってたけど、快く引き受けてくださいました。感謝感謝。<br><br>しっかり知識を深めてきます。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date><![CDATA[2012-08-07 20:03:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-07 11:03:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fucking-days]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-08-07-fucking-days.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[cb661cd41a8cc321f3962f180be00d49df2e0fc7]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=147]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%81%8f%e3%81%9a%e3%81%b3%e3%82%88%e3%82%8a]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>WireShark入門してみました</title>
		<link>https://blog.killinsun.com/2012/08/i-tried-to-begin-wireshark/</link>
		<pubDate>Mon, 13 Aug 2012 14:01:50 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
セキュリティキャンパス２０１２っていうのに応募していたんだけど<br>その応募期間の時にTwitterで<br>「もし受かったとしたら、それまでの間にできる事って何だろう。今からできる予習ってなんだろう」<br>ってつぶやいたら講師の方が<br>「Wiresharkでパケットひたすら眺めとけ」とおっしゃっていたので、<br>早速導入して我がネットワークのパケットをキャプチャしていたんですが<br>全く使い方がわからずに断念して一時保留・・・。<br><br>結局、セキュリティキャンパス自体は落選したものの、<br>セキュリティやネットワークの勉強は続けるべきだと考えているので<br>改めて書籍を使って勉強することに。
<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/dp/4897978750/?tag=hatena_st1-22&ascsubtag=d-1ajs09"><img src="https://images-fe.ssl-images-amazon.com/images/I/513SNbjYFgL._SL160_.jpg" class="hatena-asin-detail-image" alt="パケットキャプチャ入門　改訂版 (ＬＡＮアナライザＷｉｒｅｓｈａｒｋ活用術)" title="パケットキャプチャ入門　改訂版 (ＬＡＮアナライザＷｉｒｅｓｈａｒｋ活用術)"></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/dp/4897978750/?tag=hatena_st1-22&ascsubtag=d-1ajs09">パケットキャプチャ入門　改訂版 (ＬＡＮアナライザＷｉｒｅｓｈａｒｋ活用術)</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> <a href="http://d.hatena.ne.jp/keyword/%C3%DD%B2%BC%A1%A1%B7%C3" class="keyword">竹下　恵</a></li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%C3%A5%AF%A5%C6%A5%EC%A5%B3%A5%E0" class="keyword">リックテレコム</a></li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2011/05/27</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li>
<li><span class="hatena-asin-detail-label">購入</span>: 4人 <span class="hatena-asin-detail-label">クリック</span>: 62回</li>
<li><a href="http://d.hatena.ne.jp/asin/4897978750" target="_blank" rel="noopener noreferrer">この商品を含むブログ (5件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>
<br><br>中身は意外と読みやすくなってます。<br>基本の基本の操作（キャプチャしたパケットの保存とか）とかから解説進めてます。<br><br>３章あたりで実際にパケットをキャプチャし、<br>フィルタリングの説明などがあり、<br>４章でプロトコルやレイヤの説明。<br><br>オライリージャパンの
<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/dp/4873115140/?tag=hatena_st1-22&ascsubtag=d-1ajs09"><img src="https://images-fe.ssl-images-amazon.com/images/I/519jXXwi5cL._SL160_.jpg" class="hatena-asin-detail-image" alt="Hacking: 美しき策謀 第2版 ―脆弱性攻撃の理論と実際" title="Hacking: 美しき策謀 第2版 ―脆弱性攻撃の理論と実際"></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/dp/4873115140/?tag=hatena_st1-22&ascsubtag=d-1ajs09">Hacking: 美しき策謀 第2版 ―脆弱性攻撃の理論と実際</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> <a href="http://d.hatena.ne.jp/keyword/Jon%20Erickson" class="keyword">Jon Erickson</a>,<a href="http://d.hatena.ne.jp/keyword/%C2%BC%BE%E5%B2%ED%BE%CF" class="keyword">村上雅章</a></li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3" class="keyword">オライリージャパン</a></li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2011/10/22</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
<li><span class="hatena-asin-detail-label">購入</span>: 9人 <span class="hatena-asin-detail-label">クリック</span>: 163回</li>
<li><a href="http://d.hatena.ne.jp/asin/4873115140" target="_blank" rel="noopener noreferrer">この商品を含むブログ (19件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>
この書籍も一応先月に買って読んでるですが<br>こっちはひたすら文章って感じで、説明は丁寧なんだけど、長く読み続けるのは苦痛。<br>（でも間あけるとわからなくなるというジレンマ）<br><br><br>それに比べると、サイズもちょこっと大き目な分、読みやすく構成されてるなと思いました。<br>（図解入りだし）<br><br>とりあえず、名前解決のやり方がわかり、実際にhttpプロトコルを重点的にキャプチャして<br>構造をのぞいてみたり…っていうのが現状です。<br>いろいろ試してみる価値はあるかな。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date><![CDATA[2012-08-13 23:01:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-13 14:01:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-tried-to-begin-wireshark]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="network"><![CDATA[Network]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="wireshark"><![CDATA[WireShark]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-08-13-i-tried-to-begin-wireshark.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[e6b57649edf7d0113f12b25c0bd4a27dde1f85a4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=148]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[wireshark%e5%85%a5%e9%96%80%e3%81%97%e3%81%a6%e3%81%bf%e3%81%be%e3%81%97%e3%81%9f]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>人に教えるということ</title>
		<link>https://blog.killinsun.com/2012/08/about-teaching-something-for-someone/</link>
		<pubDate>Wed, 29 Aug 2012 14:39:27 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=151</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
今日はiPhoneでもセキュリティネタでもなく…。<br><br>今日は学校の一日体験入学ということで、<br>高校生達にプログラミングを教えてきました。<br><br>ちなみに僕は在学生なので、アシスタントとして。<br><br>初心者に教えていると気がつくことがあるんだけど<br>
<blockquote>
「送信ボタンを作ってみましょうか！　じゃあここからボタン追加です！」
</blockquote><br><br>
こんな感じのことをやると<br><br><b>「送信」</b>　って書かれたボタンを書くと、プログラミング未経験者？って、中身を書いていないのに<br><font color="#CC3300">「あ、これで送信出来るんだな」</font>って思ってしまう。<br><br>これ昔Facebookに似たような事書いたら友達に　<font color="red" size="4">「プログラムは空気が読めないでおk」</font>と言われましたね。<br>まさにその通り。<br><br>人間からすると<br><span style="color:#CC3300;" class="deco">　「送信なんだってばwww空気嫁wwww」</span><br><br>といったことでも<br><br>パソコンからすれば<br><span style="color:#CC6600;" class="deco"><br>「送信ですね。　何を？　どこに？　そもそも送信て何をするの？定義されてないんだけど」</span><br><br>これを上手く伝えるのがプログラミングなわけで、こういった話をすると<br>一部の高校生は　「なるほどね」っていう顔してもらえたけど<br>ズブの素人だとやっぱりだめみたい。<br><br>この仕組みを上手く説明できれば賢いんだけどなー。　　難しいものですな。<br><br>&#60;追記&#62;<br><del>ちなみに今日の一日体験にきてくれた中には女子高生もたくさんいて<br>可愛い子がいっぱいいて死にそうになりました。　　若さを感じた日でした。</del>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date><![CDATA[2012-08-29 23:39:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-08-29 14:39:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about-teaching-something-for-someone]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-08-29-about-teaching-something-for-someone.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[c3cbaf4277ce1aef98698247b9cf40eccf23e7e9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=151]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e4%ba%ba%e3%81%ab%e6%95%99%e3%81%88%e3%82%8b%e3%81%a8%e3%81%84%e3%81%86%e3%81%93%e3%81%a8]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>オブジェクト指向のクラスとかなんだよっていうアレ</title>
		<link>https://blog.killinsun.com/1970/01/whats-class-of-object-oriented-programming/</link>
		<pubDate>Wed, 31 Dec 1969 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
オブジェクト指向を始めようとしている＆始めたばかりって人に<br>「これ何だよ！」って聞かれる事が多いので、単純に自分が説明する時の備忘録用にまとめてみようと<br>思います。<br><br>今回はクラスについて。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date><![CDATA[1970-01-01 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[1969-12-31 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[whats-class-of-object-oriented-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/1970-01-01-whats-class-of-object-oriented-programming.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[88ae8f9db8cc0482d210493719a2af51ea7256bc]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=152]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%82%aa%e3%83%96%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e6%8c%87%e5%90%91%e3%81%ae%e3%82%af%e3%83%a9%e3%82%b9%e3%81%a8%e3%81%8b%e3%81%aa%e3%82%93%e3%81%a0%e3%82%88%e3%81%a3%e3%81%a6%e3%81%84%e3%81%86]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>クラス(スーパークラス・サブクラス）</title>
		<link>https://blog.killinsun.com/2012/07/about-super-class-and-sub-class/</link>
		<pubDate>Sat, 14 Jul 2012 05:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=153</guid>
		<description></description>
		<content:encoded><![CDATA[<br>

<div class="section">
基本だけどイメージがよくできないって人いるんじゃないだろうか？<br><br>よく、車が<span style="color:#00FF33;" class="deco">スーパークラス</span>、スポーツカーやトラックが<span style="color:#00FF33;" class="deco">サブクラス</span>って<br>言うじゃん？　あれ会話や言葉で聞くと頭の悪い俺は<br>「…は？」となるわけで。<br><br>図で表すとこんな感じ。<br><a href="http://f.hatena.ne.jp/killinsun/20120901232330" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120901/20120901232330.png" alt="f:id:killinsun:20120901232330p:image" title="f:id:killinsun:20120901232330p:image" class="hatena-fotolife"></a><br>このスーパーカーやらトラックにも、<br>例えばトラックの中だったら<b>軽トラ</b>だったり<b>バン型</b>だったり<b>ダンプ</b>だったり<br>いろいろあるわけだ。<br><br><font size="4">そもそもなんでクラス分けなんかするんだよ</font><br>って言われた事があります。<br>プログラミングって非常に面倒くさいものでして、多くの開発者は使い回ししたがります。<br><br>車は、いろんなステータスがあります。<br>ステータスっていうのは、この車で言えば<br>
<blockquote>
<li>名前</li><br><li>最高速度</li><br><li>燃費</li><br><li>乗車可能な人数</li>
</blockquote><br>
大雑把にあげるとこんな感じ。<br><br>でも<br><b>トラックは車だけど、やっぱ物積むじゃん？　どれくらい積めるか設定したいじゃん？</b><br>とかいう要望が出てくるわけで。<br><br>そのために<br>
<blockquote>
<li>積載量</li>
</blockquote><br>
とかいうステータスを追加するわけです。<br>まぁこれぐらいだったら、元々車クラスに突っ込んでおけば問題ないわけだけど、<br><span style="font-size:large;" class="deco">車に対してのサブクラスはいっぱいある</span>わけで、それぞれのサブクラスの要望を満たした親クラスなんて<br><span style="color:#FF0000;font-weight:bold;font-size:x-large;" class="deco">到底作ってられないわけですよ。</span><br><br>そういうわけで、クラスという枠組みを作り、<br><br><span style="font-size:x-large;" class="deco">「じゃあどんな物にも共通する部分だけ作っておいて、その物にしかない特殊なステータスだけサブクラスにぶっ込めばいいんじゃね？」　</span><br>っていうのがオブジェクト指向の考え方。<br><br><span style="color:#FF0000;" class="deco">親クラスに設定したステータスは、子クラスでも使える。</span><br>なのでいちいちトラックやスーパーカーに<b>最大速度</b>なんてステータスを設定しなくても、使えるわけです。<br><br><br><br><pre><br>車クラスの宣言<br>Public Class Car{  <span style="color:#339933;" class="deco">//車クラスの定義</span><br>    int name; <span style="color:#339933;" class="deco">//車種名</span><br>    int maxSpeed; <span style="color:#339933;" class="deco">//最大速度</span><br>    int nenpi; <span style="color:#339933;" class="deco">//燃費</span><br>    int ninzu; <span style="color:#339933;" class="deco">//乗車可能人数</span><br><br>}<br></pre><br><br><pre><br>車クラスのサブクラスである、<b>トラッククラス</b>の宣言<br>Public Class SuperCar extends Car{ <span style="color:#339933;" class="deco">//車クラスからサブクラスを作る際、<span style="color:#FF0000;" class="deco">extends</span>を使ってサブクラス作りますよという宣言をする</span><br>    int sekisai; <span style="color:#339933;" class="deco">//積載量</span><br>}<br></pre><br><br><pre><br>車クラスのサブクラスである、<b>スーパーカークラス</b>の宣言<br>Public Class SuperCar extends Car{ </span><br>    <br>}<br></pre><br>スーパーカークラスなんもねぇwwwwww<br>と思った方、ごめんなさい、スーパーカーに必要なステータスあんま思いつきませんでした。<br>おそらく、メソッド（処理）の話をするときに活きてくると思います。きっと。<br><br>Javaで宣言するとこんな感じですね。<br>Objective-Cの勉強がてら、Objective-Cだとどう宣言するのだろう？
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date><![CDATA[2012-07-14 14:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-07-14 05:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about-super-class-and-sub-class]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7"><![CDATA[勉強]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[1970-01-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-07-14-about-super-class-and-sub-class.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[93b798c42a9fce57b5ac060476aeefcf11308a25]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=153]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%82%af%e3%83%a9%e3%82%b9%e3%82%b9%e3%83%bc%e3%83%91%e3%83%bc%e3%82%af%e3%83%a9%e3%82%b9%e3%83%bb%e3%82%b5%e3%83%96%e3%82%af%e3%83%a9%e3%82%b9%ef%bc%89]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Thread1:signal SIGABRT</title>
		<link>https://blog.killinsun.com/1970/01/thread1signal-sigabrt/</link>
		<pubDate>Wed, 31 Dec 1969 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=155</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
はてなダイアリーも最近なんとか慣れてきました。<br><br><h5>タイマーアプリを作る</h5><br>今回は、こちらのサイトの解説を参考に、iPhoneにてタイマーアプリを作ってました。
<blockquote>
<a href="http://d.hatena.ne.jp/moto_maka/20081118/1226953067#03" target="_blank">もとまか日記</a>
</blockquote><br>
内容は古いもので、まだXcodeにStoryBoardがなかった時代のもの。<br>一応、InterfaceBuilderでの変数の結合などのやり方はわかっているので、<br>StoryBoardを使って、今回は作成してみる事に。<br>（コードそのものは多分、対してかわらないだろうと思ったため）<br><br><br><h5>原因不明のエラー</h5><br><br>だが、最後の最後にコンパイルして実行してみると、<br>このようなエラー（シグナル）が発生し、シミュレータでは何も動作しない。<br><br><br><a href="http://f.hatena.ne.jp/killinsun/20120904001317" class="hatena-fotolife" target="_blank"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120904/20120904001317.png" alt="f:id:killinsun:20120904001317p:image" title="f:id:killinsun:20120904001317p:image" class="hatena-fotolife"></a><br><br><br>シミュレータ内でアプリを終了して再起動させるにも、今度は真っ暗のまま。<br><br>これはどうしたものか…ととりあえず　<span style="color:#66CC99;" class="deco">[Thread 1:signal SIGABRT]</span>でググってみる事に。<br><br><br><h5>情報収集してわかったこと</h5><br>どうも、StoryBoard(IB)内にミスがあると出るらしい。<br><br>例えば、　<br><span style="color:#FF6666;" class="deco">変数A</span>と<span style="color:#6633CC;" class="deco">ラベル</span>をOutletしていたとする。<br>プログラムのコーディングの過程で、<span style="color:#ff6666;" class="deco">変数A</span>を<span style="font-weight:bold;" class="deco">書き換えてしまう。</span><br>すると、StoryBoard(IB)の<span style="color:#6633cc;" class="deco">ラベル</span>は<span style="color:#ff6666;" class="deco">変数A</span>と組んでいるにも関わらず、コード側で変数を書き換えて相手を見失ったため、<br>Outletが解除された状態になる。<br><br>その状態で実行すると発生するシグナルがこの <span style="color:#66cc99;" class="deco">Thread1 :signal SIGABRT</span>らしい。<br><br>というわけで、実際にStoryBoardをみてみることに。<br><br><br><a href="http://f.hatena.ne.jp/killinsun/20120904001318" class="hatena-fotolife" target="_blank"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120904/20120904001318.png" alt="f:id:killinsun:20120904001318p:image" title="f:id:killinsun:20120904001318p:image" class="hatena-fotolife"></a><br><br><br>…特にエラーはない…。<br>ヘッダーファイルをみてみる。<br><br><br><br><a href="http://f.hatena.ne.jp/killinsun/20120904001319" class="hatena-fotolife" target="_blank"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120904/20120904001319.png" alt="f:id:killinsun:20120904001319p:image" title="f:id:killinsun:20120904001319p:image" class="hatena-fotolife"></a><br>左側をみての通り、Outletが成功しているという旨の◎アイコンができている。<br><br><br><pre><br>　　　 　＿＿＿_　　　　━┓<br>　　　／　　 　 　＼　　 ┏┛<br>　 ／　　＼　　 ,＿＼.　 ・<br>／ 　　 （●）゛ （●） ＼<br>|　 ∪　　 （__人__）　 　 |<br>/　　　　 ∩ノ ⊃　　／<br>(　 ＼　／ ＿ノ　|　 |<br>.＼　“　　／＿＿|　 |<br>　　＼ ／＿＿＿ ／<br></pre><pre><br><br>　 　　　＿＿＿_<br>　　　／　　 　 　＼<br>　 ／　　　　 　 　　＼<br>／ 　　　　　　　　　　＼<br>|　 　　　＼　　 ,＿　　 |<br>/　　ｕ　 ∩ノ ⊃―）／<br>(　 ＼　／ ＿ノ　|　 |<br>.＼　“　　／＿＿|　 |<br>　　＼ ／＿＿＿ ／<br></pre><br><h5>仕方ないので更にググる。ググる。ググる。</h5><br>
<blockquote>
<ul>
<li>アプリを削除して入れ直すと直るよ！</li>
<li>XCODEを再起動をすると直るよ！</li>
<li>Macを再起動すると直るよ！！！！！！！←効果大らしい</li>
</ul>
</blockquote><br>
というわけで全部やってみたけど　<span style="font-size:x-large;" class="deco">効果なかったわ。</span><br><br>つまり、そうなると　コーディングの部分に問題があるのか…？<br><br><br>XCODE.....ようわからんぞ.....<br><br><br>情報ご存知のいたらコメントなど頂けると幸いです。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date><![CDATA[1970-01-01 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[1969-12-31 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[thread1signal-sigabrt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="iphone%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[iPhoneアプリ開発]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/1970-01-01-thread1signal-sigabrt.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[3b6631372d198a179cca3b2a16b43570c37dc8db]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=155]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[卍Yuya卍]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2012-11-26 10:59:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2012-11-26 01:59:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[確かに！<br>そこで私も悩みを抱えております。。。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[jiji-bit]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-12 09:24:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-12 00:24:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[全く同様の問題で、先に進めずにいます。トホホ
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[kmkn]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-15 01:30:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-14 16:30:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[storyboadで関連づけとか怪しいアイテム右クリック<br>→黒いウィンドウをチェック<br>→関連づけでミスったり修正した前情報が残ってればそれを削除<br>ってやったら自分のは直ったよ。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[NoneckGiraffe]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-15 10:48:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-15 01:48:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt;kmkmさん<br>ありがとうございます。<br>現在、iPhoneアプリ開発のほうはお休みしていますが、<br>仕事が片付き次第、やってみます。<br>（お首が長いのよ　管理者）
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[さすらい]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-01-20 18:44:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-01-20 09:44:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Map view をONしてMapKit.frameworkがaddされていない場合もこのエラーはでますよ。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>jQuery</title>
		<link>https://blog.killinsun.com/2012/09/jquery/</link>
		<pubDate>Thu, 06 Sep 2012 13:01:34 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
<a href="http://f.hatena.ne.jp/killinsun/20120906215456" class="hatena-fotolife" target="_blank"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120906/20120906215456.jpg" alt="f:id:killinsun:20120906215456j:image" title="f:id:killinsun:20120906215456j:image" class="hatena-fotolife"></a><br>火曜日にWEB総合の授業で配られました。<br>jQueryの本です。<br><br>なんぞやと思ったら、JavaScriptのライブラリみたいですね。<br>普通に書くよりかなり簡単なそうで。<br><br>ちなみに僕、お恥ずかしながら<span style="color:#FF0000;" class="deco"><span style="font-weight:bold;" class="deco">WEBセキュリティとかも勉強してるのに<br>JavaScript全然わかりません</span></span>（読めるっちゃ読めるんだけど）<br><br>これを機に一緒に勉強してみようかと思います。<br><br>そういえばこういうのって、<span style="font-size:x-large;" class="deco">だいたい１０日でできるようなもんじゃない</span>ですよね。<br>僕の場合はHTMLもCSSも理解していたので、一気に半分ぐらい飛ばしてしまいましたが、<br>なんとかわかる範囲です。<br>ぼちぼち進めていきます。<br><br><br>
<blockquote>
参考：<br><a href="http://www.mdn.co.jp/di/articles/2660/?page=6" target="_blank">いま話題のjQuery Mobileとは - Webサイト制作最新トレンドの傾向と対策 | デザインってオモシロイ -MdN Design Interactive-</a><br><br><br><a href="http://masatokinugawa.l0.cm/2012/09/jquery-mobile-location.href-xss.html" target="_blank">no title</a>
</blockquote><br>
どうやら、このjQueryのスマートフォン版はXSS脆弱性で話題になっているようですな。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2012-09-06 22:01:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-06 13:01:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jquery]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="category" nicename="network"><![CDATA[Network]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-09-06-jquery.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[768700d7399087d477d6b54c34a10d3262e393c2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=157]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>現状報告</title>
		<link>https://blog.killinsun.com/2012/09/current-report/</link>
		<pubDate>Mon, 17 Sep 2012 10:24:50 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
１.これ買いました
<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/dp/489797898X/?tag=hatena_st1-22&ascsubtag=d-1ajs09"><img src="https://images-fe.ssl-images-amazon.com/images/I/512WFDLxGTL._SL160_.jpg" class="hatena-asin-detail-image" alt="Nessus入門(ネットワーク脆弱性試験ツール活用術)" title="Nessus入門(ネットワーク脆弱性試験ツール活用術)"></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/dp/489797898X/?tag=hatena_st1-22&ascsubtag=d-1ajs09">Nessus入門(ネットワーク脆弱性試験ツール活用術)</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> <a href="http://d.hatena.ne.jp/keyword/%B9%AD%B8%FD%C0%B5%C7%B7" class="keyword">広口正之</a></li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%C3%A5%AF%A5%C6%A5%EC%A5%B3%A5%E0" class="keyword">リックテレコム</a></li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2012/06/08</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
<li><span class="hatena-asin-detail-label">購入</span>: 2人 <span class="hatena-asin-detail-label">クリック</span>: 8回</li>
<li><a href="http://d.hatena.ne.jp/asin/489797898X" target="_blank" rel="noopener noreferrer">この商品を含むブログ (2件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>

<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/dp/4797361190/?tag=hatena_st1-22&ascsubtag=d-1ajs09"><img src="https://images-fe.ssl-images-amazon.com/images/I/51wWshX%2BoIL._SL160_.jpg" class="hatena-asin-detail-image" alt="体系的に学ぶ 安全なWebアプリケーションの作り方 脆弱性が生まれる原理と対策の実践" title="体系的に学ぶ 安全なWebアプリケーションの作り方 脆弱性が生まれる原理と対策の実践"></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/dp/4797361190/?tag=hatena_st1-22&ascsubtag=d-1ajs09">体系的に学ぶ 安全なWebアプリケーションの作り方 脆弱性が生まれる原理と対策の実践</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> <a href="http://d.hatena.ne.jp/keyword/%C6%C1%B4%DD%B9%C0" class="keyword">徳丸浩</a></li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/SB%A5%AF%A5%EA%A5%A8%A5%A4%A5%C6%A5%A3%A5%D6" class="keyword">SBクリエイティブ</a></li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2011/03/01</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li>
<li><span class="hatena-asin-detail-label">購入</span>: 119人 <span class="hatena-asin-detail-label">クリック</span>: 4,283回</li>
<li><a href="http://d.hatena.ne.jp/asin/4797361190" target="_blank" rel="noopener noreferrer">この商品を含むブログ (146件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>
<br><br>2.iPhone5予約しました。<br>16GB白です。<br>なぜ１６GB というと、現状の４で１０GBも使ってないからです<br><br>3.軽音楽部のホームページを編集してました<br>jQuery軽く勉強して、フォトギャラリーとか実装してました。<br>来週中に学校のページに掲載されると思う<br><br>4.<a href="http://www.juas.or.jp/" target="_blank" rel="noopener noreferrer">JUAS</a>の方に質問する内容まとめてました<br><br><br>３番がかなり時間とられてました。<br>引き続き作業再開。。。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date><![CDATA[2012-09-17 19:24:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-17 10:24:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[current-report]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-09-17-current-report.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[a7fb1f1a69544eac0eabbd57a75d6a0475caf657]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=158]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e7%8f%be%e7%8a%b6%e5%a0%b1%e5%91%8a]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>iPhone4でiOS6にしてみました。</title>
		<link>https://blog.killinsun.com/2012/09/i-tried-to-update-to-ios6-by-iphone4-part1/</link>
		<pubDate>Tue, 18 Sep 2012 19:20:38 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[<br>

<div class="section">
ざっと気づいた事。<br><br>実際に１日使用した感想をまとめたその２はこちら。<br><span style="color:#FF0000;" class="deco">i<a href="http://d.hatena.ne.jp/killinsun/20120920" target="_blank" rel="noopener noreferrer">Phone4でiOS6にしてみました。（その２）</a></span><br><br><br><br><br><h5>おやすみモード追加</h5><br><a href="http://f.hatena.ne.jp/killinsun/20120920033915" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920033915.png" alt="f:id:killinsun:20120920033915p:image:w360" title="f:id:killinsun:20120920033915p:image:w360" class="hatena-fotolife" width="360"></a><br>設定次第では、特定の人物からのは受け取るみたいなことできるらしい<br><br><br><h5>通知センターからつぶやく事ができるように</h5><br><a href="http://f.hatena.ne.jp/killinsun/20120920033918" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920033918.png" alt="f:id:killinsun:20120920033918p:image:w360" title="f:id:killinsun:20120920033918p:image:w360" class="hatena-fotolife" width="360"></a><br>こちら経由だと画像の添付などはできない。<br><br><br><h5>iPodアプリのUI変更</h5><br><a href="http://f.hatena.ne.jp/killinsun/20120920033917" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920033917.png" alt="f:id:killinsun:20120920033917p:image:w360" title="f:id:killinsun:20120920033917p:image:w360" class="hatena-fotolife" width="360"></a><br><a href="http://f.hatena.ne.jp/killinsun/20120920033916" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920033916.png" alt="f:id:killinsun:20120920033916p:image:w360" title="f:id:killinsun:20120920033916p:image:w360" class="hatena-fotolife" width="360"></a><br><br>白っぽくなったり。<br><br><h5>純正の地図アプリはやっぱり駄目だった</h5><br><a href="http://f.hatena.ne.jp/killinsun/20120920034932" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920034932.png" alt="f:id:killinsun:20120920034932p:image:w360" title="f:id:killinsun:20120920034932p:image:w360" class="hatena-fotolife" width="360"></a><br>スッカスカ。<br>素直に<b>Safari経由でGoogleMapを使う</b>か<br><b>有料アプリを使う</b>かおすすめします。<br>僕は震災の時に無料配布してたMapFanてアプリ使ってます。<br><br><h5>Appstoreもかわった</h5><br><br><a href="http://f.hatena.ne.jp/killinsun/20120920034933" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920034933.png" alt="f:id:killinsun:20120920034933p:image:w360" title="f:id:killinsun:20120920034933p:image:w360" class="hatena-fotolife" width="360"></a><br><a href="http://f.hatena.ne.jp/killinsun/20120920034934" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920034934.png" alt="f:id:killinsun:20120920034934p:image:w360" title="f:id:killinsun:20120920034934p:image:w360" class="hatena-fotolife" width="360"></a><br><br>見た目とか表示方法とか。<br>アップデートすると今までいったんホーム画面に戻されるけどそれがなくなった。<br>Appstoreのアプリの画面のまま、アップデートが開始される。<br>多分ダウンロードもこんな感じ。　プログレスバーが出てますね。<br><br><br><h5>Safariがフルスクリーン表示対応に</h5><br><font color="red">ただし横画面のみ</font><br><a href="http://f.hatena.ne.jp/killinsun/20120920042731" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920042731.png" alt="f:id:killinsun:20120920042731p:image:w360" title="f:id:killinsun:20120920042731p:image:w360" class="hatena-fotolife" width="360"></a><br><span style="font-size:large;" class="deco">どうやら一部サイトの文章では明朝体で表示されてしまうバグがあるらしい</span><br><br><h5>細かい所</h5><br><br><del>-顔文字少なくなった？<br>　今までどんな感じだったか覚えてないけど減った気がする</del><br>→起動しなおしたら元々あったところまで読み込めるようになりました。
<ul>
<li>設定アプリに「プライバシー」の項目追加</li>
<li>更新の挙動がちょっとかわってる</li>
</ul>
<a href="http://f.hatena.ne.jp/killinsun/20120920035600" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120920/20120920035600.png" alt="f:id:killinsun:20120920035600p:image:w180" title="f:id:killinsun:20120920035600p:image:w180" class="hatena-fotolife" width="180"></a>
<ul>
<li>メールに「VIP」追加。</li>
</ul>
　MacOSXでもあるやつです。　これに設定した人とかは通知方法変えたりするらしいけど<br>　需要あんのかこれ。
<ul>
<li>純正のYoutubeアプリのブックマークはSafariのブックマークにあるらしいよ</li>
</ul>
(未検証）<br><br><br>他に気づいたら更新します。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date><![CDATA[2012-09-19 04:20:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-18 19:20:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-tried-to-update-to-ios6-by-iphone4-part1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="%e3%82%a2%e3%83%83%e3%83%97%e3%83%87%e3%83%bc%e3%83%88"><![CDATA[アップデート]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-09-19-i-tried-to-update-to-ios6-by-iphone4-part1.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[9e81cd68c8ec0df2fc9938d030171f61ff8da95b]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=159]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[iphone4%e3%81%a7ios6%e3%81%ab%e3%81%97%e3%81%a6%e3%81%bf%e3%81%be%e3%81%97%e3%81%9f%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>iPhone4でiOS6にしてみました。（その２）</title>
		<link>https://blog.killinsun.com/2012/09/i-tried-to-update-to-ios6-by-iphone4-part2/</link>
		<pubDate>Wed, 19 Sep 2012 17:06:58 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

大雑把な新機能については皆さんご存知の通りなので
今回は使った感想編。

新機能編についてはこちら
<a href="http://d.hatena.ne.jp/killinsun/20120919/1348082438">iPhone4でiOS6にしてみました。（その１）</a>
<h5>肝心の電池の持ちとか</h5>
電池の持ちについては特に変わりない気がしますね。
僕は一日使って半分消費するかしないかぐらいだったのにたいし、
今日使っていても５０％ちょっと前ぐらいまでの消費だったので、
電池の持ちはかわらないみたいです。

iOS6のアップデート同時に出てきたキャリアアップデートなるものがあったけど（Softbank)
それも関係しているのかな？
（電波の受信効率がよくなるとかで電池の利用効率もよくなるとかいう話も見かけた）
<blockquote>過去、auのiPhone4Sのキャリア設定のアップデートにより、
対応していなかったMMSとか使えるようになったっていうのがありましたね。そういえば。</blockquote>
&nbsp;
<h5>サクサク度とか</h5>
特に問題ない。ただ注意してほしいのが、
アップデート直後は不安定になりやすい　ということ。
どんなに起動していたアプリが少なかったにも関わらず、
アプデ直後はとてつもなく重かった。

いったん再起動するか、こちらのアプリを使ってみることをおすすめする。
<a href="http://itunes.apple.com/jp/app/mossari-jie-xiao-for-iphone/id534968145?mt=8">
<img src="http://a1.mzstatic.com/us/r1000/108/Purple/v4/5d/7f/30/5d7f30cc-a184-919f-80e3-8b27d32e3ee7/mza_3789107709909324908.175x175-75.jpg" />
もっさり解消 for iPhone</a>
今無料セールらしいよ。
（今話題のステマ）

最適化後は、特に重いと感じる事もない。
iOS5で問題なく使えていたユーザーは、同じ感覚で使用できるんじゃないかな？
（サクサク感に関しては）

ただし注意してほしいのが、
<span class="deco" style="color: #ff0000; font-size: large;">現在配信されているアプリはまだまだiOS6に対応しきれていない点</span>
<span class="deco" style="font-weight: bold;">僕の愛用しているTwitterアプリのSOICHAちゃんもツイートの詳細表示ができないし</span>
他にもアップデートの未対応によるバグはありそう。
まぁすぐ対応しつつあるんだろうけど。

よく使うアプリの対応バージョンをよく確かめてから
アップデートするのをお勧めします。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2012-09-20 02:06:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-19 17:06:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-tried-to-update-to-ios6-by-iphone4-part2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="%e3%82%a2%e3%83%83%e3%83%97%e3%83%87%e3%83%bc%e3%83%88"><![CDATA[アップデート]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-09-20-i-tried-to-update-to-ios6-by-iphone4-part2.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[0186bd3cf11a3805eeb9c6269e5f78978be82b65]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=160]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[iphone4%e3%81%a7ios6%e3%81%ab%e3%81%97%e3%81%a6%e3%81%bf%e3%81%be%e3%81%97%e3%81%9f%e3%80%82%ef%bc%88%e3%81%9d%e3%81%ae%ef%bc%92%ef%bc%89]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[i-tried-update-to-ios6-by-iphone4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>iPhone5買ったよ。</title>
		<link>https://blog.killinsun.com/2012/09/i-bought-iphone5/</link>
		<pubDate>Thu, 20 Sep 2012 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[<br>

<div class="section">
薄くて軽いですね。<br><br>LTE電波圏内でネット開くとめちゃくちゃ速いらしいじゃないですか。<br><br><span style="font-size:x-large;color:#000000;" class="deco">まぁ俺の家まだLTE対応してないんですけど。</span><br><br>それでも、基本的なスペックは４Sに比べてかなりあがってるみたいなので、<br>やっぱり動作も快適です。<br><br>僕の４ちゃんで満足してたなんて幻想だったんや…<br><br><br><h5>縦長になったってのは実際どうだったんだ</h5><br>縦長になったことで賛否両論を浴びているiPhone5<br>俺も正直リークと発表を聞いたときは<br>「うわまじかよ…」って思いました。　だって　普通にイメージすると<b>気持ち悪いんだもん</b><br><br>手に取った感想は<br><br>「あれ？そうでもない？」<br><br>重量が軽くなっているので、そこまで違和感がなかった。<br>画面の表示領域が広くなってBB2Cとか捗る。<br><br><font size="4">ただし、右上、左上のボタンが遠いのは事実</font><br><br>これはしょうがない。　ぶっちゃけAndroidもそうなんじゃね？<br>あ、戻るボタンがあったか。<br><br><br>あとの問題としては、<br><span style="font-size:x-large;" class="deco">iPhone5の４インチディスプレイに対応したアプリがまだまだ少ない点。<br></span><br>これはデカい所？から改善されていくんだろうけど。<br><br>iPhone5で未対応のアプリを開くと上下に黒い帯が出て<br>画面真ん中にセンタリングされる。<br>こんな感じに。<br><br><a href="http://f.hatena.ne.jp/killinsun/20120923001152" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120923/20120923001152.png" alt="f:id:killinsun:20120923001152p:image:w360" title="f:id:killinsun:20120923001152p:image:w360" class="hatena-fotolife" width="360"></a><br><br>文字入力する画面もステータスバーもそのまんまセンタリング。<br><a href="http://f.hatena.ne.jp/killinsun/20120923001153" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120923/20120923001153.png" alt="f:id:killinsun:20120923001153p:image:w360" title="f:id:killinsun:20120923001153p:image:w360" class="hatena-fotolife" width="360"></a><br><br><br><span style="color:#FF0000;" class="deco">下のほうのキー押しにくいwwww</span><br>画面下側の黒い縁にミスタップしてしまうので「押したけど押せてなかった」って事があるあるすぎてヤバい。<br>これはとっととアプリ側に改善してほしいところ。<br>まぁ急に４インチになんてしたAppleが悪いんだけど。<br><br><br><h5>ホームボタンなんかちょっとかわってね？</h5><br><br>２chとかでちょくちょくあがってる話題です。<br>ホームボタンが従来に比べてちょっとかわったようです。<br><br><span style="color:#FF0099;" class="deco">「音が違う」</span><br><span style="color:#FF6600;" class="deco">「押した感触が違う」</span><br><br>そんな感じのレビューが。<br><br>実際どうなんよと検証してみました。<br>俺の低性能なコンデジ（笑）で撮影したんで見づらいけど許してください。<br><object width="425" height="336"><param name="movie" value="http://www.youtube.com/v/G7Eig5sA2Jk"></param><param name="wmode" value="transparent"></param><embed src="http://www.youtube.com/v/G7Eig5sA2Jk" type="application/x-shockwave-flash" wmode="transparent" width="425" height="336" FlashVars="movie_url=http://d.hatena.ne.jp/video/youtube/G7Eig5sA2Jk"></embed></object>
<a href="http://d.hatena.ne.jp/video/youtube/G7Eig5sA2Jk" alt="この動画を含む日記"><img src="http://d.hatena.ne.jp/images/d_entry.gif" alt="D" border="0" style="vertical-align: bottom;" title="この動画を含む日記"></a><br>iPhone4「ペチッペチッ」<br>iPhone5「カチッカチッ」<br><br>なんか<span style="font-size:large;" class="deco"><b>しっかり押してる感</b></span>が出てます。<br>気に入らない人は気に入らないのかも。　<br><br><span style="color:#6699FF;" class="deco">ホームボタンが強化された説</span>が強いんでいいんじゃないかな？<br><br><br><h5>付属のイヤホン</h5><br><br>なんか今回から一新された<span style="font-size:x-large;" class="deco">なんとかイヤホン</span><br>正直どうでもよすぎて名前覚えてなかったレベルだったけど使ってみた。<br>（ファンの方ごめんなさい）<br><br>感想としては<br><br>
<blockquote>
<ul>
<li>若干ドンシャリ気味</li>
<li>俺の耳になじまない</li>
<li>取れやすい</li>
<li>オシャレ</li>
</ul>
</blockquote><br>
こんな感じです。<br>僕はコア・メタル系の曲が好きなんで、音色としては好みでした。<br><br>ただやっぱり、カナル型イヤホンではないので<br>取れやすい。　せめて先端のサイズが…<br><br><br><h3>Lightningケーブル</h3><br><br><span style="font-size:xx-large;" class="deco">すげえ！裏表関係なく差し込める！！！</span><br>※iPhone5側のみ<br><br>USB3.0に対応してるので稲妻のように速い＝Lightning　なんだとか。<br>確かに速かった。<br><br><br><h5>買うべきなん？</h5><br><br>４ユーザーはホームボタンの寿命も考えて…。<br>迷うくらいなら買うでよいと思います。２年経つし。<br><br>4Sユーザーはどうだかわからんけど<br>大画面化とかデザインに魅力があるなら買うでよしかも。<br><br>４も４Sも、普通に使う分には申し分ないスペックと安定性ですしね。<br>（でもそろそろメモリ５１２MBじゃつらいか…？）<br><br><br>記事ではボロクソ言っちゃった感ありますけど個人的には<br>iPhone5いいわwwww最高wwwwと絶賛したい商品です。<br><br>Apple信者になりそうやわー（棒）
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date><![CDATA[2012-09-21 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-09-20 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-bought-iphone5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="iphone"><![CDATA[iPhone]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[1970-01-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-09-21-i-bought-iphone5.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[13060b07f213b1455482d1efa59eb3d4155c51b4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=161]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[iphone5%e8%b2%b7%e3%81%a3%e3%81%9f%e3%82%88%e3%80%82]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Nexus7</title>
		<link>https://blog.killinsun.com/1970/01/nexus7/</link>
		<pubDate>Wed, 31 Dec 1969 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
<a href="http://f.hatena.ne.jp/killinsun/20130119000108" class="hatena-fotolife" target="_blank"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130119/20130119000108.jpg" alt="f:id:killinsun:20130119000108j:image" title="f:id:killinsun:20130119000108j:image" class="hatena-fotolife"></a><br>買った。<br><br>彼女さんのライブを観にいくのに池袋に行ったんですが<br>たまたま時間が余ってたので、家電量販店にいったらあったので買ってしまいました。<br><br>自分は学校ではウルトラブックもあるし、不便がないので<br>実際結構悩んだんですが、Androidのガジェットは持っていないので、<br>「家族共用として使ってみて、もし俺が本当に放置するならそのままあげちゃおう」<br>ぐらいの気持ちで買ってみました。<br>（ちょうど、母がタブレットに非常に興味持ってたので）<br><br>ぼちぼち使って気が向いたらレビュー書きます。<br><br>今のところ使い勝手は良いです。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date><![CDATA[1970-01-01 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[1969-12-31 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nexus7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/1970-01-01-nexus7.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[ee4bb8652fbae84a158dc49add07bb0116a2e4fa]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=164]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Apacheの話</title>
		<link>https://blog.killinsun.com/1970/01/about-apache/</link>
		<pubDate>Wed, 31 Dec 1969 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=177</guid>
		<description></description>
		<content:encoded><![CDATA[<br>

<div class="section">
httpd.confのプロセス関連の件について、わかりづらい所があった。<br>ので、まとめる。<br>間違えている点があれば指摘して欲しいです。<br>
<ul>
<li>StartServers :Apache起動時の子プロセス数</li>
<br>                <li>MinSpareServers :待機プロセスの最小数</li>
<li>MaxSpareServers :待機プロセスの最大数</li>
<br>                <li>ServerLimit:最大接続数</li>
<li>MaxClients:最大プロセス数</li>
<br>            </ul>
クライアントからの接続は、Apacheの親プロセスが待ち受ける<br>→それ以降の処理や対応は、子プロセスが受け付ける<br><br>1.3.xまでは「１接続＝１プロセス」だったらしいが、現在ではマルチスレッドのため、<br>複数の接続を１つのプロセスで処理しているらしい。<br><br>「接続してくるクライアントが増えれば、プロセスが増え、メモリやCPUの負荷も増える」　そりゃそうだ。<br>「”プロセスを増やす”のにも、負荷がかかる」　うん。<br><br>だから、待機プロセスという需要が現れるのかね。<br>接続に備えて、プロセスを起動しておき、待機している状態が待機プロセス。<br><br>MinSpareServersの数だけ、Apache起動後は常にこの数のプロセスが待機している。<br>MaxSpareServersで指定された数以上の待機プロセスにはならない。<br><br>注意書きとしてよく書かれているのが、「クライアントと接続している状態は待機プロセスとは呼ばない」らしい。<br>つまり、待機プロセスから外れたプロセスの分を補充するため、また待機プロセスが作られる事になる。<br>接続が切れて待機プロセスに戻ってきた場合、その時点で補充された待機プロセスと合計してMaxSpareServersの値を超えるようなら、<br>そのプロセスは死ぬ。<br><br>最終的に、MaxClients+MaxSpareServers+親プロセス=起動しているhttpdプロセスとなる…のか？<br><br><br>とりあえずここまで。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date><![CDATA[1970-01-01 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[1969-12-31 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about-apache]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/1970-01-01-about-apache.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[4f998a45bf3d591fe4ce6f5c4f6ae8f4b2c079e1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=177]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[apache%e3%81%ae%e8%a9%b1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Eclipse4.2でGUIアプリ開発の準備メモ</title>
		<link>https://blog.killinsun.com/1970/01/build-an-environment-with-gui-application-on-eclipse-4-2/</link>
		<pubDate>Wed, 31 Dec 1969 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

部活内でチーム開発をすることになったので、環境構築をした。
予めHelloworldまで確認したので、メンバーの後輩へのドキュメント用にメモを残す。


環境は以下の通り。

言語：Java
IDE:Eclipse4.2
プラグイン:WindowBuilder(SWTDesigner等）
<h5>本体を入れる</h5>
まずはEclipse4.2を導入する
<a href="http://www.eclipse.org/downloads/" target="_blank" rel="noopener noreferrer">http://www.eclipse.org/downloads/</a>

日本語化とかは面倒くさいので今回はスルーで。
<h5>WindowBuilder周りを入れる</h5>
&nbsp;

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130525234448" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130525234448p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130525/20130525234448.png" alt="f:id:killinsun:20130525234448p:image" /></a>
ヘルプ→新規ソフトウェアのインストール


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130525234449" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130525234449p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130525/20130525234449.png" alt="f:id:killinsun:20130525234449p:image" /></a>
対象のところに
<a href="http://download.eclipse.org/releases/juno/" target="_blank" rel="noopener noreferrer">http://download.eclipse.org/releases/juno/</a>
このURLを入力。
4.2用の一般的なプラグインが表示される。

一般ツールカテゴリあたりから、
SWT DesignerとSWT Designer Coreをインストール。
フィルタって所で　SWTと入力すると絞り込んでくれて便利。


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130525234450" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130525234450p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130525/20130525234450.png" alt="f:id:killinsun:20130525234450p:image" /></a>

依存関係のあるパッケージは自動でインストールしてくれるらしい。
ぶっちゃけSWT Designerだけ選択でもよかったかも。
下手に何か入れると、後述のデザインモードが起動できなくなるバグっぽいのが発生する


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130526000325" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130526000325p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130526/20130526000325.png" alt="f:id:killinsun:20130526000325p:image" /></a>
同意して完了をクリックでインストール開始。
この後再起動求められるので、素直に再起動を。
<h5>起動するか確認</h5>
&nbsp;

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130526000327" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130526000327p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130526/20130526000327.png" alt="f:id:killinsun:20130526000327p:image" /></a>
適当なプロジェクトを作る。
馴染みの深いJavaプロジェクトではなく、今回は
WindowBuilder配下に<span class="deco" style="font-weight: bold;">SWT/JFace Java Project</span>というのがあるので、
これでプロジェクトを作成してみる。　必要なライブラリが自動で格納される。


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130526001154" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130526001154p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130526/20130526001154.png" alt="f:id:killinsun:20130526001154p:image" /></a>
そしてクラスの作成。
今回は、同カテゴリ内のSWT Applicationsというのでクラスを作成してみた。


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130526001156" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130526001156p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130526/20130526001156.png" alt="f:id:killinsun:20130526001156p:image" /></a>
作成したファイルを開いてみる。
ソースコードの下の方のタブをDesignに変えると、デザインモードに切り替わる。
<h5>Helloworldをやってみる</h5>
&nbsp;

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130526001157" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130526001157p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130526/20130526001157.png" alt="f:id:killinsun:20130526001157p:image" /></a>
テキストやボタンなどの「パーツ」は、
それぞれ、ウィンドウに配置する際、レイアウトという「置き方」を決めなければならない。
今回は、FillLayoutというのを選択してみる。

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130526001158" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130526001158p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130526/20130526001158.png" alt="f:id:killinsun:20130526001158p:image" /></a>
次にラベルの配置。
画面に埋め込む文字列ですね。隣のTextを選択すると、テキストフィールドが出てくる。


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130526001159" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130526001159p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130526/20130526001159.png" alt="f:id:killinsun:20130526001159p:image" /></a>
配置した時に、Labelの文字を書き換える事ができるが、動きを理解するために
そのまま配置することにする。

ソースコードを見てみよう。
以下のソースコードは、上の手順まで進んだ結果、追加されたコードである。
<pre class="syntax-highlight"><span class="synType">protected</span> <span class="synType">void</span> createContents() {
shell = <span class="synStatement">new</span> Shell();
shell.setSize(<span class="synConstant">450</span>, <span class="synConstant">300</span>);
shell.setText(<span class="synConstant">"SWT Application"</span>);
shell.setLayout(<span class="synStatement">new</span> FillLayout(SWT.HORIZONTAL));
Label lblNewLabel = <span class="synStatement">new</span> Label(shell, SWT.NONE);
lblNewLabel.setText(<span class="synConstant">"New Label"</span>);
}
</pre>
&nbsp;

一番下の2行のコードが、追加したラベルに関するコードである。
1行目がインスタンス（実態）を作成し、2行目で、インスタンスの情報を設定している。
今回は、setText() というメソッドを使い、 New Labelという文字列が埋め込まれている。
ここを書き換えればよい。
<pre class="syntax-highlight">lblNewLabel.setText("Hello World!");
</pre>
&nbsp;

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130526002811" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130526002811p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130526/20130526002811.png" alt="f:id:killinsun:20130526002811p:image" /></a>
書き換えて実行すると、このようにHelloWorldが表示された。
Welcome to GUI world.　といった具合に。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date><![CDATA[1970-01-01 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[1969-12-31 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[build-an-environment-with-gui-application-on-eclipse-4-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/1970-01-01-build-an-environment-with-gui-application-on-eclipse-4-2.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[558ab6c584917a1f9ec5b1d93dc7d78fa670c980]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=178]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[eclipse4-2%e3%81%a7gui%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba%e3%81%ae%e6%ba%96%e5%82%99%e3%83%a1%e3%83%a2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>AWS Cloud9を使おう/個人的によく使うTips集</title>
		<link>https://blog.killinsun.com/?p=217</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[皆さんはどんなエディタを使っていますか？VSCode? Vim? SublimeText2? Atom?
VSCodeもモダンで人気あるエディタですが、最近私はAWS Cloud9を使っています。

特に、Cloud9はハンズオン型勉強会などでかなり強力なパワーを発揮します。

研修主催側の観点から見たよく使う機能をTips集としてメモしていきます。

<hr />

<h2>基本の使い方</h2>

&nbsp;

ペインの分割を活用しよう

<h2><img class="alignnone size-full wp-image-218" src="https://blog.killinsun.com/wp-content/uploads/2018/11/5b89caf29e4e41156dc2182570341c90.gif" alt="" width="600" height="400" /></h2>

<h2>テーマを変えよう</h2>

<h3>Jett Dark</h3>

<img class="alignnone size-full wp-image-225" src="https://blog.killinsun.com/wp-content/uploads/2018/11/jettblack.png" alt="" width="2556" height="1424" />

<h3>Classic Dark Gray</h3>

<img class="alignnone size-full wp-image-226" src="https://blog.killinsun.com/wp-content/uploads/2018/11/classic_dark_gray.png" alt="" width="2558" height="1432" />

<h3>Classic Dark</h3>

<img class="alignnone size-full wp-image-227" src="https://blog.killinsun.com/wp-content/uploads/2018/11/classic_dark.png" alt="" width="2558" height="1432" />

<h3>Flat Light</h3>

<img class="alignnone size-full wp-image-229" src="https://blog.killinsun.com/wp-content/uploads/2018/11/flat_light-1.png" alt="" width="2442" height="1448" />

<h3>Ansibleの実行環境として利用する</h3>

<h3>他のEC2インスタンスやサーバへの踏み台として利用する</h3>

プレビュー機能

共有利用

Cloud9の利用権限のみをもたせる

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2018-11-05 17:10:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="aws"><![CDATA[AWS]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2018年買ってよかったものリスト</title>
		<link>https://blog.killinsun.com/?p=276</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=276</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
振り返るよ
<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<!-- /wp:paragraph -->

<!-- wp:more -->
<!--more-->
<!-- /wp:more -->

<!-- wp:heading {"level":3} -->

<h3>ドラム式洗濯機</h3>

<!-- /wp:heading -->

<!-- wp:paragraph -->

<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date><![CDATA[2018-12-29 08:13:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>GatsbyJSでbootstrap4を使う(npmインストール版)</title>
		<link>https://blog.killinsun.com/?p=502</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=502</guid>
		<description></description>
		<content:encoded><![CDATA[npm i --save bootstrap jquery reactstrap

gatsby-browser.js

import "bootstrap/dist/css/bootstrap.min.css"]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>502</wp:post_id>
		<wp:post_date><![CDATA[2019-12-29 17:41:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>XCode4.4を使ってiOSプログラミングをはじめよう</title>
		<link>https://blog.killinsun.com/2013/01/lets-start-ios-programming-with-xcode-44/</link>
		<pubDate>Mon, 31 Dec 2012 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=150</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
<img src="https://devimages.apple.com.edgekey.net/technologies/images/tools_icon_source_editor.jpg"><br>Macを導入してまずやりたいなと思ってたことが<br>iPhoneのアプリ開発である。<br><br>プログラミングというのは元々、<br>高校時代にCOBOLという今や化石言語を学び<br>現在専門学校にてJavaの勉強をやっている最中。<br>んでもって、そのJavaもオブジェクト指向の主要な部分が終わったので<br>ある程度のことはできるようになった。<br><br>そろそろいろいろ自分で手を出してみてもいいんじゃないかと思ったので<br>ぜひやってみたいな、と。<br>（もっとも、手を出そうと思えばもっと早くから手を出せたし、セキュリティを学ぶ上で<br>C言語なんかはかなり重要になってくるんじゃないかとは思っていた）<br><br>Objective-Cというのが、iOSの開発言語なので<br>情報を整理してみると<br><br><ul><br><li>C言語にオブジェクト指向の”ニュアンス的なものを追加したもの"（クラスメート談）</li><br><li>まず開発するんだったらAppleの公式みろや</li><br><li>みた感じ、ほとんどのサイトは<span style="font-weight:bold;" class="deco">Cがある程度わかることを前提に</span>説明している</li><br></ul><br><br>こんな感じだろうか？<br>中でも、二つ目のAppleの開発者向けのページを漁ってみたところ、なんと日本語でのガイドラインが公開されていた。<br>Developer Libraryなるものの中に初心者向けのページがあったので、<br>まずはそこを参照してみようかなと思う。<br><br><a href="https://developer.apple.com/jp/devcenter/ios/library/documentation/iPhone101.pdf">はじめてのiOSアプリケーション</a><br><br>注意してもらいたいのが、やはりここも<br>Objective-Cの文法について基本的な文法や構造を理解していることを前提に説明している。<br>やっぱり、書籍とかサイトとかで学んでからのほうがいいのかね。<br><br>ソースコードを参考に解析しながらっていうやり方もあるけど。<br>とりあえず今日はこの辺で。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2013-01-01 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-12-31 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lets-start-ios-programming-with-xcode-44]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="iphone%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[iPhoneアプリ開発]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="xcode"><![CDATA[XCode]]></category>
		<category domain="post_tag" nicename="%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0"><![CDATA[プログラミング]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[1970-01-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-01-01-lets-start-ios-programming-with-xcode-44.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[97b60007f54779ed7da9a827b90d923332866a26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=150]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[xcode4-4%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6ios%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0%e3%82%92%e3%81%af%e3%81%98%e3%82%81%e3%82%88%e3%81%86]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Objective-Cだとどう宣言するんだよ</title>
		<link>https://blog.killinsun.com/2012/11/how-do-i-define-it-by-objective-c/</link>
		<pubDate>Wed, 28 Nov 2012 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
ここからはちょっと自分のためのメモ。<br>
<blockquote>
<a href="http://www.atmarkit.co.jp/fcoding/articles/objc/03/objc03a.html">第3回 Objective-Cのクラス定義を理解しよう</a>
</blockquote>
どうもこちらのサイトで解説している情報を読む限り、<br><br>Objective-Cでは<br>
<blockquote>
<ul>
<li>すべてのクラス（オブジェクト）のスーパークラスは<b>NSObject</b>であり、どんなクラスもここから継承している。（ちなみにJavaは<b>Object</b>)</li>
<li>Javaと違って、NSObjectから継承している事を宣言しなければならない。</li>
<li>クラスは<b>宣言部</b>と<b>実装部</b>に分かれている</li>
<li>宣言部では<b>@Interface</b> 実装部では<b>@Implements</b>を用いて宣言を行う。</li>
</ul>
</blockquote>
こんな感じだろうか？<br><br>上の車クラスやスーパーカークラスの宣言をObjective-C風に宣言するとこうなる<br><br><pre><br>車クラスの宣言<br><br>@interface Car :NSObject{  <span style="color:#339933;" class="deco">/*車クラスの定義 */</span><br>    int name; <span style="color:#339933;" class="deco">/*車種名 */</span><br>    int maxSpeed; <span style="color:#339933;" class="deco">/*最大速度 */</span><br>    int nenpi; <span style="color:#339933;" class="deco">/*燃費 */</span><br>    int ninzu; <span style="color:#339933;" class="deco">/*乗車可能人数 */</span><br>}<br>@end<br><br>@implements Car :NSObject<br>@end<br><br></pre><br><br>…こ、こんな感じなのだろうか？<br>宣言部と、実装部の違いがまだよくわかっていないなー…。<br><br>もう少し、掘り下げてやっていきたいが、そろそろ時間も時間なので<br>明日にするとします。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2012-11-29 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-11-28 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-do-i-define-it-by-objective-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0"><![CDATA[プログラミング]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[1970-01-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-11-29-how-do-i-define-it-by-objective-c.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[d7fc2db7045acb217b0a1952914dcfb26b4b5a0a]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=154]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[objective-c%e3%81%a0%e3%81%a8%e3%81%a9%e3%81%86%e5%ae%a3%e8%a8%80%e3%81%99%e3%82%8b%e3%82%93%e3%81%a0%e3%82%88]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>今、入門本を買うべきなの？</title>
		<link>https://blog.killinsun.com/2013/03/is-this-a-time/</link>
		<pubDate>Sat, 09 Mar 2013 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
今、iPhone5の発売がほぼ確定して盛り上がっているわけだが、<br>そうなるとiOS6の発表も近いわけで。<br><br>これからXCODEを使ってiOSアプリ開発をしようとしている自分としては、<br>なんだかなーという気分。<br>もちろん、iPhone5は購入予定。　<span style="color:#FF0000;" class="deco">そろそろ俺の４ちゃんもホームボタンが2割しか応答しないし（末期）</span><br><br>で、何故微妙な心境なのかというと<br><br>技術進歩が激しすぎて入門するにはついていけない。<br><br>どういうことかっていうと、今現在入門するためにいろいろ書籍や情報を調べても<br>今の環境に対応してないってことが多い。<br><br><h5>XCODEは4.2以前か移行かで大きく開発の流れがかわっている（現時点では4.4.1）</h5><br><br>XCODEは4.2以前か移行かで大きく開発の流れがかわっている（現時点では4.4.1）<br>参考するサイトをみても4.2以前のものが多い状況。<br>もちろん本については改訂版が出ない限り、どんどん古くなっていく一方。<br><br>情報系の書籍の弱点である。<br><br><br>で、やっぱiOS6が出るとそれにあわせてXCODEも新しくバージョンアップしそうだし<br>どう考えても書籍を今買うのはナンセンス。<br>あるとすれば、Objective-Cについての本ぐらいか。<br><br>完全に時期間違ったかなー。<br><br>まぁ今の状況でも出来ない事はないし、時間をかけてじっくり勉強するしかない。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date><![CDATA[2013-03-10 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-09 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[is-this-a-time]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="iphone%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[iPhoneアプリ開発]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="xcode"><![CDATA[XCode]]></category>
		<category domain="post_tag" nicename="%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0"><![CDATA[プログラミング]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[1970-01-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-03-10-is-this-a-time.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[5f2d1d1bb99a11c374933030fc5e229d57dfb882]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=156]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e4%bb%8a%e3%80%81%e5%85%a5%e9%96%80%e6%9c%ac%e3%82%92%e8%b2%b7%e3%81%86%e3%81%b9%e3%81%8d%e3%81%aa%e3%81%ae%ef%bc%9f]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Googleアカウントを移行する&#038;コピーする</title>
		<link>https://blog.killinsun.com/2013/01/migrate-google-account-and-copy/</link>
		<pubDate>Fri, 04 Jan 2013 04:31:48 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=162</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">

Googleでメインとなるアカウントを作り直したんですが、
普段使ってるChromeのブックマークやプラグイン、デザインをそっくりそのまま
新しいGoogleアカウントに移行させる方法はないかなーと試したのでメモ。

最初の２ステップはぶっちゃけ必要ないっぽいけど、同期事故を防ぐため、念のため。


<span class="deco" style="font-size: large;">1Chromeブラウザ内にユーザーを新規追加する</span>
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130104130904" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130104130904j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130104/20130104130904.jpg" alt="f:id:killinsun:20130104130904j:image" /></a>
画像や名前はわかればなんでもいい。
新規追加後、新しくChromeが別窓で起動し、Googleアカウントのログイン画面に入る。
ログインしてもしなくてもいい。
これで、ブラウザ内（コンピュータ内）に空っぽのデータ、旧のデータが二つあることになる。

<span class="deco" style="font-size: large;">2旧アカウントの設定ファイルを新アカウントに丸ごとコピー</span>

C:Usersログオンユーザー名AppDataLocalGoogleChrome
Applicationにはブラウザそのもののファイルが入ってるらしい。
UserData内に設定ファイルは入っている。

UserDataフォルダ内にはいくつかフォルダとファイルがあるが、注目するのは二つのファイル
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130104133304" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130104133304j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130104/20130104133304.jpg" alt="f:id:killinsun:20130104133304j:image" /></a>
DefaultUser普段使っているユーザー（旧アカウント）
Profile(数字) が、新規追加したユーザー。（新アカウント）


Chromeを一旦終了し、DefaultUserフォルダの中身をコピーし、Profile(数字）内に全て上書きする形でコピーする。

これで、旧アカウントのデータが二つ複製された。

<span class="deco" style="font-size: large;">3実際にデータを移行させる</span>
Chromeを起動する。
ここで新アカウントでなければ、アカウントを切り替える。
メニュー→設定→Googleアカウントを切断する→Googleにログイン
新アカウントのユーザー名とパスワードの入力が求められるので、入力する。

現在のブラウザの情報が新アカウントのほうへ同期される。


プロセス的に３番目だけで十分なのかなーとは思ったけど
こういうのはミスった時が怖いので、一応ユーザーを複製してからやるやり方をお勧めします。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date><![CDATA[2013-01-04 13:31:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-01-04 04:31:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[migrate-google-account-and-copy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="post_tag" nicename="%e3%83%a6%e3%83%bc%e3%82%b6%e3%83%bc"><![CDATA[ユーザー]]></category>
		<category domain="post_tag" nicename="%e7%a7%bb%e8%a1%8c"><![CDATA[移行]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-01-04-migrate-google-account-and-copy.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[2abd3047deec6d480e22b423c2a8de154fec6cfd]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=162]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[google%e3%82%a2%e3%82%ab%e3%82%a6%e3%83%b3%e3%83%88%e3%82%92%e7%a7%bb%e8%a1%8c%e3%81%99%e3%82%8b%e3%82%b3%e3%83%94%e3%83%bc%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[jjb]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://d.hatena.ne.jp/jjb/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-05 06:41:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-04 21:41:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[情報ありがとうございます。<br>エイヤッとプロセス3のみやってみたら大丈夫でした。新しく別環境としてログインするか、以前のアカウントの環境と統合するかを選ぶダイアログが出て選択できるようです。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[首無しキリン]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-12-05 11:18:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-12-05 02:18:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt;&gt;jjb　様<br>以前はそのようなダイアログは見られなかったようですが、<br>現在では出るのですね。<br>検証しつつ、記事のほうも更新したいと思います。<br>情報ありがとうございました。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>内部DNSサーバーの設定に詰んだ話</title>
		<link>https://blog.killinsun.com/2013/01/about-i-stacked-a-setting-internal-dns-server/</link>
		<pubDate>Mon, 07 Jan 2013 09:19:46 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">

一昨日、技術部が参加しているAndroidのアプリ開発コンテストにて、
ネットワークを使った（いまや当然だが）アプリケーションを使うということで、
運営が用意したサーバーではなくて、独自にサーバーを用意して自由にパラメータを送受信できるようにする必要があった。

なので空いてるCentOS6マシンを使って、サーバーを立てた。
結果、内部でやってる分には問題なく動作してくれたのだが
チームでやってるので、やはり外部からもアクセスできるようにしたい。

ということで、外部にも公開する設定にした。


DynamicDNSでドメインを取得して、内部向けDNSサーバーを立てて詰んだ

いつもLinuxのサーバーに関してお世話になってる
<a href="http://centossrv.com/" target="_blank" rel="noopener noreferrer">http://centossrv.com/</a>を参考に、BINDの設定をしていた。

設定が進んで、上手く起動したはいいが、外部から内部にアクセスできても（DDNSだから当然）
内部からドメインでサーバーにアクセスできない。



原因は何だと思い、コマンドプロンプトを起動し、nslookupコマンドでテスト。

規定のサーバー　の項目が、プロパイダのサーバーになっている。

Windowsのネットワークアダプタの設定を確認するも、
問い合わせ先のプライマリＤＮＳサーバーは、192.168.0.6にきちんと設定されている。

では、他のマシンではどうかと思い、
UbuntuとMacを立ち上げ、それぞれ　resolv.confなどを確認し、192.168.0.6になっているのを確認したあと、
ウェブブラウザにドメイン名を入力し、テストしてみる。

なんと、Windowsと同じように設定しているにもかかわらず、繋がった。


これは確実にWindowsの設定が間違っていると思い、Windowsを立ち上げなおす。

結局、nslookupでの規定のサーバーが　IPv6を使ってプロパイダのＤＮＳサーバーにアクセスしていることがわかり、
WindowsのIPv6の設定を止めた。

すると、無事、自宅サーバーのDNSサーバーにアクセスし、名前解決をしてくれるようになった。


調べるのに3時間費やしました。　もう疲れた。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2013-01-07 18:19:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-01-07 09:19:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about-i-stacked-a-setting-internal-dns-server]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="dns"><![CDATA[DNS]]></category>
		<category domain="post_tag" nicename="ipv6"><![CDATA[IPv6]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="network"><![CDATA[Network]]></category>
		<category domain="post_tag" nicename="network"><![CDATA[Network]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-01-07-about-i-stacked-a-setting-internal-dns-server.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[2e6580865724f71360e90e9610322a24ddba34bf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=163]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e5%86%85%e9%83%a8dns%e3%82%b5%e3%83%bc%e3%83%90%e3%83%bc%e3%81%ae%e8%a8%ad%e5%ae%9a%e3%81%ab%e8%a9%b0%e3%82%93%e3%81%a0%e8%a9%b1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>null</title>
		<link>https://blog.killinsun.com/2013/01/null/</link>
		<pubDate>Wed, 23 Jan 2013 20:16:42 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

Androidアプリコンテストの納期が迫ってるのにコードが書けないから
運営おちょくってみた。

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130125051609" target="_blank" rel="noopener"><img class="hatena-fotolife" title="f:id:killinsun:20130125051609p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130125/20130125051609.png" alt="f:id:killinsun:20130125051609p:image" /></a>
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130125051610" target="_blank" rel="noopener"><img class="hatena-fotolife" title="f:id:killinsun:20130125051610p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130125/20130125051610.png" alt="f:id:killinsun:20130125051610p:image" /></a>

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2013-01-24 05:16:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-01-23 20:16:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[null]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-01-24-null.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[0fb600d31ff246915177c9e4013f60a265607411]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=165]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>モバイルアプリコンテスト2012</title>
		<link>https://blog.killinsun.com/2013/02/about-mobile-app-contest-2012/</link>
		<pubDate>Sun, 10 Feb 2013 09:19:58 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

先日ちらっと内容漏らしたんですが、
学校で所属している技術部でAndroidアプリのチーム開発を行なってました。

発端は技術部宛に　「モバイルアプリコンテスト2012」なるものの招待がきたため、
そのためのアプリを開発しようということになりました。

規定部門と自由部門があり、
うちの規定部門には　「予定表アプリケーション」「RPG」の二種類があり、
どちらも既存のものに操作性や機能を追加せよ、というお題でした。

僕らのチームは予定表アプリケーションのほうで開発を進めていました。


で、この既存のものが　<span class="deco" style="font-weight: bold;">とんでもなく酷い仕様</span>でして、上げるとキリがないので
箇条書きで書くと
<ul>
    <li>トップ画面は「新規追加」「時間割確認」ボタンの2つが黒背景の画面に乗っかってるだけ</li>
    <li>新規追加はまだマシだが、時間割確認は「トップ画面」→「曜日選択画面」→「時間割画面」→「詳細画面」と時間割確認するのに</li>
</ul>
3つのステップを踏む必要があった
<ul>
    <li style="list-style-type: none">
<ul>
    <li>キャンセルとかできない</li>
    <li>備考情報があるのはいいけど、一週間ごとにしか設定できない（曜日ごとにしか）</li>
    <li>意味不明なシェア機能（用意されたサーバーも、HTTPのPOSTメソッドで受け取ってtxtファイルに格納してるだけっぽい。）</li>
    <li>拡張性もクソもないデータベース仕様</li>
</ul>
</li>
</ul>
&nbsp;

これらを改善するために　要件定義（改善案）から始まり、
データベース設計になり、
最終的に　骨組みだけ残してほぼ作り変える結果になりました。

Androidアプリ開発は初めてなので、データベースやらネットワークプログラミングやら結構たいへんで手間取って
納期まで1ヶ月半あるうちの半分は　アプリそのものに手を付けずに仕様や研究をし、
残りの半分で一気に畳み掛けるというハードスケジュール。

<span class="deco" style="font-size: large; font-weight: bold;">特に最後の一週間は合計で３，４日ぐらい徹夜しました。</span>
本当に翼を授かるかと思った。

その苦労が実ったのか、デザインや機能が評価され、
<span class="deco" style="color: #ff0000;">一次審査を見事通過</span>。　　開発チームの代表として、今月２２日に福島にてアプリのプレゼンを行う事になりました。

ほぼ０の状態の知識や技術で作ったものが評価されるのは嬉しいものです。
プレゼンの内容もしっかり考えてあるので、２２日に披露してこようと思います。
福島かー・・・　地震から二年経つけど、僕が行くところはどうなっているんだろう。

結果はまた後日書きます。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date><![CDATA[2013-02-10 18:19:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-02-10 09:19:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about-mobile-app-contest-2012]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="android%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[Androidアプリ開発]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-02-10-about-mobile-app-contest-2012.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[a31790b4200cb204d49531cc81e77b0df5a1cc20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=166]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%83%a2%e3%83%90%e3%82%a4%e3%83%ab%e3%82%a2%e3%83%97%e3%83%aa%e3%82%b3%e3%83%b3%e3%83%86%e3%82%b9%e3%83%882012]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[あいや]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-02-10 19:00:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-02-10 10:00:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[あの時の先輩は翼がはえてた
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[killinsun]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://d.hatena.ne.jp/killinsun/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-02-10 19:02:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-02-10 10:02:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ｗｗｗｗｗ
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>トラブル☆しゅーたーず　#5~過去からの贈り物~に参加してきた</title>
		<link>https://blog.killinsun.com/2013/03/i-joined-an-event-trouble_shooters_5/</link>
		<pubDate>Sun, 03 Mar 2013 17:46:37 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=167</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">

3月2日に、西新宿で行われたイベントのレポートです。
今回はソロ参戦ではなく、学校の後輩と一緒に参加してきました。
イベントの概要と詳細はこちら。
<a href="http://www.zusaar.com/event/526059" target="_blank" rel="noopener noreferrer">トラしゅ</a>


すでに何人か記事書いてくださってます。
技術的な事とかタメになりそうな事はこちらにございます。

<a href="http://laugh-labo.blogspot.jp/2013/03/05.html?spref=tw" target="_blank" rel="noopener noreferrer">トラブル☆しゅーたーず＃05 参加してきたので一人反省会的なアレ</a>(@laugh_K様）
<a href="http://spherera.hatenablog.jp/entry/2013/03/05/001147" target="_blank" rel="noopener noreferrer">トラブル☆しゅーたーず＃05 ～過去からの贈り物～</a>(@spherera様)
<a href="http://takuyais.hateblo.jp/entry/2013/03/03/031245" target="_blank" rel="noopener noreferrer">トラブルしゅーたーず #05に参加</a>(@takuyais様)
<a href="http://d.hatena.ne.jp/s_kawakami/20130303/1362321332" target="_blank" rel="noopener noreferrer">トラブル☆しゅーたーず＃05　～過去からの贈り物～」に参加してきました #トラしゅ</a>(@sh_kawakami様)

<span class="deco" style="font-size: x-large;">概要障害を対応し、報告書を作成せよ。</span>
あなたはWEB系サービス会社に勤める社員。
山◯君（という架空の人物）を後輩に従え、リーダークラスになっているという設定。

４～６人体制のチームで活動し、お客様のWEBサイトにアクセスできないなどの
障害の原因を究明し、対応して復旧させる。
その後、お客様がいるという設定で、報告会をチームごとに行う。
かなり手のこんだ勉強会。
<h5>今回起きた障害</h5>
・なんかSSHが繋がらない
・サイトの表示がおかしい
・１６時にTV放映があるんですけど…
<h5>予定スケジュール</h5>
13:30 概要説明、チーム分け
14:00 正式にスタート。この時点で障害は発生している。
16:00 五月女商会様の商品がTV放映される（あくまで設定のお話）
16:15 五月女商会様の商品のTV放映が終了
18:00 作業終了。報告会開始。（この時点で報告書の提出締め切り）
<h5>私の行った内容をざっくりと</h5>
ぶっちゃけた私のスキル
<ul>
    <li style="list-style-type: none">
<ul>
    <li>Linuxの操作はできます。でも本格的なサーバーいじりはしたことありません。（インストールして確認ぐらい）</li>
    <li>CCNA持ってる！…よ（小声）</li>
    <li>前回参加したけど何もできなかったよ！</li>
</ul>
</li>
</ul>
&nbsp;

前回参加していたので、流れとか、立ち回りを反省して動こうと考えていました。
他の人は何をやってるのかとか、他の人からしたら私が今何をしているのか把握できるっていうのは
チームではすごく安心できる事なんですよね。


「誰が何をしているのか」を理解しようとすることで、
「これから自分は何を優先して作業を進めなければならないのか」を予測することができます。
もし、作業が手一杯だったら、それを他のチームメンバーに振る事だってできる。


最終的には、完全なトラブルシューティングはできませんでした。非常に悔しかった。
TV放映を乗り切った後、私の技術的にこれ以上何も対処ができないと考えたので、
現時点で書ける範囲で報告書の作成に取り掛かりました。
前回、パワポ形式で報告書を発表していたチームがあってカッコイイなーって思ったので、私達もパワポで作りました。
見事に他のチームもほぼ全部パワポでした（笑）

最初の概要報告の時に
<span class="deco" style="font-style: italic; color: #ff0000;">「お客様はリテラシーこそはないものの、セキュリティは気にされてる」</span>という言葉を思い出しました。
ぶっちゃけ私も障害報告（という名の謝罪）を行うのに
言い訳みたいに難しいIT用語を並べるのはカッコ悪いなーと思ったので、
できるだけ、目を通しやすい資料を作成しました。
障害対応できませんでしたっていう謝罪でもあるので、相手が聞いててわからない、退屈だと思うのは
発表する側としても自信を失っていくんですよね…。

お客様に損害を出しておいて謝罪するなんてことは学生の私にはなかなか無いことでして、
周りの方々は「謝罪のプロ」（馬鹿にしていない）なわけですから、自信ありませんでした。

報告書の発表（という名の謝罪）そのものに関しては、正直浮いてました。
周りのレベルが高すぎるというか、謝り慣れてるというか…。
ジェスチャーやら、謝罪なのにちょっとフランクな口調の癖が出てしまい、プレゼンしてて自分では嫌になったんですが、
後ほど、何人かの方々に褒めていただいたのでちょっと安心しました。
私の強みなんだと思って前向きにやります。
<h5>全チームの報告書とか</h5>
&nbsp;

<a href="https://docs.google.com/presentation/d/1OaaAlCKsaaV50xAcFjaklikekiBPDDf3Ecy-L0fc8Dg/edit" target="_blank" rel="noopener noreferrer">チーム１</a>
<a href="https://docs.google.com/presentation/d/18CWCkxMCowjeR3tmUiVE_MIp9JgbjpO1UjSQEFpOG3s/edit" target="_blank" rel="noopener noreferrer">チーム２</a>
<a href="https://docs.google.com/presentation/d/1WYIYz5oFjqYMlSO1Hf2oIH8ScRlk_leetfE-et8U6ZY/edit" target="_blank" rel="noopener noreferrer">チーム３</a>
<a href="https://docs.google.com/presentation/d/1OwI1zGcX31ygGl5Ro4-mpHN0nVESTzpBG9NDhi4w9XQ/edit" target="_blank" rel="noopener noreferrer">チーム４</a>
<a href="https://docs.google.com/document/d/1YBntCTEonq0MSulRhl28DV5y4wO_-P1jdeullOPUvxc/edit" target="_blank" rel="noopener noreferrer">チーム５</a>

あ、私チーム３です。

運営の方々が写真撮ってくださってました。
こんな感じの雰囲気（＝お通夜）の中、謝罪会見です。
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130305023946" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130305023946j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130305/20130305023946.jpg" alt="f:id:killinsun:20130305023946j:image" /></a>
<h5>結果は…</h5>
なんと、今回　16時のTV放映によるアクセス増加に耐える事ができたのは
我々のチームだけというのが大きな要因となり、<span class="deco" style="color: #ff0000;">見事優勝する事ができました。</span>
前回の結果からすると非常に大きかったと思います。やったね！
チーム３の皆さんお疲れ様でした。
<h5>感想</h5>
全く関係無い話になりますが、
勉強会の後の懇親会というのは、参加するべきなんだと思いました。

私は学生の身分であり、周りはみんな社会人として普通にインフラ構築や障害対応をしている
エンジニアの方々ばかりなので、話がすごく合うんです。
これはきっと社会人同士でも一緒だと思います。

何がすごいかっていうと、自分の会社の事とか経験を親身になって話してくれるということ
今携わってる、勉強（？）している事とか、おすすめの技術とか知識とか、勉強会の事とかも
紹介してくれて、非常に良いインプットが出来ました。
楽しくお酒を飲みながら語るのっていいね！


次回は5月にやるようです。
優勝できましたが、完璧とはいえません。障害を完全に復旧できるように貢献していきたいですね。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date><![CDATA[2013-03-04 02:46:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-03 17:46:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-joined-an-event-trouble_shooters_5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e3%83%88%e3%83%a9%e3%81%97%e3%82%85"><![CDATA[トラしゅ]]></category>
		<category domain="post_tag" nicename="%e3%83%88%e3%83%a9%e3%83%96%e3%83%ab%e2%98%86%e3%81%97%e3%82%85%e3%83%bc%e3%81%9f%e3%83%bc%e3%81%9a"><![CDATA[トラブル☆しゅーたーず]]></category>
		<category domain="category" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e9%9a%9c%e5%ae%b3%e5%af%be%e5%bf%9c"><![CDATA[障害対応]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-03-04-i-joined-an-event-trouble_shooters_5.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[01b8ecb8d9d9e045a97971d5f884d5b135d02d98]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=167]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%83%88%e3%83%a9%e3%83%96%e3%83%ab%e2%98%86%e3%81%97%e3%82%85%e3%83%bc%e3%81%9f%e3%83%bc%e3%81%9a%e3%80%805%e9%81%8e%e5%8e%bb%e3%81%8b%e3%82%89%e3%81%ae%e8%b4%88%e3%82%8a%e7%89%a9%e3%81%ab]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Ubuntuだとパソコンのディスプレイが見辛かったので調整メモ</title>
		<link>https://blog.killinsun.com/2013/03/note-tweak-laptop-display-on-ubuntu/</link>
		<pubDate>Fri, 08 Mar 2013 18:08:17 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=168</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

Linuxを本格的に使い始めようと思ったは良いものの、
Windows7やMacを使っている時と画面の文字が明るすぎて見えないというか
画面の明るさを調整してもなんとなく見えないというかで困ってた。

調べたらすぐ出てきた。

<a href="https://forums.ubuntulinux.jp/viewtopic.php?id=4263" target="_blank" rel="noopener noreferrer">ディスプレイの調整</a>
<blockquote>xgamma -gamma 1.0</blockquote>
1.0が標準で、0.1単位で指定するといいみたい。
明るすぎたので、今回は0.7ぐらいに設定するとちょうど良かった。

このままだと再起動したときにデフォルトに戻ってしまうので、
<blockquote>~/.profile</blockquote>
こちらに記述しておく。

いい感じいい感じ。
後はバッテリーの消費を抑える方法と、学校へのVPN接続ができるようにしないとなー。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date><![CDATA[2013-03-09 03:08:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-08 18:08:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[note-tweak-laptop-display-on-ubuntu]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-03-09-note-tweak-laptop-display-on-ubuntu.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[86e3ef5b685d9ed88024868b9aacb8905f701d57]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=168]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[ubuntu%e3%81%a0%e3%81%a8%e3%83%91%e3%82%bd%e3%82%b3%e3%83%b3%e3%81%ae%e3%83%87%e3%82%a3%e3%82%b9%e3%83%97%e3%83%ac%e3%82%a4%e3%81%8c%e8%a6%8b%e8%be%9b%e3%81%8b%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%a7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Mini-ITXゲットだぜ</title>
		<link>https://blog.killinsun.com/2013/03/i-got-a-mini-itx/</link>
		<pubDate>Fri, 15 Mar 2013 18:42:32 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=169</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315205841" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315205841j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315205841.jpg" alt="f:id:killinsun:20130315205841j:image" /></a>
たなかから貰いました。
電源無しで。　　すぐ一緒に地元の電気屋で付属電源目当てにMini-ITXケース（右）を購入。

スペック

CPU:Intel atom 1.8GHz
メモリ:3GB
HDD:250GB

その他はあんま知らない状態。あとでBIOS起動してちゃんと調べよう。

で、せっかく新品のケース買ったし、1から組み立ててみようということで
中身をすべて新品のケースの方に移動させることに。
<h5>組立る</h5>
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315205534" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315205534j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315205534.jpg" alt="f:id:killinsun:20130315205534j:image:w360" width="360" /></a>


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315210029" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315210029j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315210029.jpg" alt="f:id:killinsun:20130315210029j:image:w360" width="360" /></a>
こちらがもらったほう。

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315210041" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315210041j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315210041.jpg" alt="f:id:killinsun:20130315210041j:image:w360" width="360" /></a>
ケースを開けてみる


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315211635" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315211635j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315211635.jpg" alt="f:id:killinsun:20130315211635j:image:w360" width="360" /></a>
ちなみに中学生くらいの時に、ホコリ掃除するためにこれ抜いて
適当に差し込んで起動できなくなった経験あります。


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315211845" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315211845j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315211845.jpg" alt="f:id:killinsun:20130315211845j:image:w360" width="360" /></a>
マザーボード取り外し成功。
新しい方に移動させます。


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315220928" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315220928j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315220928.jpg" alt="f:id:killinsun:20130315220928j:image:w360" width="360" /></a>
接続とかは夢中になってやってたのであんまり記録はしてなかった。
まぁこんな感じ。
もっと上手く配線回せば静音とか排気に効果が出るのだろうけど、
正直このケースの大きさじゃ無理があるような。


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315221622" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315221622j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315221622.jpg" alt="f:id:killinsun:20130315221622j:image:w360" width="360" /></a>
キーボード刺さってねーよ！！！
<h5>HardDIsk Error</h5>
BIOSの画面もきっちり通り、よっしゃ行くでー！っと思ったところ、
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315222801" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315222801j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315222801.jpg" alt="f:id:killinsun:20130315222801j:image:w360" width="360" /></a>

まじかよ。


たなかに連絡してヘルプを求めたところ、
認識はしてるんだよね。
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315223136" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315223136j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315223136.jpg" alt="f:id:killinsun:20130315223136j:image:w360" width="360" /></a>
ほら。

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315223438" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315223438j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315223438.jpg" alt="f:id:killinsun:20130315223438j:image:w360" width="360" /></a>
仕方がないので手元にあった　PuppyLinux 5.2.8JPを使って
LiveCDとして起動し、ハードディスクを０クリアフォーマットした。


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315234234" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315234234j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315234234.jpg" alt="f:id:killinsun:20130315234234j:image:w360" width="360" /></a>
その後、CentOS6.3をインストール。
（この前6.4出たばかりだけど）

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130315235732" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130315235732j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130315/20130315235732.jpg" alt="f:id:killinsun:20130315235732j:image:w360" width="360" /></a>
無事起動できた！！


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130316001513" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130316001513j:image:w360" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130316/20130316001513.jpg" alt="f:id:killinsun:20130316001513j:image:w360" width="360" /></a>
ネットワークの設定も完了し、とりあえず何していいかわからなかったので
yum -y update　と yum -y install vim　を打ち込んで
確認。
無事、インストールできたようです。
<h5>今後の用途</h5>
８月に、所属している技術部で夏季合宿を行います。
本来ならば、運動系の部活が参加する学校の合宿なんですが、
今年は私が主体となって動き、「鬼畜な修行をしよう」ということで、会議室を借りて
イベントを組もうという話に。

CTFやハッカソンをやろうという話になってきていますが、
どちらにしてもネットワークにつながらないと大変なので、
（会場には回線が通っておらず、モバイルWi-Fiを使う必要がある）
これをルーターとして構築して、外部とのネットワークの構成を考えようと。
後は通信の出入りを監視するサーバーとしての役目も果たせそうだ。

mini-ITXなので、合宿程度の移動ならなんとか持ち運べるだろうという考えもあって。

iptablesを使ってルーターを構築するのは初の試みなので非常に楽しみ。

当分はこちらをいじり倒す事になりそう。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2013-03-16 03:42:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-15 18:42:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-got-a-mini-itx]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="mini-itx"><![CDATA[Mini-ITX]]></category>
		<category domain="post_tag" nicename="%e8%87%aa%e5%ae%85%e3%82%b5%e3%83%bc%e3%83%90%e3%83%bc"><![CDATA[自宅サーバー]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-03-16-i-got-a-mini-itx.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[ad9f4750b25dbf02bf2734eedc44224efe54221c]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=169]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[mini-itx%e3%82%b2%e3%83%83%e3%83%88%e3%81%a0%e3%81%9c]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Ubuntu12.10　ノートPCで画面の明るさ調整</title>
		<link>https://blog.killinsun.com/2013/03/brightness-tweak-on-ubuntu-12-10-on-laptop/</link>
		<pubDate>Sun, 17 Mar 2013 14:24:11 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">
<h5>症状</h5>
Ubuntu12.10を導入したものの、ノートPCにて
<blockquote>Fn ＋ ← or →</blockquote>
で明るさが調整できない事にハマってたので、設定メモ。

仕様構成
マシン：AcerAspireS3
OS:Ubuntu 12.10

Fnキーを使っても、
設定メニューから明るさを調節するバーをいじっても、
画面では変わってるらしいんだが、実際に変わらない症状です。
<h5>以下、メモ</h5>
端末から
<blockquote>sudo vi /etc/default/grub</blockquote>
grubの設定ファイルを開く。

開いてすぐのこの項目。
<blockquote>GRUB_CMDLINE_LINUX_DEFAULT=""</blockquote>
[""]内に以下を追加
<blockquote>acpi_osi=Linux acpi_backlight=vendor</blockquote>
何をやってるのかはよくわからないけどおまじないということで。
まぁなんとなく察しはつきますね。
<blockquote>GRUB_CMDLINE_LINUX_DEFAULT="acpi_osi=Linux acpi_backlight=vendor"</blockquote>
このようになったら保存して終了。
<blockquote>update-grub</blockquote>
と打ち込み、再起動。

これで、画面の明るさ調整ができるようになった。
ついでに、音量の調整も効くようになった。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2013-03-17 23:24:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-17 14:24:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[brightness-tweak-on-ubuntu-12-10-on-laptop]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-03-17-brightness-tweak-on-ubuntu-12-10-on-laptop.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[76252b042ab5d2053bf64a00b47d616ff37b56f9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=170]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[ubuntu12-10%e3%80%80%e3%83%8e%e3%83%bc%e3%83%88pc%e3%81%a7%e7%94%bb%e9%9d%a2%e3%81%ae%e6%98%8e%e3%82%8b%e3%81%95%e8%aa%bf%e6%95%b4]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[ネットで調べもの]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-26 03:08:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-25 18:08:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[いやぁ～メモを残しておいてくれて助かりました。<br>環境はAcer Aspire5741なんですがUSBメモリにフルインストールしたUbuntu13.10<br>が明るさ調整が出来なくて（私の環境では音は問題ありませんでした。）<br>いろいろなサイトで紹介してくれている方法を試してみたものの任意の明るさに固定する事は出来ても<br>明るくしたり暗くしたりの調整が出来なくて困っていました。<br>本当にありがとうございました。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[killinsun]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://d.hatena.ne.jp/killinsun/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-26 17:10:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-26 08:10:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt;&gt;ネットで調べもの　様<br>古い記事ですが、ご参考になったようで幸いです。<br>私のAcer機は既に使えなくなってしまっていますが、ネットで調べ物　様のように<br>コメントを残して頂けることで、メモ書きをしておいてよかったなと思います。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[ネットで調べもの]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-26 23:22:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-26 14:22:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[killinsunさんへ <br>コメントへのご返信いただき有難うございます。<br>そうなんですね。使えなくなっちゃったんですね。<br>まぶしさに困っている者にとってはまさにオアシスなページでした。実に有難かったです。有難うございました。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[oldwave]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-09-12 03:29:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-09-11 18:29:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[私も助かりました。ありがとうございます。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>LinuxユーザーのFreeBSD入門メモ</title>
		<link>https://blog.killinsun.com/2013/03/tutorial-freebsd-for-linux-users/</link>
		<pubDate>Thu, 21 Mar 2013 16:32:16 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=171</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

UbuntuとCentOSしか触った事なかったのでメモ。
トラブル☆しゅーたーず#5で知り合い、懇親会でかなりお世話になった
@usaturn様のご好意で
HPの激安サーバー「ML115G5」を実験用に譲って頂いたので、
早速普段触らないFreeBSDをインストールしてみた。

スペックとかはまた次回の記事で。

右も左もわからないので、
インストール後から思いついた事をやってみる。
<h5>インストール直後</h5>
&nbsp;
<blockquote>#adduser YourName</blockquote>
&nbsp;

でアカウント作成

デフォルトのシェルがshになってるので
とりあえず cshに変更。
<h5>Portsとは</h5>
FreeBSDでは、パッケージ管理？の方法にportsというものを使っているらしい。

予めBSDのインストール時にアプリケーションなどの情報だけを格納しておき、
ユーザーが後から必要なものだけインストールする方式らしい。
<blockquote>/usr/ports/</blockquote>
&nbsp;

にいろいろ入ってる。
カテゴライズされてた。

だが、インストールされてなかったので、入れる。
<blockquote># fetch <a href="ftp://ftp.freebsd.org/pub/FreeBSD/ports/ports/ports.tar.gz" target="_blank" rel="noopener noreferrer">ftp://ftp.freebsd.org/pub/FreeBSD/ports/ports/ports.tar.gz</a>
# tar -zxvf ./ports.tar.gz -C /usr/</blockquote>
&nbsp;
<h5>アップデート</h5>
&nbsp;
<blockquote>#portsnap fetch
#portsnap extract
#portsnap update</blockquote>
&nbsp;
<h5>ためしにVimを入れる</h5>
&nbsp;
<blockquote>#cd /usr/ports/editors/vim
#make install</blockquote>
&nbsp;

これでvimをとりあえず入れてみた。
<h5>FreeBSDにBashを入れる</h5>
<blockquote>#cd /usr/ports/shells/bash
#make install</blockquote>
&nbsp;

インストール時はports関係を入れてなかったので、
依存関係のプログラムをインストールする関係で、
vimとbashの２つを入れるだけでもかなり時間を食った。
<blockquote>#chsh -s /usr/local/bin/bash</blockquote>
&nbsp;

デフォルトのシェルをbashに設定。
<h5>一応サーバーとして動かすので、IPアドレスの固定をする</h5>
IPアドレスの固定したいけど
<blockquote>/etc</blockquote>
&nbsp;

の中によくある
<blockquote>/sysconfig/</blockquote>
が無いので
ネットワーク関連の設定はどこですればいいのやら。
<blockquote>/etc/rc.conf</blockquote>
&nbsp;

で設定するみたい。

BSDの場合は、Linuxであるような
eth0~xではなく、様々な表記らしいので、ifconfigで確認
<blockquote>$ ifconfig
<span class="deco" style="color: #ff0000;">bge0</span>: flags=8843&lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&gt; metric 0 mtu 1500
options=c019b&lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM,TSO4,VLAN_HWTSO,LINKSTATE&gt;
ether d8:d3:85:ae:0a:f2
inet 192.168.0.7 netmask 0xffffff00 broadcast 192.168.0.255
nd6 options=29&lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL&gt;
media: Ethernet autoselect (100baseTX &lt;full-duplex&gt;)
status: active
lo0: 略</blockquote>
&nbsp;

bge0ね。　なるほど。
ところでなんでbgeなんだろう？
eth0はEthernetだってわかったけど。
<blockquote>#vim /etc/rc.conf</blockquote>
&nbsp;

下記を追加
<blockquote>network_interfaces="bge0"
ifconfig_bge0="inet 192.168.0.127 netmask 255.255.255.0 broadcast 192.168.0.255"</blockquote>
&nbsp;
<blockquote>#service network restart</blockquote>
&nbsp;

とやりたいところだが、　<span class="deco" style="color: #ff0000;">network</span>ではなく　<span class="deco" style="color: #ff0000;">netif</span>らしい
<blockquote>#service netif restart</blockquote>
&nbsp;

これで設定完了。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date><![CDATA[2013-03-22 01:32:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-21 16:32:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tutorial-freebsd-for-linux-users]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="freebsd"><![CDATA[FreeBSD]]></category>
		<category domain="post_tag" nicename="freebsd"><![CDATA[FreeBSD]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e5%88%9d%e5%bf%83%e8%80%85%e5%90%91%e3%81%91"><![CDATA[初心者向け]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-03-22-tutorial-freebsd-for-linux-users.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[46efb61bf7bf0382f7f3ad67e711f8426e5ba11e]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=171]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[linux%e3%83%a6%e3%83%bc%e3%82%b6%e3%83%bc%e3%81%aefreebsd%e5%85%a5%e9%96%80%e3%83%a1%e3%83%a2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>HackerJapan 2013年５月号のやられサーバー01がMacで起動できなかった話</title>
		<link>https://blog.killinsun.com/2013/04/i-could-not-deploing-a-target-server-01-on-my-macos/</link>
		<pubDate>Tue, 09 Apr 2013 16:52:16 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

先日、発売されたばかりのHackerJapan２０１３年５月号を購入。
（ついでに日経Linuxも）

去年９月あたりから買い始めて
今回は収録DVDにやられサーバーが３つ収録されてた。

試しにMacのVirtualBOXに入れてみようとしたんだけど
[yarare02]はすんなりとインポートできたけど
[yarare01]はわけのわからんエラーが出てインポートできない。

どういう事かと思って、 ls -lで権限みてみたら
書き込み権限がなかった。

chmod 755 FreeBSD*

とやってみて上手くインポートして起動する事ができた。

windowsだと問題なくいけたんだろうか？
<h5>表記ミス?</h5>
P25のNessusを起動するの項、３番のアクティベーションコードを入手したら
[nessus-register --fetch]コマンドを入力する　　ってあるけど
スクリーンショットだと　nessus-fetch --register　になってる。
後者が正解っぽい。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date><![CDATA[2013-04-10 01:52:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-09 16:52:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-could-not-deploing-a-target-server-01-on-my-macos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="hackerjapan"><![CDATA[HackerJapan]]></category>
		<category domain="category" nicename="network"><![CDATA[Network]]></category>
		<category domain="post_tag" nicename="network"><![CDATA[Network]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[Security]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-04-10-i-could-not-deploing-a-target-server-01-on-my-macos.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[95f076a88d833bfddf8fd33001c61c2fe01b73f9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=172]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[hackerjapan-2013%e5%b9%b4%ef%bc%95%e6%9c%88%e5%8f%b7%e3%81%ae%e3%82%84%e3%82%89%e3%82%8c%e3%82%b5%e3%83%bc%e3%83%90%e3%83%bc01%e3%81%8cmac%e3%81%a7%e8%b5%b7%e5%8b%95%e3%81%a7%e3%81%8d%e3%81%aa]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>後輩が入ってきた</title>
		<link>https://blog.killinsun.com/2013/04/my-junior-joined-to-my-lab/</link>
		<pubDate>Tue, 16 Apr 2013 04:46:01 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=173</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
うちの学校は資格の勉強ばかりで、実際にネットワークを組んだり、プログラムを作るなどの経験積んでいる学生がいるというとそういうわけではない。<br>社会に出ると「資格は持ってるけどそれだけだ」って声もきいてか、<br>「じゃあ授業でやらないようなことやろう」と思って技術部に所属し、Labo組というのを立ち上げた。<br>設立しょっぱなからコアメンバー一人、その他数名と出だしは好調だったが<br><br><br>11月ぐらいから着々と準備を進め、先週の金曜日に<br>とうとう新入生を対象に体験入部というのを行った。<br><br>反応がよかったのか、昨日は二人の後輩が顔を見せた。<br><br>うち一人が非常にやる気満々だったので、ちょっとやらせてみた。<br>
<h5>Linuxをちゃんと使わせてみる</h5>
Linux初心者（体験課題でちょっと触っただけ）らしいので、<br>学内においてあるvSphereサーバーに領域をつくって、<br>CentOS6をインストールしてみようか　と課題をあげてみたら、<br>苦戦しながらも、Google先生を駆使してCentOSをインストールしてみせた。<br>その後、学内どこからでもアクセスできるように<br>ipアドレスの固定を自力でやってもらい、Apache2をインストールしてもらった。<br><a href="http://f.hatena.ne.jp/killinsun/20130416135054" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130416/20130416135054_120.jpg" alt="f:id:killinsun:20130416135054j:image:medium" title="f:id:killinsun:20130416135054j:image:medium" class="hatena-fotolife"></a><br>たった数時間で初心者がLinuxをインストールし、Viエディタを使えるほどなのだから<br>よほどの興味や好奇心がなければできなくて、<br>かつ理解力も求められるんだろうなーと思った。<br><br>僕なんかはLPICの勉強を始め、そこではじめてLinuxに触ったので、この一連の流れがスムーズにできずに<br>苦戦していた。<br><br>今回は僕というちょっとした補助がついているとはいえ、よくできたと思う。<br><br><br>精進せねば、あっという間に追い抜かされてしまう。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date><![CDATA[2013-04-16 13:46:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-16 04:46:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-junior-joined-to-my-lab]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-04-16-my-junior-joined-to-my-lab.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[093075c2ad92cb31bef2882ae5d8582db39eeb66]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=173]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e5%be%8c%e8%bc%a9%e3%81%8c%e5%85%a5%e3%81%a3%e3%81%a6%e3%81%8d%e3%81%9f]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[あいや]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-04-16 20:08:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-04-16 11:08:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[僕も精進しなければ。<br>こわいんですね…後輩って。
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>秋葉原ぶらり</title>
		<link>https://blog.killinsun.com/2013/04/hanging-out-akihabara/</link>
		<pubDate>Sun, 28 Apr 2013 16:14:02 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[<br>

<div class="section">
今日買ったもの<br><br><a href="http://f.hatena.ne.jp/killinsun/20130429205246" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130429/20130429205246.jpg" alt="f:id:killinsun:20130429205246j:image" title="f:id:killinsun:20130429205246j:image" class="hatena-fotolife"></a><br><br>GW-USNano2(USB無線LAN子機) 680<br>ドライバーセット 680<br>非純正Lightningケーブル 350 *2<br><br>無線LANは、スポーツ合宿用に。<br>Realtekのチップセットなので、恐らくLinuxでも使える。<br><br>非純正のLightningケーブルは、怪しいお店で購入。<br>正直疑ってたが、見た目は純正と瓜二つで、<br>実際に使ってみて、充電も同期もできた。<br>非純正ながらこれで350円はいい買い物をした。<br>2つ購入。<br><br><br>ドライバーセットは、日常的に使うものではないが、<br>特殊な形状のドライバーを使う事もあったので、一応購入。<br>@usaturn氏に頂いた パッカードのML115Gはこれにお世話になるはず。<br><br><br><a href="http://f.hatena.ne.jp/killinsun/20130429205905" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130429/20130429205905.jpg" alt="f:id:killinsun:20130429205905j:image" title="f:id:killinsun:20130429205905j:image" class="hatena-fotolife"></a><br>こいつ・・・開くと自動的に抜きやすいように立ち上がるんだぜ・・・。<br>気が利くドライバーセット。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2013-04-29 01:14:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-28 16:14:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hanging-out-akihabara]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-04-29-hanging-out-akihabara.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[9e8118a87f4edcb4d4caa964c84d40d8b47c09bf]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=174]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e7%a7%8b%e8%91%89%e5%8e%9f%e3%81%b6%e3%82%89%e3%82%8a]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>LPIC Level2 (201)</title>
		<link>https://blog.killinsun.com/2013/04/lpic-level2-201/</link>
		<pubDate>Mon, 29 Apr 2013 18:37:55 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=175</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">
<h5>Level1の話</h5>
日付は前後しますが、２８日にLPIC Level1の認定を頂きました。
101試験は去年の５月に取得して以来、一年ぶりに資格の勉強を始め、
６日ほどさっくり勉強するだけで102試験に合格できました。

というのも、101試験の時はLinuxに触った事すらなく、
CCNA取得後の勢いで挑戦して　一ヶ月ほど勉強したのですが
ボロボロの結果でした。
（一応合格できたものの、満足できる点数ではなかった）
<h5>101取得後は修行</h5>
・・・というほどガッツリではなかったんですが、
それ以来Linuxに触れる機会が多くなり、特に今年に入ってからは
自宅サーバーを用意したりなど、実際に扱う事が多かったため、
102試験の試験範囲に大きく関わらなくとも、Linux脳になってました。

ネットワークやセキュリティ、SQLの分野は
CCNAやプログラミングの経験などでカバーできたので、ほぼノー勉でしたが
結構いけました。
結果、６８０点ほどで合格。　ちなみに１０１は５９０点でした。
<h5>即日２０１の勉強</h5>
Level2となる201試験の勉強をその日から開始しましたが
難易度が違い過ぎますね。
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/dp/4798128600/?tag=hatena_st1-22&amp;ascsubtag=d-1ajs09"><img class="hatena-asin-detail-image" title="Linux教科書 LPICレベル2 第4版" src="https://images-fe.ssl-images-amazon.com/images/I/51T5QJ6Qi-L._SL160_.jpg" alt="Linux教科書 LPICレベル2 第4版" /></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/dp/4798128600/?tag=hatena_st1-22&amp;ascsubtag=d-1ajs09">Linux教科書 LPICレベル2 第4版</a></p>

<ul>
    <li><span class="hatena-asin-detail-label">作者:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%C3%E6%C5%E7%C7%BD%CF%C2">中島能和</a>,<a class="keyword" href="http://d.hatena.ne.jp/keyword/%DF%C0%CC%EE%B8%AD%B0%EC%CF%AF">濱野賢一朗</a></li>
    <li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2">翔泳社</a></li>
    <li><span class="hatena-asin-detail-label">発売日:</span> 2012/10/26</li>
    <li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
    <li><span class="hatena-asin-detail-label">クリック</span>: 1回</li>
    <li><a href="http://d.hatena.ne.jp/asin/4798128600" target="_blank" rel="noopener">この商品を含むブログ (6件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>
あずき本を購入し、カーネル関係の内容から読み進めていますが、
いかんせん、実際に触れる事がなかなかない分野なので
理解が難しいです。
しかしワクワクする、この感覚。

201はping-tなどの問題を解くだけでは合格できないという声が大きいので、
実際に触って覚えるというスタンスは崩さないように楽しみつつ勉強を進めます。

幸い、学校に設置してあるサーバーのvSphere上で、
仮想的にRAID組んだりもできるはずなので、「作って壊す」のにそれほど苦労はしないと思う。

さっそく2.6.xカーネルから3.8カーネルへの移行中
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130501033607" target="_blank" rel="noopener"><img class="hatena-fotolife" title="f:id:killinsun:20130501033607p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130501/20130501033607.png" alt="f:id:killinsun:20130501033607p:image" /></a>

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date><![CDATA[2013-04-30 03:37:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-29 18:37:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lpic-level2-201]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="lpic"><![CDATA[LPIC]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7"><![CDATA[勉強]]></category>
		<category domain="post_tag" nicename="%e8%b3%87%e6%a0%bc"><![CDATA[資格]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-04-30-lpic-level2-201.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[f040d5807065a4329f4a40b7aaf2a2b72cfbec43]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=175]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>LPIC Level2用　named.confメモ</title>
		<link>https://blog.killinsun.com/2013/05/note-named-conf-for-lpic-level2/</link>
		<pubDate>Thu, 16 May 2013 01:42:23 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

LPIC Level2を今日受験する予定だけど、
named.confの細かい所が理解できないので、直前メモ
<h5>ACL</h5>
&nbsp;
<blockquote>acl localnet{
192.168.0.0/24
}</blockquote>
&nbsp;

aclステートメントでネットワークやIPアドレスに名前をつける。
ここでは、 192.168.0.0/24ネットワークをlocalnetとして対応付けている
下記のステートメントなどで、ここで定義した名前をつけることができるようになる。

CCNAから入った身としては、アクセス制御リストとして
拒否設定を行うのかと勘違いしてた。
<h5>include</h5>
外部ファイルの読み込み
<blockquote>include "file";</blockquote>
実機で確認すると、鍵ファイルなどを読み込んでいる事が多かった。
<h5>controls</h5>
namedを操作する事ができるIPアドレスやポート番号を指定する。
さっきまでaclとごっちゃになってた。
<h5>options</h5>
&nbsp;

めちゃくちゃ多い。複雑すぎ。

<span class="deco" style="font-weight: bold;">-directory</span>
ゾーンファイルが格納されるディレクトリの絶対パス

<span class="deco" style="font-weight: bold;">-recursion</span>

yes または　no を指定することで、再帰的問い合わせを受け付けるかどうかを指定する。

再帰的問い合わせっていうのは、
自身が持っているドメインの情報以外のリクエストがきたときに「知らない」と答えるか。
知らないドメインの情報が出た場合に、どっか別のDNSサーバーからひっぱてきて答えることを
再帰的問い合わせという。

<span class="deco" style="font-weight: bold;">-recursive-clients</span>

再帰的問い合わせを受け付けるクライアントの数を指定する。そのまんま。
多いと鯖が死ぬ。

<span class="deco" style="font-weight: bold;">-forward</span>

上の再帰的と居合わせと被ってややこしい。
自身が名前の情報を持たずキャッシュにすら存在しない問い合わせがある場合、
他のDNSサーバーに問い合わせる事。

only かfirstで指定する。

only:フォワードによる名前解決のみを行い、自身では再帰問い合わせを行わない
first:自身が持っていない情報であれば、最初にフォワードによる名前解決を試す。

<span class="deco" style="font-weight: bold;">-forwarders{}</span>
ここでフォワードする宛先を指定する

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2013-05-16 10:42:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-16 01:42:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[note-named-conf-for-lpic-level2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e3%83%a1%e3%83%a2"><![CDATA[メモ]]></category>
		<category domain="post_tag" nicename="%e8%b3%87%e6%a0%bc"><![CDATA[資格]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-05-16-note-named-conf-for-lpic-level2.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[4f9c4f638524f85e969c3909eead0edf551f9524]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=176]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[lpic-level2%e7%94%a8%e3%80%80named-conf%e3%83%a1%e3%83%a2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>python-twitterを使ってTwitterBot開発</title>
		<link>https://blog.killinsun.com/2013/06/build-a-twitter-bot-with-python-twitter/</link>
		<pubDate>Wed, 05 Jun 2013 18:20:28 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

環境の構築さえできてしまえば問題無いんだけど、OAuthだったり、
tweetpyだったり、python-twitterだったり、その他いろいろだったり
ライブラリが多すぎてどれを参考にしていいかわからなくなった人向けに。

今回は<span class="deco" style="font-weight: bold;">python-twitter ver0.8.5</span>を使います。
（執筆時点では1.0が出てるけどこちらのほうが解説充実しているため）
<h5>ダウンロード</h5>
&nbsp;
<ul>
    <li>python-twitter</li>
</ul>
<a href="https://code.google.com/p/python-twitter/" target="_blank" rel="noopener noreferrer">https://code.google.com/p/python-twitter/</a>
右のDownloadメニューからver 0.8.5をダウンロード。

python-twitterは、他に３種類の依存関係のあるモジュールをインストールしなければならない。
それぞれダウンロードして解凍しておく。
<ul>
    <li>simplejson</li>
</ul>
<a href="http://cheeseshop.python.org/pypi/simplejson" target="_blank" rel="noopener noreferrer">http://cheeseshop.python.org/pypi/simplejson</a>
<ul>
    <li>httplib2</li>
</ul>
<a href="http://code.google.com/p/httplib2/" target="_blank" rel="noopener noreferrer">http://code.google.com/p/httplib2/</a>
<ul>
    <li>python-oauth2</li>
</ul>
<a href="http://github.com/simplegeo/python-oauth2" target="_blank" rel="noopener noreferrer">http://github.com/simplegeo/python-oauth2</a>
<h5>各モジュールのインストール</h5>
&nbsp;

ダウンロードするものを間違えない限り、大体は、解凍したフォルダ内にある
setup.py　を実行することでインストールできる。
管理者権限が必要なので注意。
<pre class="syntax-highlight">sudo pthon setup.py install
</pre>
引数をinstallではなく、buildにすることで、構築と配置を別々の作業に切り分けることもできるらしい。
<h5>OAuth認証のための【鍵】を取得する</h5>
こちらにアクセス
twitter developpers
<a href="https://dev.twitter.com/" target="_blank" rel="noopener noreferrer">https://dev.twitter.com/</a>

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130607023401" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130607023401p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130607/20130607023401.png" alt="f:id:killinsun:20130607023401p:image" /></a>
ログインしたら画面右上のアイコンをクリックし、My Applicationsを選択

ここでこれから作成するTwitterアプリケーション(=bot)の登録をする。
<ul>
    <li>Name</li>
</ul>
アプリケーションの名前。あなたの名前ではありません。
<ul>
    <li>Description</li>
</ul>
Twitterで外部サービスを使う時に、「このアプリを認証する」という画面を見かけたことがあるかと思います。
そこに出てくる説明文です。
<ul>
    <li>WebSite</li>
</ul>
もしホームページやブログをお持ちなら
<ul>
    <li>Callback URL</li>
</ul>
今回は空白でOK


<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130607023404" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130607023404p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130607/20130607023404.png" alt="f:id:killinsun:20130607023404p:image" /></a>
上手く作成できればこの画面に飛ぶ。
ここがTwitter側で自身のアプリケーションを管理するページである。
ご覧の通り、鍵もここに記載されている。

このままだと、アプリケーションはRead-onlyとなっており、
こちらから行えるのはTLやユーザー情報の取得だけで、ツイートの投稿やフォローなどはできない。

上部にある[settings]タブにあるメニューを見れば、どこを編集すればいいかわかるはず。

<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20130607023405" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20130607023405p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20130607/20130607023405.png" alt="f:id:killinsun:20130607023405p:image" /></a>
Detailsタブに戻り、ページ下部にある
Create my access token　をクリック

これで、
<ul>
    <li>Consumer Key</li>
    <li>Consumer Secret</li>
    <li>Access Token</li>
    <li>Acccess Secret</li>
</ul>
OAuth認証に必要な４つの鍵が揃った。
これらは外部に漏らさないようにすること。
<h5>指定ユーザーのツイートを取得し、ランダムにつぶやく</h5>
&nbsp;

必要なモジュールをインストールし、
鍵も取得できたところで、いきなりソースコード貼っつけて解説する。
<pre class="syntax-highlight">1 <span class="synComment">#coding:utf-8</span>
2 <span class="synPreProc">import</span> twitter,t_key,random
3
4 consumerKey   =t_key.dict['<span class="synConstant">cons_key</span>']
5 consumerSecret  =t_key.dict['<span class="synConstant">cons_sec</span>']
6 accessToken     =t_key.dict['<span class="synConstant">acc_token</span>']
7 accessSecret  =t_key.dict['<span class="synConstant">acc_sec</span>']
8
9 api = twitter.Api(consumerKey,consumerSecret,accessToken,accessSecret)
10
11 tlAry = api.GetUserTimeline('<span class="synConstant">kill_in_sun</span>',count=100)
12 tweetlist=[]
13
14 <span class="synStatement">for</span> s <span class="synStatement">in</span> tlAry:
15     <span class="synStatement">if</span> s.text[0] != '<span class="synConstant">@</span>':
16         tweetlist.append(s.text)
17
18 api.PostUpdates(status=tweetlist[random.randint(0,99)])
</pre>
&nbsp;
<ul>
    <li>2行目</li>
</ul>
python-twitterでは、twitterモジュールとしてインポートしている。
<ul>
    <li>４行目から７行目</li>
</ul>
先ほど取得した認証鍵を予め別ファイルに格納しておき、
インポートしてから格納している。
<ul>
    <li>9行目</li>
</ul>
注意して貰いたいのは、古い技術ブログに
twitter.Api(username=xxx,password=xxx)といった形の認証方法を記述しているものがあるが、
この認証方式は随分前に廃止になっており、使うことは出来ない。
現在のOAuth認証では、
<pre class="syntax-highlight">api = twitter.Api(consumerKey,consumerSecret,accessToken,accessSecret)
</pre>
このようにして、４つの鍵をパラメータとして渡す必要がある。
<ul>
    <li>11行目</li>
</ul>
<pre class="syntax-highlight">11 tlAry = api.GetUserTimeline('<span class="synConstant">kill_in_sun</span>',count=100)
</pre>
<ul>
    <li>GetUserTimeline()</li>
</ul>
このメソッドで指定したユーザーのタイムラインが取得できる。
取得したデータはオブジェクト型として戻り値が返される。
<ul>
    <li>15行目</li>
</ul>
<pre class="syntax-highlight">15     <span class="synStatement">if</span> s.text[0] != '<span class="synConstant">@</span>':
</pre>
&nbsp;

text　パラメータが、実際の「つぶやいた内容」である。
先頭に[@]が付いているものは公開リプライになってしまうため、取得しないように弾いている。
<ul>
    <li>16行目</li>
</ul>
<pre class="syntax-highlight">16         tweetlist.append(s.text)
</pre>
今回は、リストを用意し、countで指定した分だけ格納するようにしている。
<ul>
    <li>18行目</li>
</ul>
>|python|
18 api.PostUpdates(status=tweetlist[random.randint(0,99)])
||&lt;
<ul>
    <li>PostUpdates()</li>
</ul>
status=[文字列]
ツイートするメソッド。
ご覧のとおり、randomを使い、１００件取得したツイートの中から適当に選び、ツイートしている。
<h5>今後やるべきことメモ</h5>
&nbsp;
<ul>
    <li>リプライがあった場合に対応</li>
    <li>一度ツイートしたものは以後、ツイートしないようにする</li>
    <li>自動フォロー返し</li>
</ul>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date><![CDATA[2013-06-06 03:20:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-05 18:20:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[build-a-twitter-bot-with-python-twitter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="twitter"><![CDATA[Twitter]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-06-06-build-a-twitter-bot-with-python-twitter.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[195cd8cfa03124923a7e82adf9551354790bf33b]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=179]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[python-twitter%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6twitterbot%e9%96%8b%e7%99%ba]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Mac OSX 10.9- Marvericks使って一週間過ごした感想</title>
		<link>https://blog.killinsun.com/2013/10/quick-review-using-macos-marvericks-a-week/</link>
		<pubDate>Tue, 29 Oct 2013 18:51:08 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">

大まかな所は変わっておりません。
メモリの使用量が増えたとか減ったとか、騒がれていますが
前のOSでのメモリ使用量とか気にしたことなかったのでなんとも言えません。

ただ、デュアルディスプレイにして作業する事が多い身としては、
非常に便利になったかなーと。

WEBブラウザをフルスクリーン化して、別ディスプレイで
ターミナルいじったり…　みたいな事がやりやすくなりました。


Finderにタブ機能追加されてましたが、XtraFinder使ってるので
あまり恩恵がなかったかな…。
今のところ競合はしてません。

Marvericksになって一瞬戸惑ったのは、
[Wi-Fi診断 (ワイヤレス診断) .app]
[ネットワークユーティリティ.app]
[Raidユーティリティ.app]　がApplicationsフォルダの中から消えてる事。
どこにあるのかと思ったら、
/System/Library/CoreServices/Applications/
この中に３つともありました。

<span class="deco" style="font-size: small;">余談ですが、Wi-Fi診断のほうは、Finderバー上部の
ワイヤレスのアイコンをoptionキー押しながらクリックすると、
メニューとして表示されます。</span>
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20131031033839" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20131031033839p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20131031/20131031033839.png" alt="f:id:killinsun:20131031033839p:image" /></a>
<h5>iWork,iLifeシリーズの改悪が目立つ</h5>
&nbsp;

酷いです。

pagesに関しては、<span class="deco" style="color: #ff0000;">見開き表示ができなくなった</span>のが一番の衝撃でした。
操作そのものは簡単に見えるものの、その分機能が削られてる感じ。

AppsStoreのpagesのレビューが阿鼻叫喚でした。
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20131031033838" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20131031033838p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20131031/20131031033838.png" alt="f:id:killinsun:20131031033838p:image" /></a>

その他,KeynoteやiMovie、iPhotoなど、新バージョンになってから
酷い言われよう。
<h5>アップデート前のを使いたい</h5>
ぶっちゃけダウングレードとかできねえだろと思ったら、ありました。

古いバージョンを使いたい！という人のために使いかただけ記しておきます


/Applications/　フォルダ内に、
<span class="deco" style="color: #00ff00;">/Applications/iWork '09
/Applications/iMovie 9.0.9</span>
このような感じで過去のバージョンのフォルダがあり、この中に古いアプリが残ってました。
使ってみても、なんとも無く使える。

新しいものはiOSデバイスとの連携が強化されているけど、
やはり機能が削られていては使ってられないよ！という方はどうぞ。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date><![CDATA[2013-10-30 03:51:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-29 18:51:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[quick-review-using-macos-marvericks-a-week]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
		<category domain="post_tag" nicename="mac"><![CDATA[Mac]]></category>
		<category domain="post_tag" nicename="marverics"><![CDATA[Marverics]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2013-10-30-quick-review-using-macos-marvericks-a-week.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[0623f4dbacf5f6b15fd5729ca16bebc39aa75e5f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=180]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[mac-osx-10-9-marvericks%e4%bd%bf%e3%81%a3%e3%81%a6%e4%b8%80%e9%80%b1%e9%96%93%e9%81%8e%e3%81%94%e3%81%97%e3%81%9f%e6%84%9f%e6%83%b3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Chromeだけホスト名でアクセスできなかった　の話</title>
		<link>https://blog.killinsun.com/2012/10/i-could-not-access-by-hostname-on-only-chrome/</link>
		<pubDate>Wed, 10 Oct 2012 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[<br>

<div class="section">
自宅内でDNSサーバーを動かし、いくつかあるWEBサーバー（zabbixだったりtomcatだったりOracleのapexだったり）にアクセスしに行くとき、なぜかChromeだけホスト名でアクセスしても<br>名前解決してくれない現象に一ヶ月近く悩まされた。<br>（半分くらい保留してたけど）<br>
<h5>問題の切り分け</h5><br>
◯Chrome<br>・「IPアドレス直打ち」で、自宅内のマシンにアクセスはできた<br>・外部のWEBページは問題なく閲覧できる<br>・ホスト名入力しての名前解決ができない<br><br>◯FireFox&IE&Safari<br>・全てにおいて問題なく閲覧できる<br><br>◯その他<br>・dig/nslookupでの名前解決はできる<br>・LAN内において起きる（そもそもLAN内でない限り自宅DNSで名前解決はしない）<br>・Windows,MacOSX,Ubuntu(Chromium)、全てのChromeで起きる。<br>（全てのChromeは設定を同期している）<br><br>Chrome固有の問題で、設定情報を同期しているせいか、全てのマシンからアクセスできませんでした。<br>
<h5>検証１：Chromeに格納されている閲覧データなどのキャッシュを削除する</h5><br>
意外とこれで解決する問題だと思うのですが、今回のケース、これだけでは解決しませんでした。<br>
<h5>検証２：ChromeとGoogleの同期を解除し、設定も何もかも全てクリアな状態で接続する</h5><br>
これについてはさすがに接続が確認できました。<br>つまり、設定か同期の問題。<br>
<h5>検証３：設定だけデフォルトで他のデータを同期させて接続する</h5><br>
ダメでした<br><br>
<h5>じゃあ何が原因なの</h5><br>
DNSのキャッシュだけはどうも「設定」からはクリアできないようで、<br>その設定は　アドレスバーに「chrome://net-internals/#dns」と打ち込む事でクリアできるようです。<br>DNSの古いキャッシュが邪魔していました。<br>ここらへんについては検証１ですでにクリアできていたものと思っていたので、見落としていましたね…。<br><br>DNSルックアップエラーだったり、ChromeってDNS周りが意外と面倒な気がする…。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date><![CDATA[2012-10-11 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-10-10 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-could-not-access-by-hostname-on-only-chrome]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="post_tag" nicename="chrome"><![CDATA[Chrome]]></category>
		<category domain="post_tag" nicename="dns"><![CDATA[DNS]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="post_tag" nicename="%e8%a8%ad%e5%ae%9a"><![CDATA[設定]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[1970-01-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2012-10-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2012-10-11-i-could-not-access-by-hostname-on-only-chrome.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[fd058f9462b7df5b8fe1d0dc217864d7ceee88b9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=181]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[chrome%e3%81%a0%e3%81%91%e3%83%9b%e3%82%b9%e3%83%88%e5%90%8d%e3%81%a7%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9%e3%81%a7%e3%81%8d%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%80%80%e3%81%ae%e8%a9%b1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>NASが死んだ</title>
		<link>https://blog.killinsun.com/2018/04/dead-my-nas/</link>
		<pubDate>Tue, 03 Apr 2018 05:57:57 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://killinsun-wp.japaneast.cloudapp.azure.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>NAS死亡</h1>

ブログが稼働している仮想マシンの永続化ストレージとしていたNASでディスク２重障害が起きました。

ブログは一から作り直しました・・・。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date><![CDATA[2018-04-03 14:57:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-03 05:57:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dead-my-nas]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-04-03-dead-my-nas.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[84975574333992824da337cd005651145b23ad26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>約２週間ほどでAWS SAAを受験した話</title>
		<link>https://blog.killinsun.com/2018/04/i-tried-aws-solution-architect-associate-within-2-weeks/</link>
		<pubDate>Mon, 23 Apr 2018 06:52:40 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://killinsun-wp.japaneast.cloudapp.azure.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[仕事の都合上、所属チームで戦略的にAWSのスキルを高めようという話になり、AWSソリューションアーキテクトアソシエイト（AWS SAA）を受験してきました。

業務でAWSを利用できる環境はあるのですが、役割的にそこまで深く触るかというとそうではないので、「チョットワカル」ではない、真の意味での「ちょっとわかる」程度の知識でした。

&nbsp;

<h2>勉強法</h2>

あまり誇れた話じゃないですが、４月中に合格だけはしておきたいのとざっくばらんに知識の種まきをしたいという考えの下、以下サイトをメインに学習を進めました。

<a href=" https://aws.koiwaclub.com/">AWS WEB問題集で学習しよう</a>

<ul>
    <li>ゴールドプランを契約し、全EXAMを５日ほどかけて一周。
解いている途中の平均正解率は初見でも６〜７割で、「あと一歩！」っていう感じがほとんどでした。
この辺りはほかの業務や資格による広く浅くの知識が役だったと思う。
不正解だった内容はもちろん、正解だった問題も一通り解説は読みました。</li>
    <li>正答率の低いカテゴリ（SQSとか、LoadBalancerとかRDSとかその単位で良い）に関しては実際にAWSアカウントで触ってはみた。</li>
    <li>一周終わった段階で模擬試験を受けた
正答率が６５％で不合格でした。　ただし、ヒヨってもいられないので弱点箇所をAWSの公式やBlackBeltで補強</li>
    <li>ElasticMapReduceとかEC2インスタンスのタイプは捨て問にした</li>
</ul>

問題を解いて全容を把握　ー＞　弱点箇所を補う　　戦法でした。

&nbsp;

<h2>結果</h2>

78%で合格しました。

実際受けて思ったのは、「これ、問いたい趣旨同じじゃね？」って感じの問題が２ペアぐらいあったこと。

その分恵まれていたのかも。

<h2>メモ</h2>

勉強しててなるほどなーと思った箇所。

試験に出てくるとは限らないので注意。

<h3>EC2</h3>

<ul>
    <li>Instance Store Backed  EC2
領域全部S3からコピーするので起動が遅い。停止（電源オフ）ができず、起動、再起動、削除（Terminated)のみ</li>
    <li>EBS backed EC2
bootに必要な領域を読み込んで起動するので起動早い。停止ができる。起動、再起動、停止、削除</li>
    <li>スポットインスタンス
直近最後の一時間以内に価格が上がってAWSによって停止された場合、その分の価格は無料</li>
    <li>リザーブドインスタンス
１年か３年の長期契約。安い。途中変更・解約不可</li>
    <li>Dedicatedインスタンス
ライセンスの持ち込みや第３者のインスタンスを稼働しないことを保証する場合はこれ。</li>
    <li>CloudWatchの基本モニタリングで「メモリ」は確認できない。詳細モニタリングで確認する。</li>
    <li>基本モニタリングは５分間隔、詳細モニタリングは１分間隔
ただし、死活監視に関しては１分間隔での監視が無料枠の範囲内で可能</li>
</ul>

<h3>VPC</h3>

<ul>
    <li>NATインスタンスは「SrcDestCheck」を無効にしてパブリックサブネットに建てる。
ただし今はNATゲートウェイというAWSマネージドのサービスを利用するのが一般的。</li>
    <li>サブネットはリージョン、AZを跨げない。</li>
    <li>ルートテーブルは送信/受信ルールが必要。 上から順に精査され、最後は暗黙のAnyDenyがある</li>
    <li>（EC2の項に書くべきだが）セキュリティーグループは受信のみ記載でOK。
デフォルトセキュリティグループ同士は特に意識せずとも通信可能</li>
</ul>

以上です]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date><![CDATA[2018-04-23 15:52:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-23 06:52:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-tried-aws-solution-architect-associate-within-2-weeks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="saa"><![CDATA[SAA]]></category>
		<category domain="post_tag" nicename="%e3%82%bd%e3%83%aa%e3%83%a5%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%82%a2%e3%83%bc%e3%82%ad%e3%83%86%e3%82%af%e3%83%88%e3%82%a2%e3%82%bd%e3%82%b7%e3%82%a8%e3%82%a4%e3%83%88"><![CDATA[ソリューションアーキテクトアソシエイト]]></category>
		<category domain="post_tag" nicename="%e8%b3%87%e6%a0%bc"><![CDATA[資格]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7da2f5ae8ed0bf6bd6cbf01013ded32c]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="u7cL7y26Ur"><a href="https://aws.koiwaclub.com/">はじめに</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="https://aws.koiwaclub.com/embed/#?secret=u7cL7y26Ur" data-secret="u7cL7y26Ur" width="600" height="338" title="&#8220;はじめに&#8221; &#8212; AWS WEB問題集で学習しよう" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_7da2f5ae8ed0bf6bd6cbf01013ded32c]]></wp:meta_key>
		<wp:meta_value><![CDATA[1524404547]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-04-23-i-tried-aws-solution-architect-associate-within-2-weeks.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[1b6a31a38fbb095715e08f6b5f590af7af692978]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e7%b4%84%ef%bc%92%e9%80%b1%e9%96%93%e3%81%bb%e3%81%a9%e3%81%a7aws-saa%e3%82%92%e5%8f%97%e9%a8%93%e3%81%97%e3%81%9f%e8%a9%b1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Passport.jsのDigest認証で詰んだ話（express 4)</title>
		<link>https://blog.killinsun.com/2018/05/i-stacked-by-digest-auth-with-passportjs-with-express4/</link>
		<pubDate>Fri, 04 May 2018 15:03:15 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://killinsun-wp.japaneast.cloudapp.azure.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[express4でdigest認証を使う為にpassport.jsを使って実装しようとしたらバグに直面した話です。

&nbsp;

リクエストURL (req.url)とpassportの資格情報で提供されたURI（cred.uri)が異なっている場合、

400エラーを返すみたいなのですが、Express4ではリクエストURLと資格情報URIがどうやっても異なる為、正しいリクエストを行っても不一致となるようです。

&nbsp;

本来期待するURL(cred.uriに相当): /api/v1/aaa/bbb/ccc

req.urlの値: /v1/aaa/bbb/ccc

<pre class="toolbar:1 lang:default decode:true" title="passport-http/lib/passport-http/strategies/digest.js">if (req.url !== creds.uri) {　//該当の箇所
    return this.fail(400);
}</pre>

&nbsp;

<h2>対策記事を見つけたのでやってみた（失敗）</h2>

以下の記事では、passportによる処理を行う前にルーティングを追加して、

事前にreq.urlの値を書き換える手法で回避策を行ったようですが、当方の環境では上手く回避できませんでした。

（req.urlの値を直接書き換えてしまうと、不具合が発生する？　ようで、後の処理で 404を返すようになってしまいました）

<a href="https://blog.mattjustice.com/2016/04/23/digest-authentication-with-express-4/">Digest authentication with Express 4</a>

<pre class="lang:default decode:true" title="router.js">//追加した処理
router.all('/*', function(req, res, next{
    req.url = (req.baseUrl ? req.baseUrl : "") + req.url;
    next();
}

//もともとやりたい処理
router.all('/v1/aaa/bbb/ccc', your_passport_function());

</pre>

&nbsp;

なので、上記方法は断念。

&nbsp;

<h2>対策記事を見つけたのでやってみた２</h2>

passport-httpモジュールのgithubページにはすでにpull requestも上がっているようで、

以下のように該当コードを修正するリクエストが投げられていました。

<a href="https://github.com/jaredhanson/passport-http/pull/49/files">Now it works with Express 4+ relative urls #49</a>

が、かなり長い間取り込まれていないようですね。

あまりソースを書き換える事はしたくなかったのですが、以下のように書き換えたところ、正常に動作しました。

試した事１では直接req.urlを書き換えていましたが、こちらでは、if文の中で期待する値を生成しているようですね。なるほど。

<blockquote>
  112行目〜118行目あたり
</blockquote>

<pre class="toolbar:1 lang:default decode:true">   if (!creds.username) {
     return this.fail(this._challenge());
   }
// if (req.url !== creds.uri) {  削除
   if (((req.baseUrl?req.baseUrl:"")+req.url) !== creds.uri) { //追加
     return this.fail(400);
   }</pre>

&nbsp;

express自体も勉強しながら直面したバグだったので、

試した事１で上手く動作させる方法があったらコメントいただけると助かります。

&nbsp;

&nbsp;

/以上

<div id="extensionsWeblioEjBx" style="position: absolute; z-index: 2147483647; left: 22px; top: 1468px;"></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date><![CDATA[2018-05-05 00:03:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-04 15:03:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-stacked-by-digest-auth-with-passportjs-with-express4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-05-05-i-stacked-by-digest-auth-with-passportjs-with-express4.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[a37ca9fc224d0ba6ce0caf085f77a063e4f421a5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=16]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[passport-js%e3%81%aedigest%e8%aa%8d%e8%a8%bc%e3%81%a7%e8%a9%b0%e3%82%93%e3%81%a0%e8%a9%b1%ef%bc%88express-4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>【WEB開発メモ#1】 CentOS7系にnode.jsとExpress 4をインストールする</title>
		<link>https://blog.killinsun.com/2018/05/installing-nodejs-and-express4-with-centos7/</link>
		<pubDate>Mon, 07 May 2018 14:05:17 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://blog.killinsun.com/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[node.jsを使ったWEB開発を行う為に、必要な手順を個人的なメモレベルで書き記していこうと思います。

WEB開発が本業ではないので、その筋の方々からすると遠回りだったり、ベストプラクティスではない内容だったりする場合があります。　あくまでチラシの裏です。

とはいえ、今後、職場で教育する為の資料作りのインプット（か、もしくはこれをそのまま投げつける形）にしたいなと思っています。

&nbsp;

<hr />

<h2>書いていくであろう内容（随時更新）</h2>

<ol>
    <li>CentOS7にnode.jsとExpressをインストールする　←いまここ</li>
    <li>Expressの基礎を学んでみる</li>
    <li>テンプレートエンジンを用いてフロントエンドのHTMLを作成する</li>
    <li>随時追加</li>
</ol>

では、以下より本題

<hr />

<h2>用意する環境</h2>

<ul>
    <li>RHEL 7.x系OS　minimalインストール版</li>
</ul>

今回は検証用なのでCentOSで進める。本番環境で扱う場合はぜひRHELを使用して頂きたいなと思います。

<h2>今回目指す環境</h2>

<ul>
    <li>Node.js をなるべく最新かつシンプルにインストールする。</li>
    <li>Node.jsのパッケージ管理システム「npm」を用いてExpress4をインストールする。
<ul>
    <li>npmコマンドの一般的な使い方を知る</li>
    <li>express-generatorを使ってシンプルかつお手軽に模範環境を用意する</li>
    <li></li>
</ul>
</li>
</ul>

<h2>手順</h2>

<h3>Node.jsのインストール</h3>

<h4>yumでインストールする際は注意</h4>

いきなりNode.jsをインストールします。

2018年5月現在、CentOSのepel-releaseリポジトリで「nodejs」を検索すると、

以下のような情報が返ってきます。

<pre class="lang:sh decode:true">[root@dev]# yum info nodejs
Loaded plugins: fastestmirror, langpacks
Loading miAvailable Packages
Name : nodejs
Arch : x86_64
Epoch : 1
Version : 6.14.0
Release : 1.el7
Size : 4.6 M
Repo : epel/x86_64
Summary : JavaScript runtime
URL : http://nodejs.org/
License : MIT and ASL 2.0 and ISC and BSD
Description : Node.js is a platform built on Chrome's JavaScript runtime
 : for easily building fast, scalable network applications.
 : Node.js uses an event-driven, non-blocking I/O model that
 : makes it lightweight and efficient, perfect for data-intensive
 : real-time applications that run across distributed devices.rror speeds from cached hostfile
</pre>

6.x系は古すぎるので、今回はLTS版の8.11.1`をインストールしたいと思います。

<h4>NodeSourceからインストール</h4>

この手順では、 <a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener noreferrer">NodeSource</a> から、結果的に目的のnode.jsをインストールします。

今回は8.11.1をインストールするので、8系です。

以下コマンドを実行します。

<pre class="lang:default decode:true">[root@dev]# curl -sL https://rpm.nodesource.com/setup_8.x | bash -</pre>

その他のバージョンをインストールする場合は、上記リンクから目的のLinuxディストリビューションに合ったコードを探して実行してください。

その後、yumコマンドによってnodejsパッケージがインストール出来るようなるので、実行します。

<pre class="lang:default decode:true">[root@dev]# yum -y install nodejs</pre>

インストール後、以下のようにバージョンを確認できます。

<pre class="lang:default decode:true ">[root@dev]# node --version
v8.11.1</pre>

また、同時にNode.jsのパッケージ管理ツールである  npm もインストールされています。

<pre class="lang:default decode:true ">[root@dev]# npm --version
5.6.0</pre>

以降は、このnpmコマンドを使ってnode.jsにパッケージを追加していきます。

&nbsp;

<h3>npmコマンドを使ってみる</h3>

まず、npmコマンドを学ぶ為専用のディレクトリを用意しましょう。

今回は /usr/local/share/　に work という作業用ディレクトリを作成しました。

作業用ディレクトリを作成したのには、理由があります。

npmコマンドでは、システム全体にデフォルトで利用出来るようにする為の「グローバルモード」と、特定のディレクトリ配下のプロジェクトで有効な「ローカルモード」という概念があります。

同じパッケージで異なるバージョンがインストールされている場合、ローカル環境にインストールされている方が優先されます
（厳密言うと、.jsファイルでモジュールを読み込む場合、指定したモジュールがどこに配置されているのか自動で探索する仕組みがあるのですが、、、まぁそんなもんだと捉えてください）

<h4>npm init  --&gt; package.jsonの作成</h4>

パッケージをインストールする前に、一つ行う事があります。

今回作成した「 work」ディレクトリに仮のWEB開発プロジェクトに必要なリソース（モジュールだったり、サーバサイドのプログラムだったり、HTMLやCSSだったり）を格納するとしましょう。
npmによってインストールしたパッケージも、この中に格納されますが、githubなどでソースを公開する際、これらの外部から取得したパッケージも一緒にpushするのはよろしくありません。

package.jsonには、プロジェクトに必要な情報と、「必要なパッケージ、モジュール」や「起動時のスクリプト」などを記入する事ができます。

いきなりゼロからpackage.jsonを作成するのは心が折れますし、普段手動で手を加えないものなので、コマンドで作成しましょう。

npm initコマンドを使います。 対話型のコマンドですが、後で手動でも書き換えられるので、Enter押しっぱなしでも問題ありません。

<pre class="lang:default decode:true">[root@dev work]# npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install &lt;pkg&gt;` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (work)
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to /usr/local/share/work/package.json:

{
  "name": "work",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo "Error: no test specified" &amp;&amp; exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this ok? (yes)</pre>

下部にあるJSON形式の文字列（ { "name": "work"から始まる部分）が、package.jsonの内容です。
準備はこれでOKです。

<h4>グローバルモードでインストール</h4>

まずは試しに、グローバルモードでExpress4をインストールしてみます。

<pre class="lang:default decode:true ">[root@dev work]# npm install --save -g express4
+ express4@0.0.1
added 51 packages in 2.425s</pre>

--save というのは、実行したカレントディレクトリ上の package.jsonに「依存関係のあるパッケージ」として記録する事を意味します。（--save-devも同様です）

-g をつけることで、グローバルモードでインストールされます。

デフォルトではグローバルモードのインストール先は　/usr/lib内にあるので、express4がインストールされているのが確認できます。

<pre class="lang:default decode:true ">[root@dev work]# ls /usr/lib/node_modules/
express4  npm</pre>

<blockquote>
  npmのデフォルト設定がどうなっているかを確認するには、<strong>npm config list -l</strong> コマンドで確認できます
</blockquote>

<h4>ローカルモードでインストール</h4>

次に、ローカルモードの挙動を試します。

ちょっと捻くれてexpress3をインストールします。
ただし、今回はpackage.jsonに依存関係のあるパッケージとして記録するとややこしくなってしまうので、避けます。

<pre class="lang:default decode:true">[root@dev work]# npm install express3
npm WARN deprecated connect@2.30.2: connect 2.x series is deprecated
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN work@1.0.0 No description
npm WARN work@1.0.0 No repository field.

+ express3@0.0.0
added 96 packages in 3.448s
</pre>

実行結果を確認します。

まず、上から順に** npm list**コマンドを使って、ローカル環境のインストール済みパッケージを確認しました。

--depth=0 というのは、出力結果がツリー型表示で一番浅い階層（＝０階層目）で出力する事を意味します。

ローカル環境ではexpress3が読み込まれている事がわかります。

-g をつけたグローバル環境では、express4が読み込まれています。（加えて、npmもインストールされていますね）

<pre class="lang:default decode:true">[root@dev work]# npm list  --depth=0
work@1.0.0 /usr/local/share/work
└── express3@0.0.0

[root@dev work]# npm list  --depth=0 -g
/usr/lib
├── express4@0.0.1
└── npm@5.6.0


[root@dev work]# ls node_modules/
accepts              cookie-signature  forwarded          morgan           send
base64-url           core-util-is      fresh              ms               serve-favicon
basic-auth           crc               http-errors        multiparty       serve-index
basic-auth-connect   csrf              iconv-lite         negotiator       serve-static
batch                csurf             inherits           on-finished      statuses
body-parser          debug             ipaddr.js          on-headers       stream-counter
bytes                depd              isarray            parseurl         string_decoder
commander            destroy           media-typer        pause            tsscmp
compressible         ee-first          merge-descriptors  proxy-addr       type-is
compression          errorhandler      method-override    qs               uid-safe
connect              escape-html       methods            random-bytes     unpipe
connect-timeout      etag              mime               range-parser     utils-merge
content-disposition  express           mime-db            raw-body         vary
content-type         express3          mime-types         readable-stream  vhost
cookie               express-session   minimist           response-time
cookie-parser        finalhandler      mkdirp             rndm</pre>

最後の<strong>ls</strong>コマンドでは、ローカル環境でインストールされている細かいモジュール群を表示しています。パッケージのソースコードを直接確認する場合、このようにnode_modulesディレクトリから辿っていく事になります。

&nbsp;

<h4>ローカル環境のexpress3をアンインストール</h4>

グローバルモードとローカルモードの違いと、使い分けが理解できたところで、ややこしいexpress3はアンインストールします。

<pre class="lang:default decode:true ">[root@dev work]# npm uninstall express3
npm WARN work@1.0.0 No description
npm WARN work@1.0.0 No repository field.

removed 96 packages in 1.136s</pre>

uninstallサブコマンドでアンインストールが完了します。(もちろん、-gをつけた場合はグローバルが対象になります）

上述したコマンドを駆使してアンインストールされているか確認してみてください。

また、package.jsonからも記載を削除する場合、uninstallサブコマンドの後に --saveもしくは --save-devを追記する事で削除できます。

npmコマンドの基本的な使い方は以上です、

<h3>express-generatorを使う</h3>

expressを使うにあたって、必要なファイル、ディレクトリの真っさらなテンプレートを自動で生成してくれるのがexpress-generatorです。

これもパッケージなので、覚えたばかりのnpmコマンドを使ってインストールします。
*ローカルインストールではなく、グローバルインストールしてください。パスを通さないとexpressコマンドが使えません。

<pre class="lang:default decode:true">[root@dev work]# npm install -g express-generator
npm WARN work@1.0.0 No description
npm WARN work@1.0.0 No repository field.

+ express-generator@4.16.0
added 10 packages in 0.843s</pre>

&nbsp;

次に、expressで管理する最大単位となる「アプリケーション」を配置するディレクトリを決めます。

今回は<em>/usr/local/share/first-project</em> にしたいと思います。
（まだディレクトリを作成する必要はありません。/usr/local/shareに移動だけしておいてください。）

では、expressコマンドを使ってアプリケーションを作成します。

<pre class="lang:default decode:true">[root@dev share]# express first-project

  warning: the default view engine will not be jade in future releases
  warning: use `--view=jade' or `--help' for additional options


   create : first-project/
   create : first-project/public/
   create : first-project/public/javascripts/
   create : first-project/public/images/
   create : first-project/public/stylesheets/
   create : first-project/public/stylesheets/style.css
   create : first-project/routes/
   create : first-project/routes/index.js
   create : first-project/routes/users.js
   create : first-project/views/
   create : first-project/views/error.jade
   create : first-project/views/index.jade
   create : first-project/views/layout.jade
   create : first-project/app.js
   create : first-project/package.json
   create : first-project/bin/
   create : first-project/bin/www

   change directory:
     $ cd first-project

   install dependencies:
     $ npm install

   run the app:
     $ DEBUG=first-project:* npm start

[root@dev share]# ls
applications  first-project  info  man  work</pre>

&nbsp;

いくつかディレクトリとフォルダが作成されました。

大まかな部分で役割を説明していきます。

<pre class="lang:default decode:true">.
├── app.js　　//メインとなるjavascriptファイル
├── bin `//サーバ起動に必要な実行ファイル
│   └── www　　
├── package.json 
├── public　//CSSやjs、imageファイルなどの静的コンテンツの配置場所
│   ├── images
│   ├── javascripts
│   └── stylesheets
│       └── style.css
├── routes　//ルーティングされるアプリケーションはここに別記載する
│   ├── index.js
│   └── users.js
└── views　//画面描画用のテンプレート　今回は説明割愛
    ├── error.jade
    ├── index.jade
    └── layout.jade</pre>

なお、これらはジェネレーターが自動作成するテンプレートの一つにすぎず、必要に応じてディレクトリを作成してデータベーススキームを格納したり、そのほかのスクリプトファイルを配置したりする場合もあります。

また、express-generatorによって自動的に作成されたpackage.jsonがあるのに気が付いたでしょうか。
この中には、真っさらな状態のexpressを利用するために必要なパッケージが記載されています。
こいつを使って、依存関係のあるパッケージを全て自動でインストールしてみましょう。

<pre class="lang:default decode:true">[root@dev first-project]# npm install
npm WARN deprecated jade@1.11.0: Jade has been renamed to pug, please install the latest version of pug instead of jade
npm WARN deprecated constantinople@3.0.2: Please update to at least constantinople 3.1.1
npm WARN deprecated transformers@2.1.0: Deprecated, use jstransformer
npm notice created a lockfile as package-lock.json. You should commit this file.
added 101 packages in 3.203s</pre>

package.jsonに記載されている内容をそのまま反映させるには、<strong>npm install</strong>とだけ実行します。

これで、必要なパッケージがローカルインストールされました。

<h3>expressを使ってみる</h3>

express-generatorを使ってディレクトリやファイルを自動で配置し、更にnpmコマンドによって必要なパッケージを自動でインストールしたので、すでにサーバを起動する事が出来る状態です。

<strong>npm start</strong>コマンドでサーバを起動してみます。

<pre class="lang:default decode:true ">[root@dev first-project]# npm start

> first-project@0.0.0 start /usr/local/share/first-project
> node ./bin/www</pre>

この状態でプロンプトが返ってこなければnode.jsがサーバで起動しています。
大半はデフォルトで３０００番ポートが開いているので、
http://{fqdn}:3000/
に対してアクセスするとexpressのデフォルト画面が確認できます。

Welcome to Expressという文字列が表示されていれば成功です。

&nbsp;

ひとまず、CentOS7環境にNode.js + Expressの環境を、体系的に学びつつ構築する手順を記載しました。

次回はルーティングについて知識を整理してみようかなと思います。

&nbsp;

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date><![CDATA[2018-05-07 23:05:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-07 14:05:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[installing-nodejs-and-express4-with-centos7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="centos"><![CDATA[CentOS]]></category>
		<category domain="post_tag" nicename="express"><![CDATA[express]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="%e5%88%9d%e5%bf%83%e8%80%85%e5%90%91%e3%81%91"><![CDATA[初心者向け]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6d170d75e0591c3beba839a916ea5a47]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ea2d2b6f165038f9d352a797f3518d22]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-05-07-installing-nodejs-and-express4-with-centos7.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[2d46a60f20b1da572cb44a249458deef35313d7d]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=34]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90web%e9%96%8b%e7%99%ba%e3%83%a1%e3%83%a21%e3%80%91-centos7%e7%b3%bb%e3%81%abnode-js%e3%81%a8express-4%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>ESXi6.5  PXE boot and Kickstart install on UEFI boot.</title>
		<link>https://blog.killinsun.com/2018/05/esxi6-5-pxe-boot-and-kickstart-install-on-uefi-boot/</link>
		<pubDate>Mon, 14 May 2018 12:37:20 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://blog.killinsun.com/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[ESXi6.5を大量構築する必要があったので、<del>手を抜く為・・・</del>いや工数を削減する為に用意した環境のメモです。
（実際の現場では以下の様な手順とチェックシートを書き記して投げつけただけで作業は後輩にやらせた）

<!--more-->

<hr />

<h2>目指す環境</h2>

<ul>
    <li>ESXi6.5をUEFIブート環境のマシンにインストールする。</li>
    <li>いくつかあるNICのうち、１つをインストール用に使う。割り当てられたMACアドレスとクライアントを紐づけて、管理IPアドレスを採番する</li>
</ul>

<h2>前提条件</h2>

<h3>PXEサーバ</h3>

自動インストールを行うためには以下機能を持つサーバ(PXEサーバ)が必要。

<h4>OS情報</h4>

<table>
<thead>
<tr>
  <th align="left">OS</th>
  <th>CPU</th>
  <th align="right">RAM</th>
  <th align="center">Disk</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">Red Hat Enterprise Linux 7</td>
  <td>1コア</td>
  <td align="right">2GB</td>
  <td align="center">40GB</td>
</tr>
</tbody>
</table>

<h4>インストールする機能</h4>

<ul>
<li>DHCPサーバ(dhcpd)</li>
<li>TFTPサーバ(tftpd(xinetd))</li>
<li>WEBサーバ(httpd)</li>
</ul>

<h3>その他必要なもの</h3>

<ul>
<li>ESXi6.5のISOイメージ（カスタムバンドル版を利用する場合はそちらを用意する）</li>
</ul>

<h4>クライアント(ESXiのインストール対象）</h4>

確認事項は以下の通り
- PXEBootが有効になっていること
- 管理セグメントに接続するポートのMACアドレスを確認すること（ESXiのインストール時、物理マシンとホスト名を紐づける際に必要）

<h4>ネットワーク</h4>

PXEサーバとインストールするサーバに対して接続可能なネットワークが必要

<h2>処理フロー</h2>

<img src="http://blog.killinsun.com/wp-content/uploads/2018/05/pxeboot_image.png" alt="enter image description here" />
1. サーバの電源をONにすると、PXEbootによってDHCPクライアントが起動する
2. DHCPサーバからIPアドレスとmboot.efiファイルが送信される。（mboot.efiファイルのパスはxinetd/tftp内に記載されたchrootディレクトリに従う。)
3. PXEサーバは、PXEクライアントのMACアドレスに対応するboot.cfgファイルをmbboot.cfgファイルが格納されたディレクトリから探す。(/var/lib/tftpboot/images/ESXiv6.5/01-{MACアドレス}/boot.cfgというフォルダを探し、なければ /var/lib/tftpboot/images/ESXiv6.5/boot.cfgを探す)
4. boot.cfgファイルに記載されたクライアント固有のURLより、キックスタートファイルを読み込む
5. キックスタートファイルに従ってESXiインストーラは自動でインストール及び設定を行い、完了する

<h2>PXEサーバ構成</h2>

<ul>
<li>WEBサーバ設定ファイル
/etc/httpd/conf/httpd.conf
> 基本はデフォルトのまま編集しない</li>
<li>TFTPサーバ設定ファイル
/etc/tftp/tftpd.config</li>
<li>DHCPサーバ設定ファイル
/etc/dhcp/dhcpd.conf</p></li>
<li><p>PXEインストール用関連ディレクトリ
/var/lib/tftpboot/</p></li>
<li>ESXi6.5のイメージ
/var/lib/tftpboot/images/ESXiv6.5/</li>
<li>PXE設定ファイル格納先
/var/lib/tftpboot/pxeboot.cfg/<strong>01-</strong>{<strong>クライアントのMACアドレス</strong>}
※クライアント毎に設定ファイルを作成する</li>
<li>bootファイル格納先
/var/lib/tftpboot/images/ESXiv6.5/<strong>01-</strong>{<strong>クライアントのMACアドレス</strong>}/boot.cfg</li>
<li>キックスタートファイル格納先ディレクトリ
/var/www/html/<strong>01-</strong>{<strong>クライアントのMACアドレス</strong>}.cfg
> httpdのデフォルトドキュメントルート内に格納する</li>
</ul>

<h2>PXEサーバ構築手順</h2>

<h3>パッケージのインストール</h3>

<pre><code class="language-bash">yum -y install httpd syslinux tftp-server tftp dhcp
</code></pre>

<h3>TFTPサーバの設定</h3>

<ol>
<li>設定ファイルを編集する。</li>
</ol>

<p>disable = yes　から
disable = no に変更する
server_args　の値は重要なので確認しておくこと。

<pre class="lang:sh decode:true"> vi /etc/xinetd.d/tftp
# default: off
# description: The tftp server serves files using the trivial file transfer 
#       protocol.  The tftp protocol is often used to boot diskless 
#       workstations, download configuration files to network-aware printers, 
#       and to start the installation process for some operating systems.
service tftp
{
      socket_type             = dgram
      protocol                = udp
      wait                    = yes
      user                    = root
      server                  = /usr/sbin/in.tftpd
      server_args             = -v -s /var/lib/tftpboot
      disable                 = no
      per_source              = 11
      cps                     = 100 2
      flags                   = IPv4
}</pre>

<ol>
<li>tftpサーバをxinetd経由で起動させる。（再起動してリロード）</li>
</ol>

<pre><code class="language-bash">systemctl restart xinetd
</code></pre>

<h3>WEBサーバの設定</h3>

<ol>
<li>ホスト名を変更する</li>
</ol>

<pre><code class="language-bash">hostnamectl set-hostname {hostname}
</code></pre>

<ol>
<li>設定ファイルを編集する</li>
</ol>

<pre class="lang:sh decode:true"> vi /etc/httpd/conf/httpd.conf

ServerName {hostname}

#AddDefaultCharset UTF-8 ←コメントアウト</pre>

<ol>
<li>サービスを再起動する</li>
</ol>

<pre><code class="language-bash">systemctl restart httpd
</code></pre>

###DHCPサーバの設定
<strong>※予め払い出すIPアドレスのレンジを確認しておくこと。</strong>

<ol>
<li>設定ファイルの編集</li>
</ol>

- option domain-name
- subnetディレクティブ
- rangeディレクティブ内のIPアドレスレンジ
- routers デフォルトゲートウェイがある場合は記入

<pre class="lang:sh decode:true"> vi /etc/dhcp/dhcpd.conf
#
# DHCP Server Configuration file.
#   see /usr/share/doc/dhcp*/dhcpd.conf.example
#   see dhcpd.conf(5) man page
#
option domain-name "nuage2dev.local";
default-lease-time 600;
max-lease-time 7200;
authoritative;
log-facility local7;
subnet 192.168.0.0 netmask 255.255.255.0 {
    range dynamic-bootp 192.168.0.100 192.168.0.128;
    option broadcast-address 192.168.0.255;
    option routers 192.168.0.1;
    option subnet-mask 255.255.255.0;
    filename    "images/ESXiv6.5/mboot.efi";  #後の手順で作成&amp;配置
}</pre>

&nbsp;

<h3>ESXiサーバイメージコピー</h3>

ESXiのisoメディアをOSにマウント

<pre><code class="language-bash">sudo mount -o ro -t iso9660 /dev/cdrom /mnt
</code></pre>

メディアイメージの配置場所を作成

<pre><code class="language-bash">mkdir -p /var/lib/tftpboot/images/ESXiv6.5
</code></pre>

メディアをコピー

<pre><code class="language-bash">cp -R /mnt/* /var/lib/tftpboot/images/ESXiv6.5
</code></pre>

メディアをアンマウント

<pre><code class="language-bash">umount /dev/cdrom
</code></pre>

<h3>ESXiサーバ イメージ設定</h3>

bootx64.efiファイルをESXiメディアイメージのルートディレクトリにコピー
※mboot.efiに名前を変更

<pre><code class="language-bash">cp /var/lib/tftpboot/images/ESXiv6.5/efi/boot/bootx64.efi /var/lib/tftpboot/images/ESXi6.5/mboot.efi
</code></pre>

<h3>サーバ固有の設定
#### boot.cfgファイル配置用ディレクトリ作成</h3>

インストール対象ESXiサーバのMACアドレスを確認しておく。
MACアドレスに対応するディレクトリを作成する。
例えば、MACアドレスが aa:bb:cc:00:11:22だった場合、<strong>01</strong>-aa-bb-cc-00-11-22　と、頭に <strong>01-</strong> を付加。

<pre><code class="language-bash">mkdir images/ESXiv6.5/01-aa-bb-cc-00-11-22
</code></pre>

<h4>boot.cfgファイルの作成</h4>

作成したディレクトリ配下にboot.cfgファイルをコピー。

<pre><code class="language-bash">cp images/ESXiv6.5/efi/boot/boot.cfg images/ESXiv6.5/01-aa-bb-cc-00-11-22/boot.cfg
</code></pre>

boot.cfgファイルは以下の様に編集。

<pre class="lang:sh decode:true">vi images/ESXiv6.5/01-aa-bb-cc-00-11-22/boot.cfg
bootstate=0
title=Loading ESXi installer(for 01-00-50-56-a5-2e-e5) #タイトルにどのファイルから起動しているか記載してみた
timeout=5
kernel=tboot.b00
#kernelopt=runweasel コメントアsウト
kernelopt=ks=http://10.247.6.17/01-aa-bb-cc-00-11-22.cfg #キックスタートファイルの場所(今回は自分がhttpサーバなので自ホストのIPアドレスを記載 
modules=b.b00 --- #***省略***
build=
updated=0</pre>

<h4>キックスタートファイルの作成</h4>

httpサーバの公開ディレクトリ内にキックスタートファイルを指定したので、ファイルを作成する。

<pre class="lang:default decode:true">vi /var/www/html/.cfg
vmaccepteula  # EULAの承諾
install --firstdisk --overwritevmfs #インストールディスクの指定(最初に見つかったディスク)
rootpw password #rootパスワードの指定
keyboard Japanese #キーボードマップの設定

network --bootproto=static --ip=192.168.0.10 --gateway=192.168.0.1 --nameserver=8.8.8.8 --netmask=255.255.255.0 --hostname=testserver --addvmportgroup=1 --vlanid=0 #ネットワーク設定。値は適宜変更してください

reboot

%firstboot --interpreter=busybox

vim-cmd hostsvc/enable_ssh #ssh有効
vim-cmd hostsvc/start_ssh #sshdサーバの開始
vim-cmd hostsvc/enable_esx_shell　#ESXiシェルの有効化
vim-cmd hostsvc/start_esx_shell #ESXiシェルの開始
esxcli system module parameters set -m tcpip4 -p ipv6=0 

reboot


</pre>

上記で構築は完了です。
ノードを起動して、PXEboot &amp; kickstartが完了する事を確認してください。

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2018-05-14 21:37:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-14 12:37:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[esxi6-5-pxe-boot-and-kickstart-install-on-uefi-boot]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="esxi"><![CDATA[ESXi]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="pxeboot"><![CDATA[PXEBoot]]></category>
		<category domain="category" nicename="vmware"><![CDATA[VMware]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-05-14-esxi6-5-pxe-boot-and-kickstart-install-on-uefi-boot.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[1fb2ece21fbe451fdd677c1c8c773375c248ca25]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=54]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Passport.js digest-strategy で パスワードを安全に管理する</title>
		<link>https://blog.killinsun.com/2018/05/manage-password-safely-by-passportjs-with-digest-strategypassport-js-digest-strategy/</link>
		<pubDate>Thu, 17 May 2018 15:00:34 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://blog.killinsun.com/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[泣きながらDigest認証を行うnode.jsサーバを構築していて詰まったところがあったのでメモ。

passport.jsのdigest認証は、request時に受け付けたユーザIDを引数にして関数を組み、
DBなりと照合して最後のコールバックでパスワードをDigest Strategyコンストラクターに返す必要があるんだけれども、
コールバックで受け付けるパスワードがみた感じ平文でしか受け付けない。

<pre class="lang:js decode:true">passport.use(new DigestStrategy({ qop: 'auth' },
  function(username, done) {
    User.findOne({ username: username }, function (err, user) {
      if (err) { return done(err); }
      if (!user) { return done(null, false); }
      return done(null, user, user.password);   //Wow, we must use plaintext...
    });
  },
  function(params, done) {
    // validate nonces as necessary
    done(null, true)
  }
));</pre>

は？これくそすぎないっすか・・・

&nbsp;

ソースコード書き換えるしかないかと思って元のコード読んでたら、こんな事が書いてあった。

<pre class="start-line:131 lang:js decode:true" title="lib/passport-http/strategies/digest.js">  this._secret(creds.username, function(err, user, password) {
    if (err) { return self.error(err); }
    if (!user) { return self.fail(self._challenge()); }
    
    var ha1;
    if (!creds.algorithm || creds.algorithm === 'MD5') {
      if (typeof password === 'object' &amp;&amp; password.ha1) {
        ha1 = password.ha1;
      } else  {
        ha1 = md5(creds.username + ":" + creds.realm + ":" + password);
      }
    }else{</pre>

１３７行目の部分、コールバックで返す際に ha1 というデータを持つObjectを返すと、
すでに{ユーザ名}:{realm}:{パスワード} をMD5ハッシュ化したものとして扱ってくれるみたいだ。
逆に単純なString形式の値を渡された場合、そのStringを使ってha1を作り出している。

(Digest認証で生成するハッシュのうちの一つですね）

料理できていればそのまま出すし、材料だけ渡されたら足りない部分を使って料理する感じ。
exampleにも書いておいて欲しかった・・・

&nbsp;

ということで、
あらかじめデータベースには　 上記のようなMD5ハッシュ値を保管しておき、Digest認証時に

<pre><code>let md5HashedString = "a867af741df2e7004b62c10f38063db8";  //hash of "hoge:Users:hoge";
foo.ha1 = md5HashedString;
return done(null, userId, foo.ha1); //callback to digestStrategy constructor.
</code></pre>

で返してあげれば良さそうだ。

/以上

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date><![CDATA[2018-05-18 00:00:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-17 15:00:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[manage-password-safely-by-passportjs-with-digest-strategypassport-js-digest-strategy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="digest%e8%aa%8d%e8%a8%bc"><![CDATA[Digest認証]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="post_tag" nicename="passport-js"><![CDATA[Passport.js]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-05-18-manage-password-safely-by-passportjs-with-digest-strategypassport-js-digest-strategy.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[4a1475b7222db28716385b9c9c0d65df3ebc698a]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=70]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[passport-js-digest-strategy-%e3%81%a7-%e3%83%91%e3%82%b9%e3%83%af%e3%83%bc%e3%83%89%e3%82%92%e5%ae%89%e5%85%a8%e3%81%ab%e7%ae%a1%e7%90%86%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>MariaDB down due to nginx and php-fpm.</title>
		<link>https://blog.killinsun.com/2018/07/mariadb-down-due-to-nginx-and-php-fpm/</link>
		<pubDate>Mon, 23 Jul 2018 14:44:06 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://blog.killinsun.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[業務多忙でしばらくブログ更新どころかアクセスすらしていない状況で、いつの間にか当ブログのバックエンドで動いているMariaDBが死んでいた。

/var/log/mariadb/mariadb.log　を確認してみると、どうやら InnoDBが十分なメモリを確保できずに起動失敗していたらしい。

<pre class="lang:default decode:true" title="mariadb.log">257 180708 08:49:06 mysqld_safe mysqld from pid file /var/run/mariadb/mariadb.pid ended&lt;
258 180723 13:29:56 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql&lt;
259 180723 13:30:00 [Note] /usr/libexec/mysqld (mysqld *.*.**-MariaDB) starting as process 129946 ...&lt;
260 180723 13:30:00 InnoDB: The InnoDB memory heap is disabled&lt;
261 180723 13:30:00 InnoDB: Mutexes and rw_locks use GCC atomic builtins&lt;
262 180723 13:30:00 InnoDB: Compressed tables use zlib 1.2.7&lt;
263 180723 13:30:00 InnoDB: Using Linux native AIO&lt;
264 180723 13:30:00 InnoDB: Initializing buffer pool, size = 128.0M&lt;
265 InnoDB: mmap(137756672 bytes) failed; errno 12&lt;
266 180723 13:30:00 InnoDB: Completed initialization of buffer pool&lt;
267 180723 13:30:00 InnoDB: Fatal error: cannot allocate memory for the buffer pool&lt;
268 180723 13:30:00 [ERROR] Plugin 'InnoDB' init function returned error.&lt;
269 180723 13:30:00 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed.&lt;
270 180723 13:30:00 [ERROR] mysqld: Out of memory (Needed 128917504 bytes)&lt;
271 180723 13:30:00 [Note] Plugin 'FEEDBACK' is disabled.&lt;
272 180723 13:30:00 [ERROR] Unknown/unsupported storage engine: InnoDB&lt;
273 180723 13:30:00 [ERROR] Aborting&lt;</pre>

&nbsp;

当環境はAzureのやっすいサーバを使って動いているものの、メモリは２GB積んである。

WEBフロントエンドにApacheを使っていた頃はこのような事が無かったと記憶しているが、一体どうしたものか。

ちなみに現在はnginxで動いている。

ひとまず、AzureやAWSで稼働するマシンによってはスワップファイルが自動で作成されない事を踏まえ、実装メモリと同じサイズのスワップファイルを作成する事にした。

<h3>暫定対応</h3>

スワップファイル作成

<pre class="lang:sh decode:true">dd if=/dev/zero of=/swap bs=1M count=2048
mkswap /swap
swapon /swap</pre>

&nbsp;

&nbsp;

<h3>恒久対応にするために</h3>

が、スワップファイルを使用する事前提で稼働させるのは根本的解決にはならないので、nginxや裏で動いているPHPで節約できそうなものがないか調べる。

<pre class="lang:default decode:true">[root@mysrv ~]# ps aux | grep nginx
root        623  0.0  0.0 112660   968 pts/0    R+   14:17   0:00 grep --color=auto nginx
nginx      3924  0.0  2.5 393148 50220 ?        S    May28   5:21 php-fpm: pool www
nginx      3930  0.0  1.9 383704 38868 ?        S    May28   5:20 php-fpm: pool www
nginx      3931  0.0  2.0 383652 40040 ?        S    May28   5:19 php-fpm: pool www
nginx     25504  0.0  1.8 377796 37156 ?        S    Jul01   0:11 php-fpm: pool www
nginx     25505  0.0  0.8 378220 17560 ?        S    Jul01   0:12 php-fpm: pool www
nginx     25506  0.0  1.6 361488 31504 ?        S    Jul01   0:09 php-fpm: pool www
nginx     25510  0.0  1.8 379408 37092 ?        S    Jul01   0:12 php-fpm: pool www
nginx     25511  0.0  1.9 378836 37840 ?        S    Jul01   0:12 php-fpm: pool www
nginx     25512  0.0  1.8 379160 35988 ?        S    Jul01   0:13 php-fpm: pool www
nginx     25513  0.0  1.9 378364 38132 ?        S    Jul01   0:12 php-fpm: pool www
nginx     25518  0.0  2.2 383720 43708 ?        S    Jul01   0:15 php-fpm: pool www
nginx     25519  0.0  1.0 378516 20608 ?        S    Jul01   0:13 php-fpm: pool www
nginx     25520  0.0  2.0 381676 40624 ?        S    Jul01   0:12 php-fpm: pool www
nginx     25521  0.0  1.9 378072 38752 ?        S    Jul01   0:12 php-fpm: pool www
nginx     25522  0.0  2.2 385312 44432 ?        S    Jul01   0:11 php-fpm: pool www
nginx     25529  0.0  2.0 380716 40000 ?        S    Jul01   0:11 php-fpm: pool www
nginx     25530  0.0  2.3 386728 46148 ?        S    Jul01   0:10 php-fpm: pool www</pre>

やはりnginxがめちゃくちゃ起動していて、php-fpmというものに消費している様に見える。

Apacheのプロセス数制御の様にうまく設定する方法はないかと調べたところ、以下設定ファイルの項目が該当する事がわかった。

<h4>設定ファイル</h4>

/etc/php-fpm.d/www.conf　を編集する。

#で書いてあるところはデフォルトから編集したところ。基本的にアクセスが多いサイトではないので、まずは落ちない事を意識して最大プロセス数と常時待機するプロセスを少なめに絞った。

<ul>
    <li>pm = dynamic</li>
    <li>pm.max_children = 40  # 50 -&gt; 40</li>
    <li>pm.start_servers = 10</li>
    <li>pm.min_spare_servers = 10</li>
    <li>pm.max_spare_servers = 12 # 35 -&gt; 12</li>
    <li>pm.max_requests = 500　#コメント外す</li>
</ul>

<h4>再起動前</h4>

んで、サービスを再起動させる前のメモリ状況

<pre class="lang:default decode:true ">[root@my-srv~]# free -h
              total        used        free      shared  buff/cache   available
Mem:           1.9G        1.6G        112M         69M        181M         32M
Swap:          2.0G        198M        1.8G</pre>

&nbsp;

<pre class="lang:default decode:true">[root@my-srv]# systemctl status php-fpm
● php-fpm.service - The PHP FastCGI Process Manager
   Loaded: loaded (/usr/lib/systemd/system/php-fpm.service; disabled; vendor preset: disabled)
   Active: active (running) since Tue 2018-04-03 06:12:11 UTC; 3 months 20 days ago
 Main PID: 79089 (php-fpm)
   Status: "Processes active: 0, idle: 32, Requests: 30362, slow: 0, Traffic: 0req/sec"
   CGroup: /system.slice/php-fpm.service
           ├─  3924 php-fpm: pool www
           ├─  3930 php-fpm: pool www
           ├─  3931 php-fpm: pool www
           ├─ 25504 php-fpm: pool www
           ├─ 25505 php-fpm: pool www
           ├─ 25506 php-fpm: pool www
           ├─ 25510 php-fpm: pool www
           ├─ 25511 php-fpm: pool www
           ├─ 25512 php-fpm: pool www
           ├─ 25513 php-fpm: pool www
           ├─ 25518 php-fpm: pool www
           ├─ 25519 php-fpm: pool www
           ├─ 25520 php-fpm: pool www
           ├─ 25521 php-fpm: pool www
           ├─ 25522 php-fpm: pool www
           ├─ 25529 php-fpm: pool www
           ├─ 25530 php-fpm: pool www
           ├─ 25531 php-fpm: pool www
           ├─ 25532 php-fpm: pool www
           ├─ 25533 php-fpm: pool www
           ├─ 44261 php-fpm: pool www
           ├─ 44263 php-fpm: pool www
           ├─ 44264 php-fpm: pool www
           ├─ 72957 php-fpm: pool www
           ├─ 79089 php-fpm: master process (/etc/php-fpm.conf)
           ├─ 79091 php-fpm: pool www
           ├─ 79092 php-fpm: pool www
           ├─ 79093 php-fpm: pool www
           ├─ 79094 php-fpm: pool www
           ├─ 79095 php-fpm: pool www
           ├─ 79117 php-fpm: pool www
           ├─ 79218 php-fpm: pool www
           └─109178 php-fpm: pool www</pre>

&nbsp;

<h4>再起動後</h4>

<pre class="lang:default decode:true ">[root@my-srv ~]# free -h
              total        used        free      shared  buff/cache   available
Mem:           1.9G        680M        803M         61M        434M        893M
Swap:          2.0G        116M        1.9G</pre>

&nbsp;

<pre class="lang:default decode:true">[root@my-srv~]# systemctl status php-fpm
● php-fpm.service - The PHP FastCGI Process Manager
   Loaded: loaded (/usr/lib/systemd/system/php-fpm.service; disabled; vendor preset: disabled)
   Active: active (running) since Mon 2018-07-23 14:21:38 UTC; 7s ago
 Main PID: 765 (php-fpm)
   Status: "Ready to handle connections"
   CGroup: /system.slice/php-fpm.service
           ├─765 php-fpm: master process (/etc/php-fpm.conf)
           ├─767 php-fpm: pool www
           ├─768 php-fpm: pool www
           ├─769 php-fpm: pool www
           ├─770 php-fpm: pool www
           ├─771 php-fpm: pool www
           ├─772 php-fpm: pool www
           ├─773 php-fpm: pool www
           ├─774 php-fpm: pool www
           ├─775 php-fpm: pool www
           └─776 php-fpm: pool www</pre>

&nbsp;

んんんー、ほどほどに余裕があって良い感じ。

とはいえ、今回見たく放置してる間に死んでて気がつかない・・・なんて事がないようにプロセスの死活監視ぐらいはしておいたほうが良いのかもしれないな・・・。

&nbsp;

/以上

&nbsp;

&nbsp;

<blockquote>引用・参考

<a href="https://qiita.com/inakadegaebal/items/d59fa99d2ee66a4ffe98" target="_blank" rel="noopener">Cento7にphp-fpmをインストールし、nginxと連携する</a>

<a href="https://blog.adachin.me/archives/2317" target="_blank" rel="noopener">[wordpress][php-fpm][dynamic][static][nginx]なんか重いのでチューニングしてみた</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date><![CDATA[2018-07-23 23:44:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-23 14:44:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mariadb-down-due-to-nginx-and-php-fpm]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="azure"><![CDATA[Azure]]></category>
		<category domain="category" nicename="centos"><![CDATA[CentOS]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="mariadb"><![CDATA[MariaDB]]></category>
		<category domain="post_tag" nicename="mariadb"><![CDATA[MariaDB]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-07-23-mariadb-down-due-to-nginx-and-php-fpm.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[87d7e680e7fb94d9ebc239cf12d9a8196d4cad52]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=88]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Master Server cert revoked on NetBackup 8.1</title>
		<link>https://blog.killinsun.com/2018/07/master-server-cert-revoked-on-netbackup-8-1/</link>
		<pubDate>Thu, 26 Jul 2018 00:53:01 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://blog.killinsun.com/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[I had a mistake with revoked for master server's cert on NetBackup 8.1 .

In below, my solution.

<h2>Issue</h2>

<a class="ab-item" href="http://blog.killinsun.com/wp-admin/post-new.php">投稿</a><img class="alignnone wp-image-99 size-full" src="http://blog.killinsun.com/wp-content/uploads/2018/07/01-1.png" alt="" width="1787" height="412" />

<pre class="toolbar:2 lang:sh decode:true">/usr/openv/netbackup/bin/nbcertcmd -hostSelfCheck
 Certificate is revoked.</pre>

<ul>
    <li>And you can not logon after you logout and disconnect session from Administration Console,</li>
</ul>

<h2>Solution</h2>

<ol>
    <li>Create Reissue token
<pre class="toolbar:2 lang:sh decode:true">/usr/openv/netbackup/bin/bpnbat -login -logintype WEB
/usr/openv/netbackup/bin/nbcertcmd -createToken -name {token_name} -reissue -host {hostname of masterserver}
#Copy it generate token.</pre>
</li>
    <li>Reconfigure certificate
<pre class="toolbar:2 lang:sh decode:true">/usr/openv/netbackup/bin/nbcertcmd -getCertificate -server {hostname of masterserver} -force -token</pre>
</li>
    <li>Verify
<pre class="toolbar:2 lang:sh decode:true "> /usr/openv/netbackup/bin/nbcertcmd -hostSelfCheck</pre>
Check message "is not revoked" is ok</li>
</ol>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2018-07-26 09:53:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-26 00:53:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[master-server-cert-revoked-on-netbackup-8-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="certification"><![CDATA[Certification]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="netbackup"><![CDATA[NetBackup]]></category>
		<category domain="post_tag" nicename="netbackup"><![CDATA[NetBackup]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-07-26-master-server-cert-revoked-on-netbackup-8-1.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[ebcb619678320c934feff1bcd8db32ae7cec8966]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=94]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Reconfigure media server(or client) certification setting.</title>
		<link>https://blog.killinsun.com/2018/07/reconfigure-media-serveror-client-certification-setting/</link>
		<pubDate>Thu, 26 Jul 2018 02:01:02 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">http://blog.killinsun.com/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[I faced problem that is "The vnetd proxy encountered an error".

My situations are these.

<ul>
    <li>Re-deployed new master server instead of old one.</li>
    <li>I added existing media server with "nbemmcmd " command at new master server.</li>
    <li>Can resolve hostname, and connect ping.</li>
</ul>

<h2>Cause</h2>

Existing media server require re-config new Master server's CACert and Cert.

<h2>Solution</h2>

<ol>
    <li>Check CA Cert file between master server and media server.
run at media server, and masterserver.
<pre class="toolbar:2 lang:sh decode:true "> /usr/openv/netbackup/bin/nbcertcmd  -listCACertDetails
       Subject Name : /CN=nbatd/OU=root@myserver.local/O=vx
        Start Date : Jul 23 06:29:14 2018 GMT
       Expiry Date : Jul 18 07:44:14 2038 GMT
  SHA1 Fingerprint : ** Check incorrect between master and media. **</pre>
&nbsp;</li>
    <li>**If incorrect**, delete old CA Cert file on media server.
run at media server.
<pre class="toolbar:2 lang:sh decode:true">/usr/openv/netbackup/bin/nbcertcmd  -removeCACertificate -fingerPrint {old SHA1 fingerprint on media server}</pre>
&nbsp;</li>
    <li>Re configure CACertfile
run at media server
<pre class="toolbar:2 lang:sh decode:true">/usr/openv/netbackup/bin/nbcertcmd  -getCACertificate</pre>
&nbsp;</li>
    <li>Next, check your media server's cert file. If it's too old, you should reconfig cert file
run at media server
<pre class="toolbar:2 lang:sh decode:true ">/usr/openv/netbackup/bin/nbcertcmd -listCertDetails</pre>
&nbsp;</li>
    <li>Delete all old cert file. (CAUTION: If you need specifc cert file, you delete individual old cert file with other command.)
run at media server
<pre class="toolbar:2 lang:sh decode:true ">/usr/openv/netbackup/bin/nbcertcmd  -deleteAllCertificates</pre>
&nbsp;</li>
    <li>the following next command, you can reconfig new cert file.
run at media server
<pre class="toolbar:2 lang:sh decode:true">/usr/openv/netbackup/bin/nbcertcmd -getCertificate</pre>
but, an error message print, you need re-issue token.
If print above error message, generate reissue token at master server.
<pre class="toolbar:2 lang:sh decode:true ">/usr/openv/netbackup/bin/nbcertcmd -createToken -name {your_token_name} -
reissue -host {mediaserver_hostname}</pre>
After generate reissue token, rerun and add option this command at media server.
<pre class="toolbar:2 lang:sh decode:true ">/usr/openv/netbackup/bin/nbcertcmd -getCertificate -token</pre>
Copy and paste generated token.

<span style="font-size: 1rem;">Finally, you can connect master server to media server.</span></li>
</ol>

For more details, check official support page.

<a href="https://www.veritas.com/support/en_US/article.000127129" target="_blank" rel="noopener noreferrer">How to manually obtain a host ID Certificate.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date><![CDATA[2018-07-26 11:01:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-26 02:01:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[reconfigure-media-serveror-client-certification-setting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="certification"><![CDATA[Certification]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="netbackup"><![CDATA[NetBackup]]></category>
		<category domain="post_tag" nicename="netbackup"><![CDATA[NetBackup]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-07-26-reconfigure-media-serveror-client-certification-setting.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[040bd4ab6fb4c0d6956f0b22d395d8f084a834c6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=103]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>「インフラエンジニアのスキルチェックリスト」をやってみた</title>
		<link>https://blog.killinsun.com/2018/08/i-tried-checklist-inflaengineer_s_skill_checklist/</link>
		<pubDate>Mon, 27 Aug 2018 04:28:12 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[◎：できる。よくやる

〇：やったことある

△：やったことない。

×：苦手。無理。パスしたい

<h3>DB設計</h3>

それでもSIerとして求められているのはOracleの率が高いんだよなあ

<ul>
    <li>△要件からDB定義を作成できる</li>
    <li>〇ER図を作成できる</li>
    <li>〇第３正規化まで正規化できる</li>
    <li>△パフォーマンスを意識したインデックス設定ができる</li>
</ul>

<h3>パッケージ管理</h3>

緊急で必要なったときぐらいだからほぼわからん。
ていうかこんなのやる必要あるの？ってものが大半。

<ul>
    <li>△RPMビルド環境がつくれる</li>
    <li>△specファイルが書ける</li>
    <li>〇独自YUMレポジトリを構築できる
⇒ミラーリポジトリ、カスタマイズリポジトリなら。</li>
    <li>△debパッケージも作成できる</li>
</ul>

<h3>Webサーバー構築</h3>

HTTP/2はまだ弱い

<ul>
    <li>◎Apache・NginxでWebサーバーを構築できる</li>
    <li>◎リバースプロキシを設定できる</li>
    <li>◎エラーログが読める</li>
    <li>◎バーチャルホストが設定できる</li>
    <li>〇Rewriteのルールが記述できる</li>
    <li>◎HTTPSのWebサーバーを立てられる</li>
    <li>△HTTP/2化できる</li>
    <li>△負荷分散計画が立てられる</li>
</ul>

<h3>DBサーバー構築</h3>

<ul>
    <li>◎MySQL / PostgreSQLでDBサーバーを構築できる</li>
    <li>×DBサーバーのパフォーマンスチューニングができる</li>
    <li>×ボトルネックとなっているクエリを特定し改善案が立てられる</li>
    <li>◎DBレプリケーションが構築できる
⇒MongoDBなら</li>
    <li>△DB MasterのHA化ができる</li>
    <li>△DBの水平分割・垂直分割を組める</li>
    <li>△準同期レプリケーションが組める</li>
    <li>△レプリケーションが停止した場合に原因対処と復旧ができる</li>
</ul>

<h3>DNSサーバー構築</h3>

<ul>
    <li>◎DNSの仕組みを理解している</li>
    <li>◎BINDでDNSサーバーを構築できる</li>
    <li>◎ゾーンファイルを記述できる</li>
    <li>〇DNSスレーブサーバーを構築できる</li>
    <li>◎浸透と言わない</li>
</ul>

<h3>メールサーバー構築</h3>

この辺はどうしてもプロパイだの制約でメールサーバ構築して遊べなかったりで経験値が少ないな

<ul>
    <li>△Postfix / qmailで送信メールサーバーが構築できる</li>
    <li>△Dovecotで受信メールサーバーが構築できる</li>
    <li>〇メールサーバーのエラーログが読める</li>
    <li>△バーチャルエイリアスが設定できる</li>
    <li>△POP before SMTPが設定できる</li>
    <li>△IMAPが設定できる</li>
    <li>△SSL証明書を用いてPOP3 / IMAPSが設定できる</li>
    <li>△スパムメールに対応できる</li>
</ul>

<h3>キャッシュサーバー</h3>

<ul>
    <li>△Varnishでキャッシュサーバーを構築できる</li>
    <li>△キャッシュ設計を立案できる</li>
    <li>△KVSサーバーを構築できる</li>
    <li>△CDNを利用した環境を構築できる</li>
    <li>△CDN各社の特性を理解しコスト計算ができる</li>
</ul>

<h3>ロードバランサー</h3>

素人なのでHAProxy大好きマン

<ul>
    <li>△ipvsadm + keepalivedでLVSを構築できる</li>
    <li>△PacemakerでHAIPを構成できる</li>
    <li>◎HAProxyでプロキシサーバーを構築できる</li>
    <li>〇ヘルスチェックスクリプトを記述できる</li>
    <li>〇BIG-IPの設定ができる</li>
</ul>

<h3>監視サーバー</h3>

ところでJP! AJS3の話はどこ行った？
ジョブ運用したり監視ができないと話にならないケースが多いぞ

<ul>
    <li>◎Zabbixで監視サーバーを構築できる</li>
    <li>〇Zabbixプラグインを活用することができる</li>
    <li>◎Zabbixエージェントをカスタマイズできる</li>
    <li>◎Zabbixの閾値やトリガー調整ができる</li>
    <li>◎Zabbixオートディスカバリを設定できる</li>
    <li>◎障害時にリモートコマンドを発行する設定ができる</li>
    <li>◎アラートをカスタマイズできる</li>
    <li>〇Muninでリソース監視ができる</li>
</ul>

<h3>ログ管理</h3>

ログのローテーションとかsplunkとかはなくていいの？って感じ
まぁできたとしてもrsyslogに飛ばすぐらいだな

<ul>
    <li>◎Fluentdを使ったログ収集ができる</li>
    <li>△Fluentdプラグインを活用できる</li>
    <li>〇td-agentを活用できる</li>
    <li>△Elasticsearchなどと組み合わせてログ分析ができる</li>
    <li>△Kibanaで可視化できる</li>
</ul>

<h3>AWS</h3>

ちょっと踏み込んだところになると弱い印象

Azureも似たようなことならできる

<ul>
    <li>◎EC2インスタンスを運用できる</li>
    <li>◎オンデマンド・スポットインスタンス・リザーブドインスタンスの特性を理解している</li>
    <li>◎AmazonLinuxとCentOSの違いを理解している</li>
    <li>◎セキュリティグループの設定ができる</li>
    <li>◎オートスケールの設計や設定ができる</li>
    <li>◎ELB / ALBの特性の違いを理解して活用できる</li>
    <li>△Pre-Warming状態でELBを待機させる際の負荷の見積もりが作成できる</li>
    <li>〇AMIが作成できる</li>
    <li>〇S3 / EBSを用いたストレージ計画を策定できる</li>
    <li>〇RDSの特性を理解して運用できる</li>
    <li>△DynamoDBをKVSとして活用できる</li>
    <li>△Route53 + CloudFrontを使ってコスト管理しつつCDN環境を構築できる</li>
    <li>△Lambdaを用いてサーバーレスアーキテクチャを構築できる</li>
    <li>△AWS API Gatewayを使ったAPI作成ができる</li>
    <li>△ElastiCacheを用いたキャッシュ設計を構築できる</li>
    <li>△CodeDeployによるコードデプロイ環境を構築できる</li>
    <li>〇CloudWatchによる監視アラートを設定できる</li>
    <li>◎VPCによるネットワーク環境整備やVPN環境構築ができる</li>
    <li>◎IAMを管理できる</li>
    <li>〇SDKとAPIを使ってAWSツールを開発できる</li>
    <li>△CloudFormationでAWSの構成管理ができる</li>
    <li>△料金シミュレートができて効率的なコスト管理ができる</li>
</ul>

<h3>仮想化</h3>

VMwareはVCP-DCV持ち

<ul>
    <li>〇XenやKVMを使った仮想化環境を構築できる</li>
    <li>〇OpenStackを使った仮想化環境を構築して運用できる</li>
    <li>〇NovaやNeutronなどのコンポーネントの特性を理解している</li>
    <li>◎VMware vSphereを使って仮想化環境を構築して運用できる</li>
</ul>

<h3>Docker</h3>

<ul>
    <li>◎Dockerで開発環境が構築できる</li>
    <li>◎Dockerfileが記述できる</li>
    <li>◎docker containerのコマンドを理解している</li>
    <li>◎Docker Composeを活用することができる</li>
    <li>△Docker環境を本番化できる</li>
    <li>△KubernetesでDockerクラスタを管理できる</li>
</ul>

<h3>Ansible</h3>

もうちょっと踏み込んで書くとgroupの使い方とかfactsとかも活用する機会は多い

<ul>
    <li>◎Ansibleで構成管理ができる</li>
    <li>◎Playbookを記述できる</li>
    <li>△Ansible Vaultを活用して暗号化できる</li>
</ul>

<h3>ストレージ</h3>

これ本当にストレージの項目か…？
OSの話だろって感じなので自分ができることを後半に追加

<ul>
    <li>◎CUIでパーティション操作ができる</li>
    <li>◎各ファイルシステムの特性を理解している</li>
    <li>△誤って削除したファイルの救出方法を知っている</li>
    <li>◎容量が肥大化しているファイルを特定できる</li>
    <li>△ディスクI/Oを計測しボトルネックを特定できる</li>
    <li>◎ファイルマスクを理解している</li>
    <li>◎ファイルのタイムスタンプを変更できる</li>
    <li>△RAID0〜RAID10までのRAID構成が組める</li>
    <li>〇ソフトウェアRAIDとハードウェアRAIDの特性の違いを理解している</li>
    <li>〇NFS環境が構築できる</li>
    <li>◎Samba環境を構築できる</li>
    <li>△lsyncdを使ってファイル同期環境が構築できる</li>
    <li>△テープドライブのCUI操作ができる</li>
</ul>

（以下追加）

<ul>
    <li>〇ゾーニング/マスキングの概念を理解でき、任意のエンタープライズストレージで設定できる</li>
    <li>〇SAN環境が設計・構築できる</li>
    <li>〇ストレージ使用容量増加予測ができる</li>
    <li>◎ストレージ間レプリケーションの設定ができる</li>
</ul>

&nbsp;

<h3>ネットワーク</h3>

<ul>
    <li>◎ネットワークレイヤーの違いを理解している</li>
    <li>◎ルーターとL3スイッチ、ネットワークハブとL2スイッチの違いを説明できる</li>
    <li>△NICの特性を理解している</li>
    <li>〇BGPを理解している</li>
    <li>〇DHCPのルールを設定できる</li>
    <li>◎オートネゴシエーションの特性を理解しオン・オフともに設定できる</li>
    <li>◎WireSharkなどのパケットキャプチャツールを使用することができる</li>
    <li>〇iperfなどでネットワーク速度を計測できる</li>
    <li>〇Cisco IOSをCLIで設定できる</li>
    <li>△OpenFlowを理解している</li>
    <li>〇ネットワークのボトルネックを特定できる</li>
    <li>〇YAMAHA RTXシリーズをCLIで設定できる。Luaで拡張できる</li>
    <li>◎タグベースVLANやポートベースVLANを構築できる</li>
    <li>◎PPTP / IPsecのVPNを構築できる</li>
</ul>

<h3>メモリ</h3>

<ul>
    <li>△RegisterdとUnbufferedの特性の違いを説明できる</li>
    <li>◎バッファメモリを理解している</li>
    <li>△ECCの特性を理解している</li>
    <li>〇Swapの特性を理解している</li>
    <li>◎ページキャッシュの確認とクリア方法を理解している</li>
</ul>

<h3>ラック</h3>

<ul>
    <li>〇サーバーのラッキングができる</li>
    <li>〇消費電力計算と電源に応じた最適なラック設計ができる</li>
    <li>〇エアフロー予測ができる</li>
    <li>△美しい配線ができる</li>
    <li>×寒さに強い</li>
</ul>

<h3>バックアップ（オリジナルから追加）</h3>

いやバックアップもインフラ屋の仕事としてやらされるでしょ。
というわけでここも自分のできることを整理して追加
たぶんここにないことが出来ないことなんだろうなと思う

<ul>
    <li>◎バックアップ取得容量増加予測が建てられる</li>
    <li>◎フル、差分、増分の違いがわかる</li>
    <li>◎永久増分バックアップは何かわかる</li>
    <li>◎要件に応じて最適なバックアップ取得方法を検討できる</li>
    <li>◎災害対策シナリオを想定した設計ができる</li>
    <li>◎ストレージによるバックアップとソフトウェアを用いたバックアップを組み合わせて設計できる</li>
</ul>

&nbsp;

<hr />

基本的なことは「あーこうすればいいよね」ぐらいだけど、細かいところはググらないと厳しい。

まだまだ知らないこともあるし、もっと◎を増やしていきたい]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date><![CDATA[2018-08-27 13:28:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-27 04:28:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-tried-checklist-inflaengineer_s_skill_checklist]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="%e3%82%b9%e3%82%ad%e3%83%ab"><![CDATA[スキル]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-08-27-i-tried-checklist-inflaengineer_s_skill_checklist.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[cfebc372faef10fc9c076508f0766ce767329f56]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=109]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%8c%e3%82%a4%e3%83%b3%e3%83%95%e3%83%a9%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%8b%e3%82%a2%e3%81%ae%e3%82%b9%e3%82%ad%e3%83%ab%e3%83%81%e3%82%a7%e3%83%83%e3%82%af%e3%83%aa%e3%82%b9%e3%83%88%e3%80%8d]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>How to use docker-php-ext-install command on the docker_container of ansible modules.</title>
		<link>https://blog.killinsun.com/2018/09/how-to-use-docker-php-ext-install-command-on-the-docker_container-of-ansible-modules/</link>
		<pubDate>Wed, 05 Sep 2018 12:39:51 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[I faced any problems that is couldn't use <strong>command</strong> option of a <strong>docker_container</strong> module.

<!--more-->I need customize php-fpm container, so I used <em><strong>docker-php-ext-install</strong></em> command in docker_container's command option.
But I had any struggle points.

My struggles..

<ol>
    <li>I didn't recognize command option's reference detail.
<ol>
    <li>Is parameter type string? list?  fmm??</li>
</ol>
</li>
    <li>Importance of ENTRYPOINT(docker-php-entrypoint?? what's this?)</li>
    <li>In using <strong>command option, </strong>Docker container shutting down immediately.
<ul>
    <li>PHP-fpm container is uses exposed port. Why shutting down????</li>
</ul>
</li>
</ol>

<h2>How to</h2>

Let me get straight the point, this playbook is a my solution.

<pre class="toolbar:2 lang:yaml decode:true "> - name: Deploy PHP7 on docker container
    docker_container:
      name: php7-fpm
      auto_remove: yes
      command: [
        "bash",
        "-c","
        'apt update &amp;&amp; apt install zlib1g-dev &amp;&amp; docker-php-ext-install zip &amp;&amp; docker-php-ext-install pdo_mysql &amp;&amp; php-fpm'"
      ]
      image: php:7-fpm
      exposed_ports:
        - 9000
      state: started
</pre>

&nbsp;

<h2>Answer of my struggles</h2>

<h3> 1.</h3>

A command option of docker_container can receive one of shell command.

["ping","127.0.0.1","-c","5"]

"ping 127.0.0.1 -c 5"

Both styles can use too.

<h3>2.</h3>

"docker-php-entrypoint" distinguish argument's '-'
If entrypoint option and command option that both have a some parameter, Executing that the command option is option of entrypoint's.

<h3>3.</h3>

PHP7-fpm docker container runs "php-fpm" shell command on the command that is equivalent of dockerfile's CMD directive.
However, my wrong playbook didn't have php-fpm command at last.
Therefore all commands successfully done, and container shutting down.

<pre class="lang:default decode:true ">      command: [
        "bash","-c","'apt update &amp;&amp; apt install zlib1g-dev &amp;&amp; docker-php-ext-install zip &amp;&amp; docker-php-ext-install pdo_mysql"
      ]</pre>

&nbsp;

So, bash commands option helped my solution.

<em><strong>"/bin/bash -c '{any commands of combined from &amp;&amp;}'" </strong></em>

<hr />

&nbsp;

Please your advices, comments.

thanks.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date><![CDATA[2018-09-05 21:39:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-05 12:39:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-use-docker-php-ext-install-command-on-the-docker_container-of-ansible-modules]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="ansible"><![CDATA[Ansible]]></category>
		<category domain="post_tag" nicename="ansible"><![CDATA[Ansible]]></category>
		<category domain="category" nicename="centos"><![CDATA[CentOS]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[PHP]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-09-05-how-to-use-docker-php-ext-install-command-on-the-docker_container-of-ansible-modules.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[5bdc58f06ebdcef7a03d79106a45bd6a5efce70c]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=121]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>express + pugを使ってMariaDB(MySQL)と連携する</title>
		<link>https://blog.killinsun.com/2018/10/using-mariadb-with-express-and-pug/</link>
		<pubDate>Mon, 08 Oct 2018 14:54:42 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>前提</h3>

<ul>
    <li>予めexpress-generatorなどを用いてexpress環境が出来ている事</li>
    <li>MySQL環境（データベース、テーブル）は準備済みである事</li>
    <li>pugのレイアウト分け、インポート等はなんとなく理解した上で分けている事</li>
</ul>

<h3>テストテーブル</h3>

手始めにこんな感じのシンプルなテーブルを用意した。

<table>
<thead>
<tr>
  <th>id</th>
  <th>name</th>
  <th>other_name</th>
</tr>
</thead>
<tbody>
<tr>
  <td>1</td>
  <td>tony_stark</td>
  <td>IRON-MAN</td>
</tr>
<tr>
  <td>2</td>
  <td>steve_rogers</td>
  <td>Captain America</td>
</tr>
</tbody>
</table>

<h3>下準備</h3>

<h4> mysqlパッケージインストール</h4>

npmでmysqlパッケージをインストール

<pre class="lang:default decode:true">npm install --save mysql</pre>

<h4>node環境変数にMySQL接続情報をセット</h4>

予めnode_envにユーザ名やパスワードを格納しておく。
node.jsの起動時やdotenvを使って記録しておくなど何でもよい。
詳しいことはググって。次の内容からいきなり読み出しています。

<h3>app.js</h3>

<pre class="lang:js decode:true">let bodyParser    = require('body-parser');
let createError   = require('http-errors');
let express       = require('express');
let path          = require('path');
let cookieParser  = require('cookie-parser');
let logger        = require('morgan');
let indexRouter   = require('./routes/index');
let userRouter    = require('./routes/user');
let mysql         = require('mysql');
let app           = express();

//--------- ①Database settings-------------
const db_conf = {
  host     : 'データベース接続先FQDN or IP addr',
  user     : process.env.MYSQL_USER,
  password : process.env.MYSQL_PASS,
  database : 'test_database'
}
const pool = mysql.createPool(db_conf);
app.set('pool', pool);

//----------------------------------------


app.use(bodyParser.urlencoded({extended: true}));

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/user', userRouter);

〜〜〜省略〜〜〜
module.exports = app;
</pre>

&nbsp;

まず、①でデータベースに接続するコンフィグを定義し、mysql.createPoolによってPoolオブジェクトを生成している。app.jsのこの位置に記載する事によってどのリクエストもデータベースとコネクションを開始する。

場合によっては記載する位置を変えて別モジュールから読み出させるなどで、必要に応じてデータベースにつなぎに行く回数を減らしてもいいのかもしれない。というかそうするべきである。

app.setによって各ルーターからコネクションに介入する事が出来る。

&nbsp;

<h3>index.js</h3>

<pre class="lang:js decode:true">'use strict';
require('dotenv').config();
const express = require('express');
const router = express.Router();
const date = require('date-utils')

/* GET home page. */
router.get('/', function(req, res, next) {

  //-------- ②リクエストからDBのコネクション情報を読取る--------
  const app   = req.app;   
  const pool  = app.get('pool');

  //---------③クエリを発行 -&gt; テンプレートにレンダリング ------
  pool.query('SELECT * FROM test_table;', function(error, results, fields){
    if(error) throw error;
    res.render('index', { title: 'DB Connect　Test,　results: results });
  });
  

});

module.exports = router;</pre>

続いてindexルーター。
②は、①の最後でセットしておいたコネクション情報を読み出し。

③でqueryメソッドを実行する。コールバック関数の２つ目「results」に結果が格納されるので、res.renderの第二引数のオブジェクトに設置してテンプレートエンジンにレンダリングさせる。

<h3>index.pug</h3>

最後にフロントエンド側。 node.jsでこねくり回したデータ、オブジェクトはここで表示する。
#{results}とすれば[Object object]としか表示されないので、一件ずつ解いていくやり方にした。

<pre class="lang:css decode:true">extends layout
block contents
  h1.title= title
  p.subtitle Welcome to #{title}
  div.columns
    each row in results  /* ここでループ。DBのresultsで返された件数分rowに格納していく。 */
      div.box
        p.row__id ID: #{row.id}　　/* rowに渡されたDBカラムの内容は row.{カラム名}で取得できる */
        p.row__name Name:  #{row.name}
        p.row__other_name Other_name: #{row.other_name}
</pre>

&nbsp;

pugの書き方で　each ~ inというのがあって、node.jsでいう　for ~ of と同じニュアンスで使えるような記法がある。今回はそれを使って pugで受け取っているオブジェクトを１つずつ取り出し、HTMLに吐き出す事とした。

&nbsp;

<hr />

今までサーバサイドからフロントエンドにデータを受け渡しするのはsocket.ioにJSONオブジェクトとして乗っけてしまえる所に頼ってしまっていたので、res.renderを使ってpugに表示させるやり方の理解に躓いた。

pugもpugで、javascriptが埋め込める分、console.log()とか使ってデバッグをしてもサーバ側でプリントされてしまうのでブラウザコンソールで表示させるのはどうしたらええんやと躓いた。

/以上

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2018-10-08 23:54:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-10-08 14:54:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-mariadb-with-express-and-pug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="express"><![CDATA[express]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="post_tag" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="pug"><![CDATA[pug]]></category>
		<category domain="post_tag" nicename="%e3%83%87%e3%83%bc%e3%82%bf%e3%83%99%e3%83%bc%e3%82%b9%e6%8e%a5%e7%b6%9a"><![CDATA[データベース接続]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-10-08-using-mariadb-with-express-and-pug.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[e5cd3bd330867078ff05659648522a46621a35e9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=128]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[express-pug%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%a6mariadbmysql%e3%81%a8%e9%80%a3%e6%90%ba%e3%81%99%e3%82%8b]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>SIer５年目が自社新卒３年目までを対象にプログラミング研修の講師をしてきた</title>
		<link>https://blog.killinsun.com/2018/10/sier_pg_handson/</link>
		<pubDate>Sat, 27 Oct 2018 05:50:24 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[２０２０年、小学生がプログラミング必修化と騒がれている中で、私が所属している会社は良くも悪くも運用・保守がメインなのでプログラミングには縁が無い部署ばかりである。
（幸いなことに、私自身はコードを書く機会に恵まれているというか、ソロプレイながらもそういった機会を見つけて取り組んでいる）

所属本部もプログラミング出来る人間が育成したいというビジョンがあり、私も必要だと感じていて本部長と話していたのが今年の２月頃。

そして昨日、ようやく集合形式での研修を終えたので振り返ってみる。

<!--more-->

<hr />

<h2>目次</h2>

<ul>
    <li>大事にしたい内容と目標</li>
    <li>どうやって学ばせるか？を考えた</li>
    <li>実施してみて</li>
    <li>今後の動き</li>
</ul>

&nbsp;

<h2>大事にしたい内容と目標</h2>

元々考えていたのは、「プログラミング研修」とはいえ、「If文やfor文の使い方を教えたり、書き方を教えたりする研修はつまらない」だということだ。

プログラミング言語にしろ、それぞれの書き方にしろ、プログラミング自体は「手段」でしかなくて、「プログラミングを使って何を作るのか」を身につける力をつける機会を得られるようにしたいと思っていた。

事務局として動いてくださった本部長を含む部課長陣もこれには大きく同意下さり、方針はそういった形で進むこととなった。

&nbsp;

<h2>どうやって学ばせるか？　を考えた</h2>

さて、「プログラミングを使って何を作るのか」ではまだ曖昧で、ふわっとしている。
プログラミング研修と謳っているからには、「考え方を学ぶ場」であると同時に受講者が「プログラミング出来る」と実感できるような場にもしなくちゃいけない。

そこで、自分がどうやってコードを人並みに出来るようになったかを思い出してみた。
大きく力がつくきっかけになったのが、この2つの出来事かなと思った。

<h3>2000年代頭に流行ったホームページ作成ブーム</h3>

まだIEが市場を支配していたあの頃、誰でもちょっと勉強すればテキストエディタでホームページを作って公開し、そして黒歴史を生み出す時代があった。
当時小学生だった私はそのブーム真っ只中にいて、いろいろなWEBサイトを巡ってはあんなサイトを作りたいと、解説サイトを開きながら見よう見まねでホームページを作っていたのを覚えている。
もちろん、最初から作るのは出来なかった為、「テンプレート」を素材サイトからダウンロードし、自分好みにカスタマイズして使っていた。

<ul>
    <li> あのメニューはどうやって作っているのだろうか</li>
    <li>音楽を流したいけど、どうやったら出来るのだろうか</li>
</ul>

そういった疑問を持っては調べて実装し、いつの間にか私はHTMLとCSSを使う程度であれば（当時のお作法の中で）使いこなして、ホームページを作るようになっていた。

<h3>Androidアプリコンテスト</h3>

専門学生時代の私はお山の大将で、何でも出来ると思っていた。
だからやる気のある後輩を集めて技術教育（にはならないが、学ぶきっかけを作ったり）をしていた。

そんな中で偶然参加したAndroidアプリコンテストでは、<strong>既存のコードを解析して、自分たちで考えた要件を実装する</strong>といったことをどっぷり浸かってやっていた。

あれで雰囲気でしか掴んでいなかったJavaのクラスやメソッドからなるオブジェクト指向を理解して実装に取り入れる事ができたし、「正常に動いていたものを自分の頭に落とし込んで、独自のコードを書く」この繰り返しで大幅に自分は成長する事が出来たと思う

&nbsp;

<h3>２つに共通していること</h3>

これら２つに共通している事は、「真似をする」こと、「０から作り上げるのではなく、未完成を完成に持っていく為に試行錯誤すること」だった。

人は、要件も不明確なものを０から作り上げるのは大きな時間と努力と、意志が必要で、<strong>「８割完成していて残りの２割を自分でどうにかしなきゃいけない」</strong>といったシーンで、「ちょっと頑張ってみるか」という気持ちになれるのではないかと考えた。

<h3>どうやって学ばせるか</h3>

今回の研修では、以下のようにした

<h4>初級編</h4>

Javascriptで書かれた２００行程度のテトリスを題材とした、
これは、普通に実行すると「X字」のブロックが落ちてきたり、「ラインを揃えて消しても消した行数が反映されない」、「テトリスボードの大きさがめちゃくちゃ」といった仕様の問題を抱えている。
受講者は、まず手始めに慣れる事を目的としてこれらのコードの解析をしてもらいながら、正しく動くように実装してもらった。

もちろん、OSSで落としてきたコードなので、普通に見たらよくわからないコードの羅列だ。
そのため、私は日本語でコメントを大量に残す事を意識しつつ、答えを与えない程度のヒントを書き連ねた。

<h4>中級編</h4>

レガシーなテクノロジーを学んでも仕方ないし、PythonやRubyは他の部署で研修実績として取り扱っていたので、引き続きJavaScript/ Node.jsを使ったWEBアプリケーションを題材にした。

WEBアプリケーションはCLIプログラムとは違って

<ul>
    <li>GUIアプリケーションとして実装する敷居がとても低い</li>
    <li>簡単に動くものが作れるので、達成感を味わいやすく、動く楽しさがモチベーションになる</li>
    <li>WEB業界はやっぱ活発なのでその仕組をしってもらいたい</li>
</ul>

これらの理由からNode.js + Vue.js を使った未完成の簡易スケジュールアプリを作ってもらうこととした。

&nbsp;

<h3>しかし、初学者が初級から中級に飛ぶにはとてもハードルが高かった</h3>

普段オペレーションやっている人間が割とモダンなテクノロジーでWEB開発をするって、かなりハードルが高いと思う。それこそ趣味でやっている経験があるレベルじゃないと、とても難しくて、投げ出してしまう。もし私が受講者の立場だったとしたら「こんなのは講師の自己満足研修でしかない」といって放り投げていたかもしれない、

そういった事も踏まえて、「初級」と「中級」の間にもう一つクッションを挟んだ

<h4>「チョットナレル」</h4>

WEB開発の登場人物（HTML5(PUG)/ CSS3(Bulma)/ Javascript(Vue.js)/ Node.js/ express)の役割を説明し、それらの基礎的な使い方を実践するセクションを挟んでみた

<ul>
    <li>Expressにチョットナレル</li>
    <li>Express + MySQLにチョットナレル</li>
    <li>PUG &amp; HTML5にチョットナレル</li>
</ul>

この３つの「チョットナレル」を一通り実践することで、「サーバとDBが連携し、フロントにデータを受け渡す」までの一連の流れを体系的に学ぶ事が出来る。
大体これらのレクチャーは２時間ぐらいかけて行い、その後、中級のスケジュール管理アプリの開発に着手してもらうといった形だ。

&nbsp;

<h2>実施してみて</h2>

研修当日は、以下流れで行った。

<ul>
    <li>開催挨拶</li>
    <li>アイスブレイク</li>
    <li>初級編</li>
    <li>（お昼休憩）</li>
    <li>チョットナレル</li>
    <li>中級編</li>
    <li>今後のお題</li>
</ul>

大体午後から本題のチョットナレル〜中級に取り組めるような形で、午前中はウォーミングアップの時間としておいた。

実施する前と後で、受講者は「プログラムを書く力」はつけきれていないものの、「プログラムを読む力」は少しずつ付いたんじゃないかなと思っている。

それに、「フロントエンドではこうする」、「バックエンドではこうする」といった仕組みを知っているのと知らないとでは実装の仕方に大きな差が出てくる。

&nbsp;

<h2>今後の動き</h2>

&nbsp;

お題として出した「スケジュール管理アプリ」は、未実装の機能がたくさんある。

例えば、

<ul>
    <li>スケジュール登録画面はあるが、登録ボタンがなく、サーバへ送信（POST)もしていない</li>
    <li>編集機能がない</li>
    <li>削除機能がない</li>
    <li>データベースにユーザの概念はあるが、マルチユーザ未実装</li>
</ul>

今後、受講者は３ヶ月かけて自宅や職場のスキマ時間を利用してこのアプリケーションの開発を行っていき、最終的に上記に加えて独自のアイデアで考えた機能を実装し、発表する所までを研修としている。

大方、これらを完遂させるためには「サンプルプログラムを読み込む」のと同時に「Googleで必要な情報を検索して自分の頭に落とし込む」事が必要になる。

もちろん、調べてもわからない、やりたいことがふわっとしていてどうやって調べたらいいかわからない、そもそも何から手を付けていいかわからない　といったGoogleでも解決しきれない場合の為に、私がいつでもチャットで質問を受け付けるような仕組みにしている。

逆にここまで出来ると、「自分の力で要件が明確なものを作りあげる事が出来る」になると踏んでいる。
３ヶ月後、受講者は地獄のような試練を乗り越えてどのような成果を発表するのか、非常に楽しみです。

&nbsp;

次回、１月ごろの結果を踏まえて続きを書こうと思う

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2018-10-27 14:50:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-10-27 05:50:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sier_pg_handson]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="node-js"><![CDATA[Node.js]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="sier"><![CDATA[SIer]]></category>
		<category domain="post_tag" nicename="%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0"><![CDATA[プログラミング]]></category>
		<category domain="category" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e7%a0%94%e4%bf%ae"><![CDATA[研修]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[sier%ef%bc%95%e5%b9%b4%e7%9b%ae%e3%81%8c%e6%96%b0%e5%8d%92%ef%bc%93%e5%b9%b4%e7%9b%ae%e3%81%be%e3%81%a7%e3%82%92%e5%af%be%e8%b1%a1%e3%81%ab%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-10-27-sier_pg_handson.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[9bc35f1c9a8528d76419ab7252059cae5f75514e]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=140]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2012-08-27</title>
		<link>https://blog.killinsun.com/2018/08/i-bought-macos/</link>
		<pubDate>Sun, 26 Aug 2018 15:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=149</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="section">
前々から欲しかったiMac。<br>最近稼ぎがよいので買ってみました。<br><br>でけぇ。<br><a href="http://f.hatena.ne.jp/killinsun/20120826151102" class="hatena-fotolife" target="_blank" rel="noopener noreferrer"><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20120826/20120826151102.jpg" alt="f:id:killinsun:20120826151102j:image" title="f:id:killinsun:20120826151102j:image" class="hatena-fotolife"></a><br><br><h2>Mac→テレビのデュアルディスプレイ環境を見越す</h1><br>今後、デュアルディスプレイ環境になることを見越して、<br>テレビの隣に持ってくるように。<br>
<div class="hatena-asin-detail">
<a href="http://www.amazon.co.jp/dp/B0033Y26AW/?tag=hatena_st1-22&ascsubtag=d-1ajs09"><img src="https://images-fe.ssl-images-amazon.com/images/I/31EGFllSpxL._SL160_.jpg" class="hatena-asin-detail-image" alt="mini Display Port - HDMI 変換ケーブル (Apple Macbook 対応)" title="mini Display Port - HDMI 変換ケーブル (Apple Macbook 対応)"></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/dp/B0033Y26AW/?tag=hatena_st1-22&ascsubtag=d-1ajs09">mini Display Port - HDMI 変換ケーブル (Apple Macbook 対応)</a></p>
<ul>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a href="http://d.hatena.ne.jp/keyword/QUE" class="keyword">QUE</a></li>
<li><span class="hatena-asin-detail-label">メディア:</span> エレクトロニクス</li>
<li><span class="hatena-asin-detail-label">購入</span>: 26人 <span class="hatena-asin-detail-label">クリック</span>: 76回</li>
<li><a href="http://d.hatena.ne.jp/asin/B0033Y26AW" target="_blank" rel="noopener noreferrer">この商品を含むブログ (2件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"></div>
</div>
iMacの接続端子にはMini-Display端子というものがあるらしく、<br>普通はそれらをつかってMac book proやMac Book airなどをつないだりするらしいが、<br>どうもこのコンバーターを使うことで、Mini-Display→HDMI　へと変換できるようだ。<br><br>HDMIにさえしてしまえば、こっちのもの。<br>お値段もそれなりに安いので、AppleTVを導入するよりは低コストで済みそう。<br><br><br><h2>iMacそのものの使用感想</h1><br>まだまだデータを半分くらい移行した後なので何とも言えないが、<br>やはりかなり洗練されてるなーとは思う。<br>ちょっと興味本位で画像をつなぎ合わせて凝ったスライドショーを<br>iMovieで作ってみたけど、やはり綺麗に仕上がる。<br><br>今後はぼちぼちX-CODEやGarageBandなど使っていきたいなーと思う。<br><br>あ、あとキーボードの入力がWindowsから入ると癖がある。<br>英字と日本語の入力。<br><br>Win時代はescのあたりのキーだけで済むのだが、<br>Macだとどうも　英数キーと　かなキーで分かれていて、<br>それらで切り替えるみたい。<br>ちょっと慣れるまで時間かかりそう。<br>未だに「１」って押しちゃうし。
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date><![CDATA[2018-08-27 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-26 15:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-bought-macos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
		<category domain="post_tag" nicename="macos"><![CDATA[macOS]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="post_tag" nicename="%e8%b3%bc%e5%85%a5"><![CDATA[購入]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[1970-01-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-08-27-i-bought-macos.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[a9326f2c61f7a95af37a89491201dced5ec2ec8d]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=149]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[2012-08-27]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>イベントを主催してきた</title>
		<link>https://blog.killinsun.com/2014/02/i-hold-a-study-meetup-at-my-work/</link>
		<pubDate>Fri, 28 Feb 2014 04:00:00 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<div class="section">

お久しぶりです。

今まで勉強会やイベントといった類のものは「参加する側」だったのですが、
18日に正式な形でイベントを主催するという立場になってきました。


私が主催したのは「ネットワーク＆サーバー構築ハンズオン」というもので、
過去3回参加している「トラブル☆しゅーたーず」様での経験を活かし、運営しました。
（ちなみに、部活内では夏合宿で自己トラしゅなるものをやりました）

経験を活かし、とは言いましたが　シナリオの作り方やイベントの流れは
全く「トラブル☆しゅーたーず」を踏襲しています。というかパクリです。
直すのか作るのかの違いですね。　トラしゅ運営の人に一言も断ってないけどいいのかなこれってレベル。


対象は、「CCENT以上CCNP以下の資格を取得しており、実務経験のない初心者」ということで
私の学校のネットワーク科の1年生から20名近くと、直属の後輩にあたるITエンジニア科から若干名が参加し、
24名定員のところ、23名の申し込みありました。（当日キャンセル1名、運営チームへ移動1名）

私が現役の最前線に出てる社会人達との会話や、イベント勉強会を通じて、
「インフラエンジニアってこんなものなんだ」っていうのを私なりに噛み砕いて後輩に伝えたかった勉強会です。
私自身、実務を経験したことがないので、見て聞いたことをそのまま伝える感じです・
<h5>企画は12月上旬</h5>
&nbsp;

後輩と「資格を持ってるだけで実機で触る事がない」という会話の流れから、
「せっかく学校には環境あるんだから使えばいいんじゃね？」ってことで学校の環境をフルで使ってできる
イベントがないか考えました。
1年生の担任の先生方や学科長の先生と日付の打ち合わせをし、私も卒研と平行して準備にあたりました。
<h5>シナリオ</h5>
&nbsp;

「首無楽器」というチェーン店を持つ「首無商事株式会社」様は、「首無楽器」のショッピングサイト参入にあたり、
新規ネットワーク環境の構築を弊社に依頼してきました。

また、ショッピングサイト（ECサイト）以外にも
・広報ブログ(WordPress)
・社内スケジュール管理（Aipo)
・各サーバー監視(Zabbix)
の計４つのサービスを4部署（４チーム）ごとに管理できるようにしたい…。とのことです。

お客様である首無商事株式会社に対し、上司である「キリ☓さん」（この件はトラしゅの「山◯くん」のパクリ）は
そんなお客様のご意見をヒアリングし、以下のネットワーク図を書きました　（実は不完全）
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20140219235233" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20140219235233p:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20140219/20140219235233.png" alt="f:id:killinsun:20140219235233p:image" /></a>

「当日私は不在ですが、CIscoの資格を取得している優秀な部下達に任せます。」
と答えるも
「残念ながら機器はあるにはあるのですが、十分な数がないので…」

というシナリオのもと、ネットワークを切り分けるVLANの部分は
LinuxやDELLのスイッチを使って行うことに。
（キリ☓さん曰く「VLAN使うのにCiscoである必要ないよね別に。」だそうです笑）

各チームは、個々の部署のプライベートネットワークを構築し、VLANで切り分けたDMZ内に各サーバーを構築し、
プライベートネットワーク内のマシンから繋がるようにする事が任されました。

そして、各チームはネットワークやサーバーを僅かな手順書とGoogle先生、資格の本を頼りに構築し、

最後にお客様への「報告発表」を行う…。
<h5>イベント当日の様子</h5>
&nbsp;

運営からのお楽しみ要素としてレッドブルタワー構築しました（笑）
SECCON CTFの全国大会でこんな感じだったらしいという画像をみて、ずっとやりたいと思っていました。
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20140218092957" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20140218092957j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20140218/20140218092957.jpg" alt="f:id:killinsun:20140218092957j:image" /></a>

運営チームも含め、総勢２５，６名で作業。
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20140218122430" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20140218122430j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20140218/20140218122430.jpg" alt="f:id:killinsun:20140218122430j:image" /></a>

CCNPなどの上位資格を持っていても、普段使っているマシンから
コンソールに入ることが出来ないことに悔しさを感じているチームもありました。
ケーブルとかって実際目にしたこと無いですからね。
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20140218122536" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20140218122536j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20140218/20140218122536.jpg" alt="f:id:killinsun:20140218122536j:image" /></a>

彼らは結構写り慣れてるみたいです（笑）
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20140218142833" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20140218142833j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20140218/20140218142833.jpg" alt="f:id:killinsun:20140218142833j:image" /></a>

最後の報告会です。予想以上にお通夜でした。
彼らはプレゼンテーションの授業が始まっておらず、
トラしゅのように実際のエンジニアのプレゼンを見ていないのもあり、
発表の手法に関してはまだまだ改善点が沢山見られましたが、
報告書そのものは抑えるポイントは抑えてきているようでした。
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20140218150947" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20140218150947j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20140218/20140218150947.jpg" alt="f:id:killinsun:20140218150947j:image" /></a>

例によって最後の解答編。
ここでは、作業においてポイントとなる点、
実際に現場で出た先生方からの視点での講評や、
私から後輩に受け継いで欲しいメッセージを熱く語りました。
<a class="hatena-fotolife" href="http://f.hatena.ne.jp/killinsun/20140218152931" target="_blank" rel="noopener noreferrer"><img class="hatena-fotolife" title="f:id:killinsun:20140218152931j:image" src="https://cdn-ak.f.st-hatena.com/images/fotolife/k/killinsun/20140218/20140218152931.jpg" alt="f:id:killinsun:20140218152931j:image" /></a>
<h5>イベントを終えて</h5>
&nbsp;

難易度が思ったよりも彼らにとっては高すぎたり、
イベントの準備が思うようにできておらず、当日の朝バタバタしてしまったりと、個人的には悔しい結果ではありましたが
イベントの次の日には後輩から「就活の面接で話したら半分以上その話題で、その場で一次通りました」など、うれしい報告もいただき、
彼ら自身も生き生きとやっていたのでやりごたえは非常にありました。


「IT系の学校なのに、体育祭だったり学園祭だったりで、ITの系のイベントがひとつもない」と私が嘆いていました。
そこから最後の最後に、自分で企画して実践するまでには、外の勉強会やイベントに参加したりと、経験するべきことが非常に多かったです。
（実際はイベントを開催するために参加するプロセスを踏んだわけではありませんが）

私にとっては、第二の卒業研究。
自分でレベルが高いとは断じて言えませんが、「他人よりも出来る技術や知識があるなら、他人にもそうできるようにするのが真のトップの仕事」という言葉を胸に
出来る事をやり尽くしたなーと思います。

反省点を上げればキリがないですが、これらを整理して、後輩に引き継いで
彼らにも同じ立場を経験してほしいですね。　ちゃんと伝わったのだろうか、心配です。


ちなみに、イベントの次の日の今日はアルバイトだったのですが、後半から体調が崩れ始め、
家に帰宅したら熱が出ていました。

いろいろと疲れがたまったのでしょうか。
今日明日はゆっくり休むとします。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date><![CDATA[2014-02-28 13:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-28 04:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-hold-a-study-meetup-at-my-work]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="centos"><![CDATA[CentOS]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="network"><![CDATA[Network]]></category>
		<category domain="post_tag" nicename="network"><![CDATA[Network]]></category>
		<category domain="category" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e7%a0%94%e4%bf%ae"><![CDATA[研修]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[1970-01-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2014-02-28-i-hold-a-study-meetup-at-my-work.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[73750a436a74df89eb71f683ce82a68c41cf2388]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=182]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%e3%82%92%e4%b8%bb%e5%82%ac%e3%81%97%e3%81%a6%e3%81%8d%e3%81%9f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[i-hold-an-event]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>macOS 固有CLI コマンド</title>
		<link>https://blog.killinsun.com/2018/11/unique-commands-of-macos/</link>
		<pubDate>Sun, 11 Nov 2018 09:33:21 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=231</guid>
		<description></description>
		<content:encoded><![CDATA[意外とLinux系のコマンドは触ることが多いが、普段よく使うmacOS固有のコマンドって「打ってみて」と言われてすぐに手が動かせないので備忘録

<h2>全般</h2>

<h3>system_profiler (システム構成確認)</h3>

要は　→このMacについて→システムレポート　の内容を出力

<pre class="lang:default decode:true">system_profiler</pre>

ただしこのまま打つと情報量が多いので、lessに流すとかして使うか、DataTypeというものを指定してやる。

<pre class="lang:default decode:true" title="DataTypeの一覧">Available Datatypes:
SPParallelATADataType
SPUniversalAccessDataType
SPSecureElementDataType
SPApplicationsDataType
SPAudioDataType
SPBluetoothDataType
SPCameraDataType
SPCardReaderDataType
SPComponentDataType
SPiBridgeDataType
SPDeveloperToolsDataType
SPDiagnosticsDataType
SPDisabledSoftwareDataType
SPDiscBurningDataType
SPEthernetDataType
SPExtensionsDataType
SPFibreChannelDataType
SPFireWireDataType
SPFirewallDataType
SPFontsDataType
SPFrameworksDataType
SPDisplaysDataType
SPHardwareDataType
SPHardwareRAIDDataType
SPInstallHistoryDataType
SPLegacySoftwareDataType
SPNetworkLocationDataType
SPLogsDataType
SPManagedClientDataType
SPMemoryDataType
SPNVMeDataType
SPNetworkDataType
SPPCIDataType
SPParallelSCSIDataType
SPPowerDataType
SPPrefPaneDataType
SPPrintersSoftwareDataType
SPPrintersDataType
SPConfigurationProfileDataType
SPRawCameraDataType
SPSASDataType
SPSerialATADataType
SPSPIDataType
SPSmartCardsDataType
SPSoftwareDataType
SPStartupItemDataType
SPStorageDataType
SPSyncServicesDataType
SPThunderboltDataType
SPUSBDataType
SPNetworkVolumeDataType
SPWWANDataType
SPAirPortDataType</pre>

&nbsp;

個人的によく使うのはこれ

<h4>system_profiler SPUSBDataType (USBポートの情報を表示)</h4>

<pre class="lang:default decode:true">$ system_profiler SPUSBDataType
USB:

    USB 3.0 Bus:

      Host Controller Driver: AppleUSBXHCISPTLP
      PCI Device ID: 0x9d2f
      PCI Revision ID: 0x0021
      PCI Vendor ID: 0x8086

        USB2.0 Hub:

          Product ID: 0x2813
          Vendor ID: 0x2109  (VIA Labs, Inc.)
          Version: 90.11
          Speed: Up to 480 Mb/sec
          Manufacturer: VIA Labs, Inc.
          Location ID: 0x14300000 / 7
          Current Available (mA): 500
          Current Required (mA): 0
          Extra Operating Current (mA): 0

            UX1:

              Product ID: 0x4150
              Vendor ID: 0x0e41
              Version: 0.01
              Speed: Up to 12 Mb/sec
              Manufacturer: Line 6
              Location ID: 0x14340000 / 10
              Current Available (mA): 500
              Current Required (mA): 498
              Extra Operating Current (mA): 0

            USB 2.0 BILLBOARD             :

              Product ID: 0x0100
              Vendor ID: 0x2109  (VIA Labs, Inc.)
              Version: 6.00
              Serial Number: 0000000000000001
              Speed: Up to 480 Mb/sec
              Manufacturer: VIA Technologies Inc.
              Location ID: 0x14310000 / 9
              Current Available (mA): 500
              Current Required (mA): 100
              Extra Operating Current (mA): 0

    USB 3.1 Bus:

      Host Controller Driver: AppleUSBXHCIAR
      PCI Device ID: 0x15d4
      PCI Revision ID: 0x0002
      PCI Vendor ID: 0x8086
      Bus Number: 0x00

        USB3.0 Hub:

          Product ID: 0x0813
          Vendor ID: 0x2109  (VIA Labs, Inc.)
          Version: 90.11
          Speed: Up to 5 Gb/sec
          Manufacturer: VIA Labs, Inc.
          Location ID: 0x00200000 / 1
          Current Available (mA): 900
          Current Required (mA): 0
          Extra Operating Current (mA): 0

            USB3.0 Card Reader:

              Product ID: 0x0749
              Vendor ID: 0x05e3  (Genesys Logic, Inc.)
              Version: 15.35
              Serial Number: 000000001536
              Speed: Up to 5 Gb/sec
              Manufacturer: Generic
              Location ID: 0x00220000 / 2
              Current Available (mA): 900
              Current Required (mA): 896
              Extra Operating Current (mA): 0</pre>

<h2>ネットワーク関連</h2>

<h3>networksetup -listallhardwareports (ハードウェア情報表示)</h3>

<pre class="lang:default decode:true">$ networksetup -listallhardwareports

Hardware Port: Wi-Fi
Device: en0
Ethernet Address: XX:XX:XX:XX:XX:XX

Hardware Port: Bluetooth PAN
Device: en3
Ethernet Address: XX:XX:XX:XX:XX:XX

Hardware Port: Thunderbolt 1
Device: en1
Ethernet Address:XX:XX:XX:XX:XX:XX

Hardware Port: Thunderbolt 2
Device: en2
Ethernet Address: XX:XX:XX:XX:XX:XX

Hardware Port: Thunderbolt Bridge
Device: bridge0
Ethernet Address: XX:XX:XX:XX:XX:XX

VLAN Configurations
===================</pre>

<h3>airport -s (無線アクセスポイントをスキャンして一覧表示)</h3>

かなり階層が深い所にあるコマンド。
/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/

初期セットアップ時にエイリアス張ったほうがいい。

<pre class="lang:default decode:true">$ /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s
                            SSID BSSID             RSSI CHANNEL HT CC SECURITY (auth/unicast/group)
                   HUMAX-2B218-A XX:XX:XX:XX:XX:XX -66  136,-1  Y  JP WPA(PSK/AES,TKIP/TKIP) WPA2(PSK/AES,TKIP/TKIP)
      NETGEAR85-5GHz-guestAccess XX:XX:XX:XX:XX:XX -39  128     Y  JP WPA2(PSK/AES/AES)
                     HUMAX-2B218 XX:XX:XX:XX:XX:XX -56  11      Y  JP WPA(PSK/AES,TKIP/TKIP) WPA2(PSK/AES,TKIP/TKIP)
                 elecom5g-76fc61 XX:XX:XX:XX:XX:XX -68  48      Y  US WPA2(PSK/AES/AES)
                  aterm-a2ba1f-a XX:XX:XX:XX:XX:XX -81  48      Y  JP WPA(PSK/AES/AES) WPA2(PSK/AES/AES)
                  NETGEAR85-5GHz XX:XX:XX:XX:XX:XX -42  44      Y  JP WPA2(PSK/AES/AES)</pre>

&nbsp;

<h2>ディスク関連</h2>

このあたりはよく紹介されていて使う頻度が高いと思う

<h3>diskutil list (ディスク一覧を表示)</h3>

fdisk -l　的な。

<pre class="lang:default decode:true">$ diskutil list
/dev/disk0 (internal):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                         500.3 GB   disk0
   1:                        EFI EFI                     314.6 MB   disk0s1
   2:                 Apple_APFS Container disk1         500.0 GB   disk0s2

/dev/disk1 (synthesized):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      APFS Container Scheme -                      +500.0 GB   disk1
                                 Physical Store disk0s2
   1:                APFS Volume Macintosh HD            259.6 GB   disk1s1
   2:                APFS Volume Preboot                 46.1 MB    disk1s2
   3:                APFS Volume Recovery                512.8 MB   disk1s3
   4:                APFS Volume VM                      2.1 GB     disk1s4

/dev/disk2 (disk image):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        +4.1 TB     disk2
   1:                        EFI EFI                     209.7 MB   disk2s1
   2:                  Apple_HFS Time Machineバッ...     4.1 TB     disk2s2</pre>

&nbsp;

<h3>sudo diskutil mount （ディスクのマウント）</h3>

<pre class="lang:default decode:true">sudo diskutil mount -mountPoint &lt;&lt;path_to_mount_point&gt;&gt; &lt;&lt;device&gt;&gt;　　
</pre>

デバイス名は/dev/disk2s1とかそういった単位

&nbsp;

<h3>sudo diskutil unmount (ディスクのアンマウント)</h3>

<pre class="lang:default decode:true ">sudo diskutil unmount &lt;&lt;device&gt;&gt;</pre>

&nbsp;

&nbsp;

あとは思いついたら書く]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date><![CDATA[2018-11-11 18:33:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-11 09:33:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unique-commands-of-macos]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mac"><![CDATA[Mac]]></category>
		<category domain="post_tag" nicename="macos"><![CDATA[macOS]]></category>
		<category domain="post_tag" nicename="%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89"><![CDATA[コマンド]]></category>
		<category domain="post_tag" nicename="%e3%82%bf%e3%83%bc%e3%83%9f%e3%83%8a%e3%83%ab"><![CDATA[ターミナル]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-11-11-unique-commands-of-macos.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[9e4515395640c9dbe57e45308e6b843a24103834]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=231]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[macos-%e5%9b%ba%e6%9c%89cli-%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Go言語ちょっとだけ入門</title>
		<link>https://blog.killinsun.com/2018/11/getting-start-golang/</link>
		<pubDate>Sun, 25 Nov 2018 00:00:37 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=237</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>環境準備</h2>

VSCode上で適当なワークスペースを用意した。
今回は「/Users/{わたし}/Documents/Projects/golang_introduction
としてディレクトリを用意した。

<h3>golangのインストール</h3>

macOSを使用しているので、homebrewを使ってインストールする

<pre class="lang:default decode:true">$ brew info go
go: stable 1.11.1 (bottled), HEAD
Open source programming language to build simple/reliable/efficient software
https://golang.org
Not installed
From: /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/go.rb
==&gt; Requirements
Required: macOS &gt;= 10.10 ✔
==&gt; Options
--HEAD
    Install HEAD version
==&gt; Caveats
A valid GOPATH is required to use the `go get` command.
If $GOPATH is not specified, $HOME/go will be used by default:
  https://golang.org/doc/code.html#GOPATH

You may wish to add the GOROOT-based install location to your PATH:
  export PATH=$PATH:/usr/local/opt/go/libexec/bin
==&gt; Analytics
install: 91,529 (30d), 265,569 (90d), 943,528 (365d)
install_on_request: 64,960 (30d), 187,842 (90d), 594,605 (365d)
build_error: 0 (30d)

</pre>

&nbsp;

brewで入る最新は1.11.2だった。1.11自体が2018/08リリースと割と新しいものだったのでこのままインストール

<pre class="lang:default decode:true">$ brew install go</pre>

&nbsp;

VSCodeについては
.goファイルを作成してしまえばVSCodeからエクステンションのインストール案内が出るので
そのままインストール。

<h2>入門</h2>

<h3>GOPATHの設定</h3>

<pre class="lang:default decode:true ">export GOPATH=/Users/{わたし}/Documents/Project/golang_introduction/</pre>

golangはワークスペースプロジェクト単位で開発する。
基本的にコマンドやビルドを行う際にGOPATHを頼りに行うイメージかな？
ディレクトリ(=プロジェクト)毎にGOPATHを設定したい等のニーズに答えるために<a href="https://bitbucket.org/ymotongpoo/goenv">goenv</a>といったツールも用意されている。

<h3>Hello world</h3>

<pre class="tab-size:2 lang:go decode:true" title="hello_world.go">package main

import(
        "fmt"
)

func main() {
        fmt.Println("Hello world!")
}</pre>

<h4>実行</h4>

<pre class="lang:default decode:true">$go run hello_world.go
Hello world!</pre>

<h4>疑問：importしている「fmt」って何？</h4>

フォーマットから取ったパッケージ。
基本的にはC言語でいう「print」や 「scan」にあたる関数を提供する。

<h3>コメント</h3>

<pre class="lang:go decode:true ">// 1行コメント

/*
複数行コメント

*/</pre>

&nbsp;

<h3>import</h3>

<pre class="lang:go decode:true">import (
    "fmt"
    "math"
)</pre>

こっちも可

<pre class="lang:go decode:true">import "fmt"
import "math"</pre>

ただし、こちらは推奨されないらしい。

&nbsp;

<h3>exported name</h3>

golangでは名前の先頭が大文字のものは、外部から利用できる。

<pre class="lang:go decode:true">package main

import (
    "fmt"
)

func main() {
    fmt.Println("Hello world!")
}</pre>

この場合だとPrintlnがそれにあたる。

<h3>変数の定義</h3>

var で宣言して初期化する事が出来る。
型を明示的に指定する場合、intなどの型名は<strong>変数名の後</strong>に指定する。

<pre class="lang:go decode:true">var x int = 10
var y int = 20

//こっちも可能
var x,y int = 10,20
</pre>

文字列の場合はダブルクォーテーションで括る

<pre class="lang:go decode:true">var foo string = "bar"
fmt.Println(foo) //bar
</pre>

&nbsp;

また、上記より短い宣言もできる

<pre class="lang:default decode:true ">var foo = "bar"</pre>

varという初期化子をつけて変数に値を代入した場合、型を省略できる。
省略された変数の型は、代入された値によって自動的に割り当てられる。
（型推論）

他に、:=を使って宣言する方法がある。

<pre class="lang:go decode:true">foo2 := "bar"

var num1 = 10
num2 := 100</pre>

:= を使って宣言するのは型などをいい感じに認識してもらう「暗黙的宣言」という。
「暗黙的宣言」の場合は関数スコープ内でのみ利用が可能である。
つまり、関数の外では:=を使った暗黙的宣言はできない。

<h4>定数</h4>

最近のJavaScriptのように「const」をつけることで定数が宣言できる

<pre class="lang:go decode:true">const message = "hello?"

message = "Hi!" //エラー</pre>

定数（const）は、文字、文字列、boolean、数値でのみ使える。
定数の場合は　:= を使った宣言は利用できない。

<h4>ゼロ値</h4>

変数宣言時、何も値を指定しない場合、ゼロ値（zero value)が与えられる。
ゼロ値といっても数字の０（ゼロ）を入れるだけでなく、変数型によって異なる

<ul>
    <li>数値型の場合(int/float) ... 0</li>
    <li>bool型の場合... false</li>
    <li>string型の場合... "" (空文字列）</li>
</ul>

この辺りはnull判定のときなどに活用できそうだ。

<h3>関数,function</h3>

よくある感じでOK。引数を指定する場合は上述の通り型が後。

<pre class="lang:go decode:true">//func( [引数名] [型])　[戻り値の型] {}

func main() {
    calc(1,2) //3
}

func calc(a int, b int){
    var c int
    c = a + b
    fmt.Println(c)
}</pre>

<h4>マルチプルリザルト</h4>

golangの特徴で、関数が複数の戻り値を返す事ができる。

<pre class="lang:go decode:true">func main() {
    a, b := swap("hello", "world")
    fmt.Println(a, b)  // hello__x world~~y
}

func swap(x, y string) (string, string){
    x += "__x"
    y += "~~y"
    return x, y
}</pre>

<h3>if文</h3>

条件式は丸括弧（）で括らない。

<pre class="lang:go decode:true">func main() {
    evaluation("test","test") //a==b
    evaluation("test","hoge") //a!=b
}


func evaluation(a string, b string){

    if a==b {
        fmt.Println("a==b")
    }else{
        fmt.Println("a!=b")
    }
}</pre>

<h3>for文</h3>

よくあるfor文はこんな感じ。他の言語のように丸かっこ（）で括る必要はない点に注意

<pre class="lang:go decode:true">for i :=0; i &lt; count; i++ {
    fmt.Println(i)
}

//0
//1
//2
//3
//4
//5
//6
//7
//8
//9</pre>

他の言語でいうwhileっぽいやり方も出来る

<pre class="lang:go decode:true">var i = 0
for i &lt; count {
    i++ 
    fmt.Println(i)
}

//0
//1
//2
//3
//4
//5
//6
//7
//8
//9</pre>

<h4>無限ループ</h4>

<pre class="lang:go decode:true ">for {
  fmt.Println("forever!")
}</pre>

&nbsp;

<h3>Array, 配列</h3>

配列は固定長。長さを変える事ができない。

<pre class="lang:go decode:true">func main() {
    var a [2]string
    a[0] = "Captain"
    a[1] = "America"
    fmt.Println(a[0], a[1]) // Captain America
    fmt.Println(a) // [Captain America]

    primes := [6]int{2, 3, 5, 7, 11, 13}
    fmt.Println(primes) //[2 3 5 6 11 13]
}</pre>

個人的には変数そのものを出力するとカンマ区切りでなく
スペース区切りになる点が気になる

&nbsp;

<h3>スライス</h3>

こっちは可変長の配列だと思っていいらしい

<pre class="lang:go decode:true">func main() {

    names := [4]string{
        "John",
        "Paul",
        "George",
        "Ringo",
    }
    fmt.Println(names) // [Joh Paul George Ringo]

    a := names[0:2]
    b := names[1:3]
    fmt.Println(a, b) // [John Paul]  [ Paul George]  ...①

    b[0] = "XXX"
    fmt.Println(a, b)  // [John XXX] [ XXX George]　　...②
    fmt.Println(names) // [John XXX George Ringo]
}
</pre>

他の言語もそうなのかもしれないけど、スライスは以下のような形で切り取って扱う事が出来る

<table>
<tbody>
<tr>
<th>0</th>
<td>John</td>
<th>1</th>
<td>Paul</td>
<th>2</th>
<td>George</td>
<th>3</th>
<td>Ringo</td>
</tr>
</tbody>
</table>

①では、最初に０〜２を指定している。つまり、以下の範囲を指定したことになる。
つまり、John とPaulが出力対象

<table>
<tbody>
<tr>
<th>0</th>
<td>John</td>
<th>1</th>
<td>Paul</td>
<th>2</th>
</tr>
</tbody>
</table>

次に、１〜３を指定している。つまり、以下の範囲で、PaulとGeorgeが取扱の対象。

<table>
<tbody>
<tr>
<th>1</th>
<td>Paul</td>
<th>2</th>
<td>George</td>
<th>3</th>
</tr>
</tbody>
</table>

<h4>スライスは配列への参照のようなもの　（らしい）</h4>

<blockquote>スライスは配列への参照のようなものです。
スライスはどんなデータも格納しておらず、単に元の配列の部分列を指し示しています。
スライスの要素を変更すると、その元となる配列の対応する要素が変更されます。
同じ元となる配列を共有している他のスライスは、それらの変更が反映されます。</blockquote>

②で取り扱っているのがまさにその部分。　一度スライスを他の変数に代入し、他の編集の値を書き換えたとしても、大元のスライスにもその変更が反映される。

&nbsp;

疲れたので一旦ここまで

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date><![CDATA[2018-11-25 09:00:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-25 00:00:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[getting-start-golang]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="golang"><![CDATA[golang]]></category>
		<category domain="post_tag" nicename="golang"><![CDATA[golang]]></category>
		<category domain="post_tag" nicename="go%e8%a8%80%e8%aa%9e"><![CDATA[go言語]]></category>
		<category domain="post_tag" nicename="%e3%83%a1%e3%83%a2"><![CDATA[メモ]]></category>
		<category domain="post_tag" nicename="%e5%85%a5%e9%96%80"><![CDATA[入門]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_03b47b6e7fda2e7f5858f53dfda91885]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_231facb85eaf1ab92f06b12c1e32a42e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018-11-13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-11-25-getting-start-golang.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[2437eaede68ccf27cd3d9aac4d66a4ec8220f1f8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=237]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_cb7958b828efabb7bd96020c4e7a50a9]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9947911d2dc17ec4931e7b9120937eb0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[go%e8%a8%80%e8%aa%9e%e3%81%a1%e3%82%87%e3%81%a3%e3%81%a8%e3%81%a0%e3%81%91%e5%85%a5%e9%96%80]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>[樺沢紫苑 著] 学びを結果に変える アウトプット大全　を読了した</title>
		<link>https://blog.killinsun.com/2018/11/i-read-a-book-001/</link>
		<pubDate>Wed, 28 Nov 2018 16:04:49 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[<iframe style="width: 120px; height: 240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=killinsun02-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07FZWZPDS&amp;linkId=b72e192a8d04df7b99e9a6e0d79e67d9"></iframe>

前々から気になってて、駅の本屋でぱっと見かけて1500円程度だったので買ってみた。

&nbsp;

<!--more-->

<h2></h2>

まずはじめに断っておくと、この本を読んだのをきっかけに読了した事を簡単にまとめてみようと思った。
それくらい、初心者にはとっつきやすい本だった、とだけ。

<h2>どんな本か</h2>

本自体は分厚さに比べてページ数はそこまで無い。
その上、図や絵がかなり多めに配置されているので、慣れている人であれば１時間程度で読了すると思う。
私は３時間程度だったが・・・。

内容としては
「具体的に何からやろう」といったファーストステップやきっかけを探したい人向け。
ここに書いてある本の内容全て実行したらそりゃスーパーな人間になれるとは思うが、
並大抵の人間はこれ全て実施するガッツはない。

いくつか載っかっているHow toを掻い摘んでモチベーションを保つ、そんな本。
時折胡散臭い自己啓発チック満載のページと、著者のちょっぴり自画自賛な紹介部分があるのはご愛嬌か。

<h3>なるほどね、って思った所</h3>

とりあえずそのページのタイトルだけ記載しておく。
必ずしも「初めて知った内容」ではないし、どちらかというと
自分の経験に照らし合わせて「そういえばそうだよね」って所が強い。

<span style="font-size: 1rem;">08 雑談する ...　「長く話す」より「ちょくちょく話す」P.58
15 議論する ... 　必要なのは、入念な下準備と少しの勇気 P.72
</span>16 相談する ...　気持ちを誰かに話すだけで、心は軽くなる P.76
23 説明する ... 「意味記憶」から「エピソード記憶に変換」P.92

<strong>アウトプット力を高める７つのトレーニング法</strong>
その５　SNSに書く P.258
その６　ブログに書く P.262

<h2>読んでみて</h2>

まず、上にもあるようにSNSに対してかなりオープンで前向きに利用していこうという意思が感じられた。
SNSを使ってアウトプットするのはとても身近な事ではあるが、
面と向かって取り組もうとすると「炎上」だったり「マサカリ」に怯えて手を引っ込める人は確かに多い。

この本を読んで一番得られたのは「誰かに見せようと意識はするものの、いきなり１００％のものを仕上げる必要はない。まずは３０％でいいからやってみる」ということ。

こういったブログなんかも時折完璧を求めすぎてお蔵入りになっている事がよくあるので、
一旦の終着点を見据えて記事を書いたりするのが省エネで続きやすいのかな、と感じた。

&nbsp;

ここまでで大体２０分。　ふー。

<iframe style="width: 120px; height: 240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=killinsun02-22&amp;language=ja_JP&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B07FZWZPDS&amp;linkId=b72e192a8d04df7b99e9a6e0d79e67d9"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2018-11-29 01:04:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-28 16:04:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-read-a-book-001]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="%e3%82%a2%e3%82%a6%e3%83%88%e3%83%97%e3%83%83%e3%83%88"><![CDATA[アウトプット]]></category>
		<category domain="post_tag" nicename="%e5%ad%a6%e3%81%b3%e3%82%92%e7%b5%90%e6%9e%9c%e3%81%ab%e5%a4%89%e3%81%88%e3%82%8b-%e3%82%a2%e3%82%a6%e3%83%88%e3%83%97%e3%83%83%e3%83%88%e5%a4%a7%e5%85%a8"><![CDATA[学びを結果に変える アウトプット大全]]></category>
		<category domain="post_tag" nicename="%e6%a8%ba%e6%b2%a2%e7%b4%ab%e8%8b%91"><![CDATA[樺沢紫苑]]></category>
		<category domain="category" nicename="%e8%aa%ad%e6%9b%b8"><![CDATA[読書]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-11-29-i-read-a-book-001.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[a8fb6d450e92cad08c1635c00d21a02bb5341d43]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=251]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e6%a8%ba%e6%b2%a2%e7%b4%ab%e8%8b%91-%e8%91%97-%e5%ad%a6%e3%81%b3%e3%82%92%e7%b5%90%e6%9e%9c%e3%81%ab%e5%a4%89%e3%81%88%e3%82%8b-%e3%82%a2%e3%82%a6%e3%83%88%e3%83%97%e3%83%83%e3%83%88%e5%a4%a7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>android-sdkをCLIでインストールする際にハマった</title>
		<link>https://blog.killinsun.com/2018/12/i-stacked-by-installing-android-sdk-by-cli/</link>
		<pubDate>Mon, 03 Dec 2018 11:13:12 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=259</guid>
		<description></description>
		<content:encoded><![CDATA[新しければ良いってもんじゃないと改めて思い知らされる

<!--more-->

<pre class="lang:sh decode:true">$ ./sdkmanager
Exception in thread "main" java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema
    at com.android.repository.api.SchemaModule$SchemaModuleVersion.&lt;init&gt;(SchemaModule.java:156)
    at com.android.repository.api.SchemaModule.&lt;init&gt;(SchemaModule.java:75)
    at com.android.sdklib.repository.AndroidSdkHandler.&lt;clinit&gt;(AndroidSdkHandler.java:81)
    at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:73)
    at com.android.sdklib.tool.sdkmanager.SdkManagerCli.main(SdkManagerCli.java:48)
Caused by: java.lang.ClassNotFoundException: javax.xml.bind.annotation.XmlSchema
    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:583)
    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
    ... 5 more</pre>

そもそもJava自体ちゃんと動作していないように見えた。
この端末にインストールしたJavaはJava11(OpenJDK 11.01)
ちなみにbrew cask経由でインストールした。

<h3>環境</h3>

<ul>
    <li>macOS mojave</li>
    <li>brew cask経由でOpenJDK(11)をインストール</li>
    <li>android-sdk のzipを公式からダウンロード。
/usr/local/opt/android-sdk/　に配置</li>
</ul>

<h3>Java8で動いた</h3>

android-sdk入れる場合って基本はAndroid Studioをインストールと同時に行うパターンが多くてRequirementsとかにパットたどり着けなかったんだけど、Java11ではなく、Java8で入れてみたら難なく動いたって話。

<pre class="lang:default decode:true ">$ brew cask install homebrew/cask-versions/java8
$ export JAVA_HOME=$(/usr/libexec/java_home -v 1.8.0)
$ /usr/libexec/java_home
$ java -version
java -version
java version "1.8.0_192"
Java(TM) SE Runtime Environment (build 1.8.0_192-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.192-b12, mixed mode)

$ ./sdkmanager 
Warning: File /Users/ryouta/.android/repositories.cfg could not be loaded.
[=======================================] 100% Computing updates...
$ ./sdkmanager --list
Warning: File /Users/ryouta/.android/repositories.cfg could not be loaded.
Installed packages:=====================] 100% Computing updates...
  Path    | Version | Description              | Location
  ------- | ------- | -------                  | -------
  tools   | 26.1.1  | Android SDK Tools 26.1.1 | tools/

Available Packages:
  Path                                                                                     | Version      | Description
  -------                                                                                  | -------      | -------
  add-ons;addon-google_apis-google-15                                                      | 3            | Google APIs
  add-ons;addon-google_apis-google-16                                                      | 4            | Google APIs
  add-ons;addon-google_apis-google-17                                                      | 4            | Google APIs
  add-ons;addon-google_apis-google-18                                                      | 4            | Google APIs
  add-ons;addon-google_apis-google-19                                                      | 20           | Google APIs
  add-ons;addon-google_apis-google-21                                                      | 1            | Google APIs
  add-ons;addon-google_apis-google-22                                                      | 1            | Google APIs
  add-ons;addon-google_apis-google-23                                                      | 1            | Google APIs
  add-ons;addon-google_apis-google-24                                                      | 1            | Google APIs
  add-ons;addon-google_gdk-google-19                                                       | 11           | Glass Development Kit Preview
  build-tools;19.1.0                                                                       | 19.1.0       | Android SDK Build-Tools 19.1
~~~~~略~~~~~</pre>

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date><![CDATA[2018-12-03 20:13:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-03 11:13:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-stacked-by-installing-android-sdk-by-cli]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="android-sdk"><![CDATA[android-sdk]]></category>
		<category domain="category" nicename="android%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[Androidアプリ開発]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="java11"><![CDATA[Java11]]></category>
		<category domain="post_tag" nicename="java8"><![CDATA[Java8]]></category>
		<category domain="post_tag" nicename="sdkmanager"><![CDATA[sdkmanager]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-12-03-i-stacked-by-installing-android-sdk-by-cli.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[2b914ca5b981c13c615d06a0a4f9a04304fbdcb9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=259]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[android-sdk%e3%82%92cli%e3%81%a7%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e3%81%99%e3%82%8b%e9%9a%9b%e3%81%ab%e3%83%8f%e3%83%9e%e3%81%a3%e3%81%9f]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>エンジニアの登壇を応援する会_忘年LTで登壇してきた</title>
		<link>https://blog.killinsun.com/2018/12/i-joined-year_end_lt-and-gave-a-presentation-at-engineers_lt/</link>
		<pubDate>Fri, 28 Dec 2018 01:47:34 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>お疲れ様でした。</h2>

<a href="https://techplay.jp/event/705867" target="_blank" rel="noopener noreferrer">エンジニアの登壇を応援する忘年LT</a>

今年最後の締めくくりとして、外部コミュニティで登壇発表という形で、
私の社内活動実績を簡単にお話させて頂きました。
今まで身内・内輪・組織内での登壇経験はあるものの、
<strong>全く知らない人の前で話すのはバンド活動のライブ以外では初めて</strong>なのでとても新鮮でした。
そんな中、当日は70名以上の方にお集まりいただき、良いフィードバックを頂きました。
本当にありがとうございます。

<h2>どんな内容を話したのか</h2>

<script async class="speakerdeck-embed" data-id="4ee1fdcd2ef44bd68945203068d16fc4" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
お題は<strong>"今年のアウトプットを振り返る"</strong>ということで、
他の登壇者様の<em>「ブログ」</em>や<em>「執筆」</em>、<em>「LT登壇」</em>といったものとは
少し違った視点からお話がしてみたいと思い、社内に対してのアウトプットも十分な実績だということで
私が主催した社内勉強会が今年から本格化し、事務局設立して動き出すまでの内容にしました。

<h2>リハーサル大事。本番前に更なる成長が出来る。</h2>

2日前に別所でスピーカー（登壇者）を対象にしたリハーサル会を開いていただきました。
ここでコミュニティのadminsの方々やスピーカーの方と初対面し、お互いにLTし合います。
身内で話す際に知らないうちに根付いてしまった悪い癖に気づける良いフィードバックをたくさんもらいました。

例えば、私の職場では<strong>全会議室に大画面モニタがある</strong>のでプロジェクタ投影する時ほど
<strong>背景色と文字色の相性の悪さを意識せずとも読んでもらう事が出来る</strong>のですが、
<strong>今回の場合はそうもいきません</strong>。

<img class="alignnone wp-image-268" src="https://blog.killinsun.com/wp-content/uploads/2018/12/example2.jpg" alt="" width="618" height="343" />

また、今までは
スライド上部に　問いかけや課題となる文章
⇒　画面下部に　それに対する回答や、大事な事、推したい事
を記載する資料がとても多かったんですが
「大事な事はスライドの下部に書かない方がいい。（低い位置の文字は聴衆に見えない）」というのは、
今までと違った環境で発表し、フィードバックを得る事をしないと気付く事が出来なかった点といえます。

<img class="alignnone wp-image-267" src="https://blog.killinsun.com/wp-content/uploads/2018/12/example1.png" alt="" width="621" height="344" />

こういった、「本番前に資料や発表をよりよくする準備が出来る」のはエンジニアの登壇を応援する会ならではの
活動だと思っています。　私がここで初めてLTをする事にしたのも、
前回出席した「執筆の技術を勉強する会」にて　「こういったリハーサル会があるからかなり改善した」というお話あってでした。

<h2>社外での勉強会・LTではリアルな感想が得られる</h2>

社内で勉強会をする際、ツイッターでハッシュタグをつけてリアルタイムに
実況するような文化はありません。　社内勉強会を開催しても大多数がそうだと思います。
（社内SNSみたいなものがあれば別ですが・・・）

社外で発表して一番の気づきは　ツイッターでリアルタイムに自分の発表に対する
リアクションが得られる。

&nbsp;

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">きりんさん、メタラーっぽいIDだ・・・
<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— yumechi(残り1秒でもACに出ろ) (@__yumechi) <a href="https://twitter.com/__yumechi/status/1078239078884077568?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">1年間社内勉強会を主催・企画してみて
ワタシも小規模ながらやってるので興味深いっす <a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— beppu01 (@beppu01) <a href="https://twitter.com/beppu01/status/1078239368064552960?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">なぜ社内勉強会か？
１。与える側になりたかった
２。いきなり外部はハードルが高かった
３。社内を活性化<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— 鈴木セシル(サーバーサイドエンジニア) (@suzuki_cecil_) <a href="https://twitter.com/suzuki_cecil_/status/1078239516425515008?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">３番本当に大事！！！<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— 鈴木セシル(サーバーサイドエンジニア) (@suzuki_cecil_) <a href="https://twitter.com/suzuki_cecil_/status/1078239559475912704?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">まずは社内勉強会って、カイゼン・ジャーニーでもあったけど、とっかかりとしては最高なのでは？！ <a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— えひやん (@efyaan) <a href="https://twitter.com/efyaan/status/1078239595798482944?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">社内勉強会っていいのかなー？（若干、モチベーション、目的の持ち方が違うのかも）
<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— yumechi(残り1秒でもACに出ろ) (@__yumechi) <a href="https://twitter.com/__yumechi/status/1078240096787152897?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">LT5分
首なしきりんさんでスタート。
社内勉強会を50人規模4回やったらどえらいことになった。
ワンストップ勉強会の方でやるネタもあるよ。
社内勉強会のいいところ。
<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— おやかた@二日目（日）ト26a (@oyakata2438) <a href="https://twitter.com/oyakata2438/status/1078239417859338240?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">人は楽しそうな集団に興味を持つ。興味を持つ人を取り込んだ。引っ張ってっもらうのを好むし、引っ張りを「与える」。 大きくするためにアピールした。上司、他の部署へ。事務局ができた。明確なビジョンを提示して、安心させた。評価された。自分自身が成長できたし、主体的にやった。<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— おやかた@二日目（日）ト26a (@oyakata2438) <a href="https://twitter.com/oyakata2438/status/1078240182485172224?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">「楽しそうな集団に興味を持つ」これは真実だと思うけど、往往にして、酸っぱいブドウに陥るんだよなあ。 <a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— Ghostface melOn (鳥類の姿) (@FreeFromTheSoul) <a href="https://twitter.com/FreeFromTheSoul/status/1078240234951725056?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet" data-lang="ja">
<p dir="ltr" lang="ja">どんどん周りを巻き込んで人数が多くなってきたとき、明確なビジョンがあれば事務局をつくってみんなで動けるようになるよね、っていうのは、社内勉強会をやってDOERAIことがおきて初めてわかった、とか！<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>
— えひやん (@efyaan) <a href="https://twitter.com/efyaan/status/1078240246272188416?ref_src=twsrc%5Etfw">2018年12月27日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

※ちなみに私の開催した社内勉強会も最初は２～３人しか参加しないっていったことがありました・・・

そして「今まで自分の中ではこう思ったから発表した」事に対しても、ポジティブな意見もあれば
「但し、こういった場合においてはうまく行かないよね」といった、
違った視点からの意見も得られるのでこれはとてもデカイ。

これについては懇親会の時に、<a href="https://twitter.com/nagashi_ma_w">ながしー(@nagashi_ma_w)</a>さんが
「これがまた新たなインプットになっていく」とコメントしていたのは印象的だった。

<h2>最後に</h2>

今年最後に新しい一歩を踏み出せて締めくくれる素晴らしい機会を与えてくださった
<a href="https://techplay.jp/community/engineers-lt">エンジニアの登壇を応援する会</a>　の皆様
そして当日ご参加くださった皆様、どうもありがとうございました。

<h2>リンク</h2>

<ul>
    <li>エンジニアの登壇を応援する会</li>
</ul>

興味がある人は以下slackにもレッツジョイン

<ul>
    <li><a href="http://bit.ly/elt-slack">エンジニアの登壇を応援する会（slack workspace)</a></li>
</ul>

&nbsp;

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2018-12-28 10:47:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-28 01:47:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-joined-year_end_lt-and-gave-a-presentation-at-engineers_lt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="engineers_lt"><![CDATA[#engineers_lt]]></category>
		<category domain="post_tag" nicename="lt"><![CDATA[LT]]></category>
		<category domain="post_tag" nicename="%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%8b%e3%82%a2%e3%81%ae%e7%99%bb%e5%a3%87%e3%82%92%e5%bf%9c%e6%8f%b4%e3%81%99%e3%82%8b%e4%bc%9a"><![CDATA[エンジニアの登壇を応援する会]]></category>
		<category domain="category" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e5%bf%98%e5%b9%b4lt"><![CDATA[忘年LT]]></category>
		<category domain="post_tag" nicename="%e7%99%bb%e5%a3%87"><![CDATA[登壇]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_3b7f7be3d4d19421d40354d1a5e828b5]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe id="talk_frame_483814" src="//speakerdeck.com/player/4ee1fdcd2ef44bd68945203068d16fc4" width="812" height="609" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_3b7f7be3d4d19421d40354d1a5e828b5]]></wp:meta_key>
		<wp:meta_value><![CDATA[1545960012]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6a43d04db90496ad54485ca6c370bfca]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d5a346a046a253363394a4ace857adac]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-12-28-i-joined-year_end_lt-and-gave-a-presentation-at-engineers_lt.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[06f8e9ce80baf9b74d3af8aea245fca3a5a2760f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=265]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%8b%e3%82%a2%e3%81%ae%e7%99%bb%e5%a3%87%e3%82%92%e5%bf%9c%e6%8f%b4%e3%81%99%e3%82%8b%e4%bc%9a_%e5%bf%98%e5%b9%b4lt%e3%81%a7%e7%99%bb%e5%a3%87%e3%81%97%e3%81%a6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>2018年振り返り</title>
		<link>https://blog.killinsun.com/2018/12/a-looking-back-on-the-2018/</link>
		<pubDate>Mon, 31 Dec 2018 02:52:24 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
今年の振り返りをKPTでやるよ
<!-- /wp:paragraph -->

<!-- wp:separator -->

<hr class="wp-block-separator"/>

<!-- /wp:separator -->

<!-- wp:more -->
<!--more-->
<!-- /wp:more -->

<!-- wp:heading -->

<h2>Keep</h2>

<!-- /wp:heading -->

<!-- wp:list -->

<ul><li>AWS Solution Architect Associateに受かった。SAPはちょっと後回し。</li><li>2017年に開催した社内勉強会において事務局が設立され、私がいなくても開催出来るようなメソッドになった。これは継続してくれるはず。</li><li>転職が決まった（2019年2月半ば予定）　新天地でもパフォーマンスを維持する。</li><li>外部勉強会にてLT登壇した。これは今後も続けたい</li><li>4月からほぼ毎月ブログを更新するようになった。　全て技術系ではないものの、続いている良さ。NAS死亡により消失した分含めれば今年1月から続いていることになる</li><li><strong>婚約しました</strong></li></ul>

<!-- /wp:list -->

<!-- wp:heading -->

<h2>Problem</h2>

<!-- /wp:heading -->

<!-- wp:list -->

<ul><li>相変わらず英語力が皆無。　必要性を感じながらも2017年より学習頻度が下がった</li><li>技術的インプットが少なかったように感じる。　強いて言うなら仕事で使ったNode.jsくらいか？　まぁあとはNetBackupあたりだが…</li><li>で、結局何をインプットしたの？アウトプットできるものって何？ってなると他にそんなやってたような物も大してなかったりする。　つまり今年は今まで蓄積してきたことから捻出したにすぎなかった。</li></ul>

<!-- /wp:list -->

<!-- wp:heading -->

<h2>Try</h2>

<!-- /wp:heading -->

<!-- wp:list -->

<ul><li>年末にちょっとかじりだしていたKotlinを使ってアプリを作ります。　ネタはあるので後は動かすのみ。</li><li>7月のTOEICを目標に英語をそろそろやります。　目標はまず600点</li><li>KindlePaperwhite買ったので月3冊、ジャンル問わず本を読みます。</li><li>外部勉強会の主催者側に立ちます</li><li>登壇はまず3回を目標に</li></ul>

<!-- /wp:list -->

<!-- wp:paragraph -->

<!-- /wp:paragraph -->

<!-- wp:paragraph -->
前半に詰め込みすぎた間があるけどこういうのは勢いだ、勢い。<br>今年もお世話になりました。良いお年を。
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
/以上
<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<!-- /wp:paragraph -->

<!-- wp:paragraph -->

<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date><![CDATA[2018-12-31 11:52:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-31 02:52:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[a-looking-back-on-the-2018]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="kpt"><![CDATA[KPT]]></category>
		<category domain="post_tag" nicename="%e6%8c%af%e3%82%8a%e8%bf%94%e3%82%8a"><![CDATA[振り返り]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2018-12-31-a-looking-back-on-the-2018.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[dcc9b9b65434ffcacdb30c919e3142da446ed235]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=278]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[2018%e5%b9%b4%e6%8c%af%e3%82%8a%e8%bf%94%e3%82%8a]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>RecyclerView Adapter 一つに対して複数のViewHolderを持つリストを作成する</title>
		<link>https://blog.killinsun.com/2019/01/build-a-list-having-multipule-viewholders-by-once-recyclerview-with-kotlin/</link>
		<pubDate>Sat, 05 Jan 2019 08:03:37 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=286</guid>
		<description></description>
		<content:encoded><![CDATA[Kotlin でAndroidアプリ開発をはじめました。
まず、LegacyとなったListViewの代わりにRecyclerViewというのが新しく用意されているとの事で触ってみました。
ちゃんとしたオブジェクト指向でコードを書くのはかなり久々な事と、
AdapterとHolder、レイアウトファイルの関連が掴めていなかったのもあり、
理解に至るまで苦しみました。
後日順を追ってKotlinによるAndroid開発のメモは残しておきますが、この記事は先に残しておこうと思います。

<!--more-->

<h2>やりたいこと：Adapter一つに対して複数のViewHolderを持つRecyclerViewを作る</h2>

<img class="alignnone size-full wp-image-320" src="https://blog.killinsun.com/wp-content/uploads/2019/01/51b6bf0d5e7ff0bc5acfbd65a2865058-1.png" alt="" width="400" height="809" />

<img class="alignnone wp-image-319" src="https://blog.killinsun.com/wp-content/uploads/2019/01/a55976b11b7ed6d42af797f1c9061c07.png" alt="" width="394" height="793" />

例えば、RecyclerViewのアイテム一覧の一番最後は「＋」アイコンで
要素の追加が出来るようなActivityを用意します。

ポイントとなるのは以下の通りです。

<h3>onCreateViewHolder</h3>

<ul>
<li>ViewTypeで一番最後か、そうでないかを判断し、読み込むレイアウトファイルを使い分けます</li>
<li>予め用意したViewHolderクラスのスーパークラスにあたる RecyclerView.ViewHolder　を戻り値で返します。サブクラス（用意したViewHolderクラス)は返しません</li>
</ul>

<h3>onBindViewHolder</h3>

<ul>
<li>引数のPositionから一番最後か、そうでないかを判断し、読み込むViewHolderを使い分けます</li>
<li>RecyclerView.ViewHolderを引数として待ち受け、読み込むViewHolderに従ってキャストします。
> この時厳密に読み込むViewHolderが一致していないとキャストが出来なかったり、ウィジェットの要素がNullになって落ちるので判断する際は注意する。</li>
</ul>

<h2>レイアウトファイル(xml file)</h2>

<h3>RecyclerViewを表示するアクティビティ用レイアウトファイル (activity_new_post.xml)</h3>

後述する[A]及び[B]を組み合わせたものを期待しています。

<pre class="lang:default decode:true">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent" tools:layout_editor_absoluteY="81dp"&gt;

    &lt;android.support.v7.widget.RecyclerView
            android:id="@+id/addRecyclerView"
            android:layout_width="match_parent"
            android:layout_height="545dp"
            android:layout_marginTop="8dp"
            app:layout_constraintTop_toTopOf="parent" app:layout_constraintStart_toStartOf="parent"
            android:layout_marginStart="8dp" app:layout_constraintEnd_toEndOf="parent" android:layout_marginEnd="8dp"/&gt;
    &lt;Button
            android:id="@+id/btnAdd"
            android:text="Post"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp"
            app:layout_constraintBottom_toBottomOf="parent" android:layout_marginTop="8dp"
            app:layout_constraintTop_toBottomOf="@+id/addRecyclerView" app:layout_constraintStart_toStartOf="parent"
            android:layout_marginStart="8dp" app:layout_constraintEnd_toEndOf="parent" android:layout_marginEnd="8dp"/&gt;
&lt;/android.support.constraint.ConstraintLayout&gt;</pre>

&nbsp;

<h3>[A]RecyclerViewのアイテム一つを表すレイアウトファイル (layout_new_item_card.xml)</h3>

CardViewの中にEditTextとImageButtonをおいてみました。予め、専用の画像等は適切なフォルダに入れておいてください。 Image Buttonの使い方を調べておきましょう。

<pre class="lang:default decode:true">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
                                             xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
                                               android:layout_height="wrap_content"
                                               xmlns:app="http://schemas.android.com/apk/res-auto"&gt;

        &lt;android.support.v7.widget.CardView
            android:id="@+id/android_layout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:cardBackgroundColor="@android:color/white"&gt;

            &lt;android.support.constraint.ConstraintLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"&gt;

                &lt;EditText
                        android:id="@+id/edtFlowerName"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        android:inputType="textPersonName"
                        android:hint="花名を入力"
                        android:ems="20" /&gt;

                &lt;ImageButton
                        android:id="@+id/ibtnCamera"
                        android:layout_width="wrap_content"
                        android:layout_height="wrap_content"
                        app:srcCompat="@android:drawable/ic_menu_camera"
                        app:layout_constraintTop_toBottomOf="@+id/edtFlowerName" /&gt;
        

            &lt;/android.support.constraint.ConstraintLayout&gt;
        &lt;/android.support.v7.widget.CardView&gt;
&lt;/android.support.constraint.ConstraintLayout&gt;</pre>

&nbsp;

<h3>[B]RecyclerViewの一番最後の要素に表示するレイアウトファイル (layout_add_button.xml)</h3>

Image Buttonで＋アイコンのみ配置しています

<pre class="lang:default decode:true">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
                                             xmlns:app="http://schemas.android.com/apk/res-auto"
                                             xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
                                             android:layout_height="wrap_content"&gt;

    &lt;ImageButton
            android:id="@+id/ibtnItemAdd"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" app:srcCompat="@android:drawable/ic_menu_add"
            app:layout_constraintEnd_toEndOf="parent"
            android:layout_marginEnd="8dp" app:layout_constraintStart_toStartOf="parent"
            android:layout_marginStart="8dp" android:layout_marginTop="8dp" app:layout_constraintTop_toTopOf="parent"
            android:layout_marginBottom="8dp" app:layout_constraintBottom_toBottomOf="parent"/&gt;
&lt;/android.support.constraint.ConstraintLayout&gt;</pre>

<h2>Holder</h2>

<h3>ViewHolder A (NewPostViewHolder.kt)</h3>

<pre class="lang:default decode:true">package com.killinsun.app.ｒecyclepractice

import android.support.v7.widget.RecyclerView
import android.view.View
import android.widget.EditText
import android.widget.ImageButton

class NewPostViewHolder(view: View) : RecyclerView.ViewHolder(view) {

    // 最後の行以外の場合はこっちを読み込む。　
    val edtFlowerName: EditText? = view.findViewById(R.id.edtFlowerName)
    val ibtnCamera: ImageButton? = view.findViewById(R.id.ibtnCamera)


}</pre>

<h3>ViewHolder B (NewItemViewHolder.kt)</h3>

<pre class="lang:default decode:true">package com.killinsun.app.recyclerpractice

import android.support.v7.widget.RecyclerView
import android.view.View
import android.widget.ImageButton

class NewItemViewHolder(view: View) : RecyclerView.ViewHolder(view){

    // 最後の行だった場合はこっちを読み込む
    val ibtnItemAdd: ImageButton = view.findViewById(R.id.ibtnItemAdd)
}</pre>

&nbsp;

<h2>Adapter(NewPostAdapter.kt)</h2>

<pre class="lang:default decode:true">package com.killinsun.app.recyclepractice

import android.support.v7.widget.RecyclerView
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ArrayAdapter
import kotlinx.android.synthetic.main.layout_new_item_card.view.*

class NewPostAdapter(private val itemList:ArrayList&lt;Int&gt;)
    : RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;(){

    override fun getItemViewType(position: Int) : Int{
       return if(position == itemList.size) 0 else 1  // ①
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {

        val layoutInflater = LayoutInflater.from(parent.context)
        val view: View　　// ②
　　　
　　　　　　　// ③
        if(viewType == 0){
            //最後の行の場合は追加ボタンレイアウトを読み込む
            view = layoutInflater.inflate(R.layout.layout_add_button, parent, false)
            return NewItemViewHolder(view)
        }else {
            //最後の行以外の場合はそのままカードを読み込む
            view = layoutInflater.inflate(R.layout.layout_new_item_card, parent, false)
            return NewPostViewHolder(view)
        }

    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
　　　　　　　// ④
        if(position == itemList.size){
            val myHolder: NewItemViewHolder = holder as NewItemViewHolder
            myHolder.ibtnItemAdd.setOnClickListener{
                Log.v("test","Add button clicked!!!")
                itemList.add(position+1)
                notifyItemInserted(position + 1)
            }
        }else {
            val myHolder: NewPostViewHolder = holder as NewPostViewHolder
            myHolder.ibtnCamera?.setOnClickListener {
                Log.v("test", "Camera button clicked!!!")
            }
        }

    }

    override fun getItemCount(): Int{
        return itemList.size + 1　　// ⑤
    }

}

</pre>

<h3>①</h3>

getItemViewメソッドでポジションを受け取り、用意したitemListとサイズが一致（＝与えられた要素の位置が最終行）の場合のみ0を返却し、それ以外の行（＝与えられた要素の位置が最終行以外）の場合は、1を返却します。

<h3>②</h3>

予め View型のオブジェクトを用意しておきます。

<h3>③</h3>

getItemViewTypeで得られた戻り値（0 or 1)を基に判断を進めます。　上述の通り0の場合は最終行なのでそれ用のレイアウトファイルを layoutInflaterメソッドにより読み込み、②で宣言したViewオブジェクトに代入します。その後、メソッドとしてViewHolderクラスを戻り値として返して終了します。
この時返却するViewHolderクラスは、要素に応じたものです。
最終行以外の場合も、読み込むレイアウトファイルと戻り値のViewHolderクラスが違うだけで、やっていることは一緒です。

<h3>④</h3>

これまでと同様に、今回はpositionの値によって最終行かそうでないかを判断しています。
myHolderに対しては、最終行だったら引数として読み込まれた holder（RecycleView.ViewHolder型)を NewItemViewHolder型にキャストといった処理をしています。最終行以外の場合も、相応の処理を行っています。
また、この時別々のクラス型にキャストしてあげる事で、ViewHolder内で宣言したウィジェット（例えば最終要素の場合は＋ボタン）のsetOnClickListenerにアクセス出来るようになっています。

ちなみに、今回は＋ボタンを押された際にRecyclerViewの要素が１つ増える処理が記載されています。

<h3>⑤</h3>

おまじないです。　このRecyclerViewは要素数＋１は常に「＋ボタン」になっています。

<h2>Activity</h2>

<pre class="lang:default decode:true">package com.killinsun.app.recyclerpractice

import android.os.Bundle
import android.support.v7.app.AppCompatActivity
import android.support.v7.widget.LinearLayoutManager
import kotlinx.android.synthetic.main.activity_new_post.*

class NewPostActivity : AppCompatActivity(){

    override fun onCreate(savedInstanceState: Bundle?){
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_new_post)

        var listItems: ArrayList&lt;Int&gt; = arrayListOf(0)

        addRecyclerView.layoutManager = LinearLayoutManager(this)
        addRecyclerView.adapter = NewPostAdapter(listItems)

    }
}</pre>

今回のアクティビティではユーザの操作によってRecyclerViewの要素が増える事を想定したものの為、Adapterに渡す配列はInt型で１要素のみを渡しています。

&nbsp;

<h2>やってみて</h2>

ココ最近のAndroidアプリ開発は右も左も分からないまま突っ込んで、ようやくAdapterとHolderの仕組みが少し理解できたかなという気持ちです。
最初は戻り値となるViewHolderをサブクラス（NewItemViewHolder)に指定してたりして、「どうやってもう片方のViewHolderの受け取るんだよ」って躓いたりしました。スーパークラスにしておけばいいんですね・・・。

正直、上記の記述がベストプラクティスだとは思っていませんし、改善の余地があるかと思いますが、
ひとまず「動くもの」を目指して作るのは大事な事だと思っています。
その上でリファクタリングして更に理解を深められたらいいな。

いずれにしてもAdapterにあまり処理を書きたくないと思っているので、どこに移動させるのがベストか、
意見がありましたらツイッターでもコメントでもフィードバックいただけると嬉しいです。

<h2>参考</h2>

<blockquote>
<ul>
    <li><a href="https://stackoverflow.com/questions/26245139/how-to-create-recyclerview-with-multiple-view-type">How to create RecyclerView with multiple view type?</a></li>
    <li><a href="https://qiita.com/ijichi_y/items/0c1a463057f618e3eff3#adapter">RecyclerViewのヘッダ、フッタ、セクション</a></li>
    <li><a href="https://qiita.com/Todate/items/297bc3e4d0f3d2477ed3">KotlinでRecyclerViewを使ったリスト表示を行う</a></li>
</ul>
</blockquote>

&nbsp;

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date><![CDATA[2019-01-05 17:03:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-05 08:03:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[build-a-list-having-multipule-viewholders-by-once-recyclerview-with-kotlin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="android%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[Androidアプリ開発]]></category>
		<category domain="category" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="multiple-viewholder"><![CDATA[multiple ViewHolder]]></category>
		<category domain="post_tag" nicename="recyclerview"><![CDATA[RecyclerView]]></category>
		<category domain="post_tag" nicename="recyclerview-adapter"><![CDATA[RecyclerView.adapter]]></category>
		<category domain="post_tag" nicename="viewholder"><![CDATA[ViewHolder]]></category>
		<category domain="post_tag" nicename="%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[アプリ開発]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[classic-editor-remember]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c2f583973f487adc6ddb7f4726d5080f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-01-05-build-a-list-having-multipule-viewholders-by-once-recyclerview-with-kotlin.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[f65609b1b25928a2016f037c088e7fb9746222fb]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=286]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[recyclerview-adapter-%e4%b8%80%e3%81%a4%e3%81%ab%e5%af%be%e3%81%97%e3%81%a6%e8%a4%87%e6%95%b0%e3%81%aeviewholder%e3%82%92%e6%8c%81%e3%81%a4%e3%83%aa%e3%82%b9%e3%83%88%e3%82%92%e4%bd%9c%e6%88%90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>まだWordPress5.xのエディタで消耗しているの？</title>
		<link>https://blog.killinsun.com/2019/01/have-you-been-still-tired-of-new-wordpress-editor/</link>
		<pubDate>Sun, 06 Jan 2019 05:36:18 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[Gutenbergよ、お前とは仲良くなれそうにない

Wordpress5.0にアップグレードしたらとんでもないことになった。
エディタが全く使い物にならなくなってしまった。
こんな効率の悪い状態で技術ブログに時間を費やしたくないので、以前から考えていたVS CodeでMarkdownを書いて、Wordpressにそのまま投稿出来る仕組みを準備した。
<!--more-->

<h2><a id="1">第一段階：Markdownで投稿出来るようにする</a></h2>

<h3>JetPackプラグインのインストール</h3>

<img class="alignnone size-full wp-image-334" src="https://blog.killinsun.com/wp-content/uploads/2019/01/79dd5ec551ac7de7c2219e11829810d5.png" alt="" width="500" height="356" />

JetPackプラグインっていろいろあるけど、とりあえずこいつを入れておけばいいです。
やりたいことはMarkdownで投稿出来るようにする事だけど、
他に色々機能がついてきて速度低下がちょっと気になる。この辺りは顕著に見られたらチューニングしていく。

<h3>ユーザ登録</h3>

ちなみに入れただけでは使えません。
Wordpressのアカウントを持っていればそれ経由で登録出来るのでやっておきましょう。
そんなに難しい事はなかったはず。

<h3>Markdownの有効化</h3>

ダッシュボードから JetPack -&gt; 設定　にあります

<img class="alignnone size-full wp-image-337" src="https://blog.killinsun.com/wp-content/uploads/2019/01/1dc885aaf35551a282e9f23db56348ee.png" alt="" width="700" height="404" />

<h3>動作確認</h3>

以下の文章をコピペで貼り付けてみる

<pre><code class="language-md"># Header1
## Header 2

**bold**
*Italic*

- a
- b
- c

1. 001
2. 002
3. 003
</code></pre>

ちなみにエディタは「ビジュアルエディタ」ではなく、「コードエディタ」で貼り付けたほうがうまくいきやすいです。
<img class="alignnone size-full wp-image-340" src="https://blog.killinsun.com/wp-content/uploads/2019/01/8361d7ea3c899cee0bcf825ad40c5162-1.png" alt="" width="700" height="362" />

<h2><a id="2">第二段階：Crayon SyntaxHighlighterを使う(必要な人のみ)</a></h2>

この状態だと　Markdown書式でソースコードを書いてもスタイリッシュになりません。
元々Crayon SyntaxHighlighterを使っているので、そのまま使い続けます。
(JetPackプラグインとも相性が良いんだってさ)

<h3>Crayon SyntaxHighlighterプラグインのインストール</h3>


<img class="alignnone size-full wp-image-341" src="https://blog.killinsun.com/wp-content/uploads/2019/01/6df80f87be69dd47ccc7ba3eded82e1d.png" alt="" width="227" height="166" />
こいつ(Crayon SyntaxHighlighter) を入れてね。

<h3>特殊文字のエスケープ解除</h3>

この状態で

<pre><code class="language-md">```html

 
&lt;h1&gt;It works!&lt;/h1&gt;
_```

</code></pre>

テキストを書いても「＜」や「＞」がエスケープされてしまい、正常に表示されない場合があります。

<pre><code class="language-html">&amp;lt;title&amp;gt; hello world &amp;lt;/title&amp;gt;
&amp;lt;h1&amp;gt; It works!&amp;lt;/h1&amp;gt;
</code></pre>

そういった場合はCrayon Syntax Highlighterのプラグインにちょっと手を加えて上げる。

<h4>プラグインの編集方法</h4>

WEB管理画面から編集出来ます。
ダッシュボード -> プラグイン -> プラグイン編集

ページ内右上の「編集するプラグインを選択」にて「Crayon SyntaxHighlighter」を選んで「選択」をクリック。

以下、２つのファイルを編集してください。

<h4>crayon_formatter.class.php</h4>

550行目付近の処理をコメントアウトします。

<pre><code class="language-php">/* Convert &amp;lt;, &amp;gt; and &amp;amp; characters to entities, as these can appear as HTML tags and entities. */
if ($escape) {
//$code = CrayonUtil::htmlspecialchars($code);
}
</code></pre>

<h4>langs/default/operator.txt</h4>

※フォルダの中に入っているのでたどっていく

以下を削除します

<pre><code class="language-default">=&amp;amp;
&amp;amp;=
&amp;amp;&amp;amp;
</code></pre>

<h2><a id="3">第三段階：VSCode -> Github -> Wordpressで継続的デプロイ環境にする</a></h2>

ここからが本番。　Githubに記事投稿用のリポジトリを用意しておき、masterブランチにpushするとwordpressに自動で投稿してくれる仕組みをセットアップします。

<h3>事前準備</h3>

<ul>
<li>githubでリポジトリを作成</li>
<li>リポジトリに対して何らかのデータ（README.mdがお勧め）を作成しておき、initial commitをしておく。</li>
</ul>

<h3>パーソナルアクセストークン(Personal access tokens)の作成</h3>

Githubにてトークンを生成します。

Settings -> Developper Settings -> Personal access tokensでトークンを作成する。

（Generate Token)から。
<img class="alignnone size-full wp-image-342" src="https://blog.killinsun.com/wp-content/uploads/2019/01/d799ed318bc01b494c5638b4cbebbeec.png" alt="" width="700" height="377" />

<ul>
<li>repo 内にある「public_repo」にチェックをつける
生成されたキーをコピーします。次の手順で使用するのでどこかにペーストして覚えておいてください。</li>
</ul>

<img class="alignnone size-full wp-image-344" src="https://blog.killinsun.com/wp-content/uploads/2019/01/82ff3d0eccb6150663f4e0eca6409d08.png" alt="" width="700" height="283" />

<h3>wordpress-github-sync のインストール</h3>

<img class="alignnone size-full wp-image-345" src="https://blog.killinsun.com/wp-content/uploads/2019/01/81a0e81cf4c198cfe8dc410720c50cb8.png" alt="" width="700" height="426" />
こいつをインストール。

<h3>wordpress-github-sync の設定</h3>

Wordpressダッシュボード -> 設定 -> Github sync から設定へ。

<img class="alignnone size-full wp-image-346" src="https://blog.killinsun.com/wp-content/uploads/2019/01/6eb0190264cad9725c74fa2d38c7751a.png" alt="" width="700" height="349" />

<ul>
<li>Github hostname : 特に変更の必要はなし</li>
<li>Repository : ユーザ名とリポジトリ名を組み合わせて入力します。　例えば私のユーザ名は「killinsun」で、作成したリポジトリ名が「blogPosts」であれば、　「killinsun/blogPosts」になります。</li>
<li>Oauth Token: 前述した手順で作成した「パーソナルアクセストークン」です。　先程コピーしておいたものから貼り付けます。</li>
<li>Webhook Secret : 自分で好きな文字列をパスワードのように指定します。（次の手順で同様のものを入れるので忘れずに）</li>
<li>Default Import User : Githubリポジトリに投稿された記事をどのWordpress投稿者として作成するか。　選ぶ。</li>
<li>Webhook callback : 自動で生成されているので、これをコピーして次の手順で使用します。</li>
</ul>

<strong>次の手順でExport to Githubをする前に必ず「変更を保存」を行っておく</strong>

<h3>リポジトリにWebhookを設定</h3>

作成しておいたリポジトリを開く -> リポジトリのSettings -> Webhooks -> Add webhook

<img class="alignnone size-full wp-image-347" src="https://blog.killinsun.com/wp-content/uploads/2019/01/ff63a8ae2cdb8f07c33f0de46e38a8e9.png" alt="" width="700" height="604" />

<ul>
<li>前段の手順で生成された　「Webhook callback」のURLです。</li>
<li>Content typeは　application/jsonを選択</li>
<li>前段の手順で指定した「Webhook Secret」と同じ値です。
その他はデフォルトで問題なし。</li>
</ul>

<h3>両方の設定が保存出来たら「Export to Github」</h3>

wordpress-github-syncの設定画面で「Export to Github」をクリックすると、既存のWordpress記事の内容がGithubリポジトリにpushされます。
逆にImport from Githubは手動でGithubリポジトリからWordpressに対して同期をかけます。

<h3>投稿してみる</h3>

基本以下のような形で投稿しています。
1. リポジトリをローカル上にクローン
2. リポジトリ直下に「適当な名前.md」で新規Markdownファイルを作成
3. Markdownで記事を書いていく

<h4>Markdownファイルの先頭に入れる内容</h4>

以下のパラメータの挿入が必要です。

<pre><code class="language-md">---
post_title: 記事タイトル
layout: post
published: false
---

#　見出し
記事内容・・・
</code></pre>

<ul>
<li>post_title: 記事名</li>
<li>layout: たいていの人は「post」のままでOK.　他に何がサポートされているのかよくわからない。多分<a href="https://wpdocs.osdn.jp/投稿タイプ#.E3.83.87.E3.83.95.E3.82.A9.E3.83.AB.E3.83.88.E3.81.AE.E6.8A.95.E7.A8.BF.E3.82.BF.E3.82.A4.E3.83.97">ここ</a>見れば幸せになれるはず。</li>
<li>published: true=で公開　false=下書きのまま</li>
</ul>

<ol>
<li>コミットしてプッシュする</li>
<li>記事のタグやカテゴリ、画像の挿入はwordpress上で調整</li>
</ol>

<h3>修正方法は？</h3>

<ul>
<li>_drafts に下書き中のMarkdownファイル</li>
<li>_pagesに固定ページのMarkdownファイル</li>
<li>_postsに公開中のMarkdownファイル</li>
</ul>

それぞれ先頭に日付があるのでそれを頼りに編集します。。ただし記事名に日本語が含まれていると正しく表示されないのでその辺りは注意。（記事内の日本語は正しく表現されている）

これらのファイルを編集後に再度コミット・プッシュすることでWordpressにも反映されます。すごい。とても手軽・・・]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date><![CDATA[2019-01-06 14:36:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-06 05:36:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[have-you-been-still-tired-of-new-wordpress-editor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="post_tag" nicename="markdown"><![CDATA[markdown]]></category>
		<category domain="post_tag" nicename="visualstudiocode"><![CDATA[VisualStudioCode]]></category>
		<category domain="post_tag" nicename="vscode"><![CDATA[VScode]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[Wordpress]]></category>
		<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[8b703b77f013f1f645e3acea40fb32647cd5ac56]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-01-06-have-you-been-still-tired-of-new-wordpress-editor.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=328]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%81%be%e3%81%a0wordpress5-x%e3%81%ae%e3%82%a8%e3%83%87%e3%82%a3%e3%82%bf%e3%81%a7%e6%b6%88%e8%80%97%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b%e3%81%ae%ef%bc%9f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[have-you-been-tired-of-new-wordpress-editor]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>【Android App with Kotlin #1】ボタンウィジェットを使う</title>
		<link>https://blog.killinsun.com/2019/01/using-button-with-kotlin-android/</link>
		<pubDate>Tue, 08 Jan 2019 11:55:16 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=353</guid>
		<description></description>
		<content:encoded><![CDATA[Kotlinの勉強始めました。

<!--more-->

<img class="alignnone size-full wp-image-368" src="https://blog.killinsun.com/wp-content/uploads/2019/01/01_button.gif" alt="" width="640" height="400" />

<h2>環境</h2>

このコードは以下の環境で書いています。

<ul>
<li>macOS 10.14.2(Mojave)</li>
<li>Android Studio 3.2.1</li>
<li>Android SDK 28</li>
<li>gradle 4.6</li>
</ul>

<h2>レイアウトファイル</h2>

<img class="alignnone size-full wp-image-369" src="https://blog.killinsun.com/wp-content/uploads/2019/01/baa0800f313393c7986461de9b31c3a3.png" alt="" width="962" height="589" />

デザインタブから「Button」を挿入する。

<img class="alignnone size-full wp-image-370" src="https://blog.killinsun.com/wp-content/uploads/2019/01/69967d1e3cd68512eaefe7b9a3d30167.png" alt="" width="966" height="637" />

テキストタブでレイアウトやコードの微修正します。

<pre><code class="language-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.constraint.ConstraintLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".MainActivity"&gt;

    &lt;TextView
            android:id="@+id/tvHello"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Hello World!"
            app:layout_constraintTop_toTopOf="parent"         //[a]
            app:layout_constraintBottom_toBottomOf="parent"   //[b]
            app:layout_constraintLeft_toLeftOf="parent"       //[c]
            app:layout_constraintRight_toRightOf="parent" /&gt;  //[d]
    &lt;Button
            android:id="@+id/btnTouchMe"
            android:text="Touch me!"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            android:layout_marginTop="8dp"
            android:layout_marginBottom="8dp"
            app:layout_constraintTop_toBottomOf="@+id/tvHello"  //[a]
            app:layout_constraintBottom_toBottomOf="parent"     //[b]
            app:layout_constraintStart_toStartOf="parent"       //[c]
            app:layout_constraintEnd_toEndOf="parent" /&gt;        //[d]

&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<code>android:id=</code>は一番上にあるのが個人的に好きなので持ってきました。
[a]~[d]ではConstraintLayoutがデフォルトで使用されているので、「このオブジェクトの（上/下/左/右）に配置する」を指定するコードを記述しています。

<h2>Activityファイル</h2>

<pre><code class="language-java">class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)


        //レイアウトファイルで宣言したボタンウィジェットを読み込む [1]
        val touchMeButton: Button = findViewById(R.id.btnTouchMe) as Button
        //レイアウトファイルで宣言したテキストビューを読み込む [2]
        val helloText: TextView = findViewById(R.id.tvHello) as TextView


        //ボタン押下時の処理[3]
        touchMeButton.setOnClickListener{
            tvHello.text = "Good!"
        }
    }
}

</code></pre>

Buttonに関するコードを記述します。
Buttonをクリックすると、テキストが変わる仕組みです。

<h3>Button [1]、[2]</h3>

<code>Button</code>クラスを <code>helloButton</code>という名前で宣言すると同時に、レイアウトファイルに用意したButtonのIDを引っ張ってきます。
また、[2]で書いているTextViewの内容も同様です。

<ul>
<li><code>val</code> は定数。　Javaのfinalと同じ。基本はこっちで宣言するといい。</li>
<li><code>var</code> は変数。　後々変数の中身を別の値で再代入する場合に利用する。</li>
<li><code>touchMeButton: Button</code> Button型の定数を<code>touchMeButon</code>という名前で用意する</li>
<li><code>as Button</code> Button型にキャストしています。</li>
</ul>

<h3>Button [3]</h3>

Buttonクラスが持つメソッド<code>setOnClickListener</code>を使って、ボタンがタップされた時の動作を記述している。
この時、<code>touchMeButton</code>(すなわちButtonクラス）がどんなメソッドを持っているかはここで調べられる。
<a href="https://developer.android.com/reference/android/widget/Button">public class button</a>

<h2>Activityファイル（別の書き方）</h2>

Kotlin Android extentionsが有効であれば、以下のような書き方もできます。

<pre><code class="language-java">class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        btnTouchMe.setOnClickListener{
            tvHello.text = "Good!"
        }
    }
}

</code></pre>

Javaで書く場合と比べて恐ろしく短い・・・。

<h2>リンク</h2>

<h3>次回の記事</h3>

次回はImage ViewとImage Buttonです。
<a href="https://blog.killinsun.com/?p=400">【Android App with Kotlin #2】画像を取り扱う(ImageView/ImageButton)</a>

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date><![CDATA[2019-01-08 20:55:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-08 11:55:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-button-with-kotlin-android]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android-app-with-kotlin"><![CDATA[Android App with Kotlin]]></category>
		<category domain="category" nicename="android%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[Androidアプリ開発]]></category>
		<category domain="category" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="kotlin"><![CDATA[Kotlin]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[3b4d26a9c955676abd7d1214f55b405e0685014d]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-01-08-using-button-with-kotlin-android.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90android-app-for-kotlin-1%e3%80%91%e3%83%9c%e3%82%bf%e3%83%b3%e3%82%a6%e3%82%a3%e3%82%b8%e3%82%a7%e3%83%83%e3%83%88%e3%82%92%e4%bd%bf%e3%81%86]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[449]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90android-app-with-kotlin-1%e3%80%91%e3%83%9c%e3%82%bf%e3%83%b3%e3%82%a6%e3%82%a3%e3%82%b8%e3%82%a7%e3%83%83%e3%83%88%e3%82%92%e4%bd%bf%e3%81%86]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>109</wp:comment_id>
			<wp:comment_author><![CDATA[【Android App for Kotlin #2】画像を取り扱う(ImageView/ImageButton) - お首が長いのよ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.killinsun.com/?p=400</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-13 22:57:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-13 13:57:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【Android App for Kotlin #1】ボタンウィジェットを使う [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1547387827.8150301;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1547387980.3340499;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>【engineers_lt】カジュアルLT大会　に参加して登壇してきた　</title>
		<link>https://blog.killinsun.com/2019/01/i-joined-casuallt-at-engineers_lt-and-gave-a-presentation/</link>
		<pubDate>Fri, 11 Jan 2019 01:03:18 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=384</guid>
		<description></description>
		<content:encoded><![CDATA[スライド無し、発表者はその場で指名、ネタはなんでもOKっていうLT会に行ってきました。
<!--more-->
人数多いし当たらねーだろうなと思ったら当たってしまった。
牛くん(cowsay)に名前呼ばれた人は発表する
時間は５分 喋り始めてからカウントスタート

普段は時間制限来ても最後まで喋らせてくれる事はあるが、
今回は無慈悲にストップかけるとのこと。

<h2>日本酒FT</h2>

恒例の日本酒の紹介から。

<h3>さっぴーさん</h3>

奥多摩　澤乃井　純米生原酒　しぼりたて

<h3>Cuebic　ニシジマさん</h3>

八海山　吟醸
スーパーで買ってきたやつ

<h3>ねむさん</h3>

福寿　
兵庫のお酒
ノーベル賞のイベントで寄贈
すっきりしていて味わい深いらしい

<h3>yukipi2さん</h3>

福島の　
七重郎　猪名川酒造
ゆきに囲まれた中で作られた
飲みやすい

<h3>かねさん</h3>

出羽桜
ariakiさんから

<h2>みずりゅさん</h2>

<h3>話の内容</h3>

４０代以降向け？

SIerあるあるをドラクエネタでひたすらホワイトボードに書いていくｗ
突然のBGM開始(しかもスマホのスピーカーなので微妙にしか聞こえないところがまたツボ)
ドラクエ１のものからBGMが切り替わっていく。

正直ドラクエやったことないのでわからないけどIT系あるあるのネタの組み合わせが秀逸ｗ
どうしてもBGMに忠実で、合わせてネタは合わせたいようでした

<h3>気づき</h3>

<ul>
<li>音楽斬新。</li>
<li>身近なものとドラクエの何かを掛け合わせることで特定層の関心惹くってまたすごいよな。</li>
</ul>

<h3>TODO</h3>

音楽流すのは面白い。やってみようかな。
私もよくドラゴンボールに例えて話すとウケがいいというか、わかってもらえやすいので続けたい。

<h2>脱脂綿さん</h2>

<h3>話の内容</h3>

押しの劇団 「platform」についてアピール

一回２時間の演目を１０回やるのらしいけれども、テーマは同じだけど
全部内容が違うところに惹かれたんだと。　それはすごい自分も気になる。

youtubeで公開されているので無料で見れちゃう。
ただし毎回細かい内容が異なるので、観に来てくれれば違ったストーリー展開、結末で何度でも楽しめる。

<h3>気づき</h3>

数字を交えてホワイトボードに記載し、印象に残る形で丁寧に話している　すごい。
whole part法をうまく取り入れて話していて、わかりやすかった。
余った時間で違うネタを仕込んで時間調整のテクニックにはびっくり。

<h3>TODO</h3>

話せるネタをいくつかまとめておこうかな？
具体化して話せる数字はもっと出していきたい。
（今日自分の発表でも数字交えたけど）

<h2>ずんだまるさん</h2>

<h3>話の内容</h3>

大根 生で食べると辛いけど辛くなくなる方法を研究した話
理数化 の卒研でテーマにしたそう。

<h4>大根が一番辛くなる時</h4>

細胞が破壊されて化学反応を起こす事によって生まれる
体温ぐらいで細胞が活性化するらしい。
40℃前後で一番辛くなり、それをすぎればだんだん和らぐそう。
つまり、活性化しきれば辛味が収まる。

<h4>どうやったら辛くならないように調理できるか？</h4>

切り方で変わる？　粗さで変わる？ を調べてみた。
細胞を壊す切り方のほうが辛くなくなので、
大根に対して横向きに切ってあげると良いそうだ。

<h3>気づき</h3>

即興だけれどもホワイトボードの使い方がとてもうまい。
卒研の時によく書いていたのだろうか？

<h3>TODO</h3>

こういった風に話しながらも頭の中で図を
イメージしながら話せるようになりたい。
そういうトレーニングできないかな？

<h2>とよへいさん</h2>

<h3>話の内容</h3>

今日やるって知らなくてさっき考えたネタ
過去のLT資料漁るけど　いいのがなかったので、
Cuebicさんでrubyを使ったインターンを受けていた時の事を振り返る。

<ul>
<li>SQL : 大事さを感じてる。　今は書く事なくなってる。</li>
<li>フロンエンド:  冗長が嫌いだったからやらなかったけど、開発やる上で大切だとkんじた</li>
<li>DRY: やっぱ大事。　ぶっちゃけ聴衆席でDIYネタの野次につられてよく聞けてなかったすまん
> ちなみにDRYってなに？</li>
<li>日経新聞: 必要かと思ったらいらないｗ 読んでる暇あったらコード読んだり書いたりしたほうがいい</li>
</ul>

世の中の偉い’おっさん’の発言に逆行していくスタイル、とても好き。

<ul>
<li>Cuebicさんでインターンした事を振り返る:

<ul>
<li>事業部ごとに壁がないこと</li>
<li>新規開発が多いこと</li>
<li>技術選定が自由にできること</li>
</ul></li>
</ul>

勿論Badな部分もあるけど、そこは直接懇親会で！とのこと。

<h3>気づき</h3>

あ、DRYって「Don't repeat yourself」の略らしい。詳しくはググればいいんだけれども
要するに「重複を避ける」ってこと。　確かに大事。

偉い人が言ってるから右にならえって
例えば今回みたいな日経新聞読むこと自体は良いきっかけだけど、
強制されて続けるもんじゃないよね。

<h3>Todo</h3>

<ul>
<li>大事なことは改めて話す、
大事じゃないことは延々と繰り返し話さないようにするところから。　違うか。</li>
</ul>

<h2>ねむさん</h2>

<h3>話の内容</h3>

ねむのまいにちしあわせ
かわいい

めっちゃしあわせ

とある概念にめっちゃ癒やされてめっちゃ幸せ

1/25 目標設定の技術
登壇　夢を語る重要性と維持する方法

iPadで持ってる写真が遺影みたい・・・

<h3>気づき</h3>

声のトーンや表情からしあわせ感が伝わっちゃった
概念っていうネタを交えて話してる事で笑いと話の傾聴力が生まれてる
蓋を開けてみれば「私めっちゃ幸せなんすよ！」って話だけだったのに、
こんなにも気持ちが伝わる話ってなかなかない。

<h3>TODO</h3>

自分が話す時はあえてトーン高めにしてるけど、
あえて低めのものを使い分けたほうが面白いのかなって思ったので
実践してみよう。あとは何より話す側も楽しそうに語りたい。

<h2>ひずみさん</h2>

<h3>話の内容</h3>

(スマホの壁紙なんだろう？見たことあるような気がした)

<ul>
<li>ハードウェアキーボードついてるほうが好き</li>
<li>古いデバイス集めが趣味</li>
</ul>

「W-ZERO3」を持ってきた。
実際に触ってもらいたかったけど充電器手配できなくて披露できず。
カバンの中にあと２つ古いデバイスがあるらしい。　すごいｗ

<h4>なぜハードウェアキーボードか？</h4>

<ul>
<li>押した感覚がほしい</li>
<li>突発的に何かコードとか書きたくなるときにソフトウェアキーボードだと煩わしい</li>
<li>長文書く時はすごい重宝する</li>
</ul>

<h3>気づき</h3>

書きたいって思う時はどんなときだろう？
残したくなるぐらい書きたくなるものはどんな内容？
自分もふとアイデアや気になる事は頭に浮かぶけど、
メモしたりっていった機会が無いなと思った。

<h3>TODO</h3>

何か少しでもメモしやすい環境から整えてみよう

<h2>俺</h2>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">クジ引きあたってスライドなし登壇してしまった・・・<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>&mdash; 首無しキリン (@Kill_In_Sun) <a href="https://twitter.com/Kill_In_Sun/status/1083328676811304961?ref_src=twsrc%5Etfw">2019年1月10日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h3>話の内容</h3>

Kindle paperwhite2018年モデルを年末に買った
めっちゃいいから皆も買おう！

<ul>
<li>防水だよ</li>
<li>めっちゃ軽い。皆のスマホと同じぐらいだからカバンに入れても気にならない</li>
<li>pdf本もkindleに転送できる。しかもメールに添付して送るだけ。</li>
</ul>

<h3>気づき</h3>

<ul>
<li>最後に良いとおもった点を改めて３回言おうとしてたのに忘れてもうた</li>
<li>軽さの話をするときに最初にスマホをみんな手に持ってもらってからのほうがよかったかな？</li>
<li>自分の体験を共有してイメージをつかんでもらうことはできたと思う</li>
</ul>

<h2>やまねさん</h2>

<h3>話の内容</h3>

テーマは人口　という真面目なテーマ

日本の人口は毎年50万人ずつ減ってる
このファクトに対して判明しているのは

<ol>
<li>人口は突然増えない。　</li>
<li>消費が減る　
と、上記2つはネガティブなテーマだったが、最後にポジティブな内容を話したかったそう。</li>
<li>世界では？　 アジアが４０億人。　
日本は少なくなってるけどすぐ周りはとても比率大きい。　だからこそ・・・　聞けなかった。</li>
</ol>

<h3>気づき</h3>

なんで人口の事をテーマにしたんだろう？　普段のアンテナの範囲から仕入れたネタなのだろうか？
明るい未来(ポジティブな側面)の話もっと聞きたいなと思った

<h3>TODO</h3>

二面性がある話ってもう片方がとても気になるから
自分の会話にも取り入れて誘導できるようになったら面白いかもしれない。

<h2>しずくさん</h2>

<h3>話の内容</h3>

IT系の会社で広報やってるひと
内容決めてないからとことん自己紹介
(発表した内容だけど文章に残すのは気を遣うので簡単に。)

自分の好きなことをやってるほうが良いと思ってたけど、
たまには「本当にこれでいいの？」と疑問を持つ。
でも、なんだかんだ自分にとって好きなことやっているほうが楽しい

前の会社から転職して今広報やってる瞬間が楽しいとのこと。

<h3>気づき</h3>

初LTのなのに声大きいしよく喋れてる。
どうしたらこんな堂々と喋れるんだろうか。
どうやってこの勉強会の事知った？　
・・・と思ったら、所属の会社も積極的に外部に勉強会やってる会社さんだった。
良い出会いだなー

<h3>TODO</h3>

キャラの確立は見習いたいなー。　
私が「いえーい！！！」でいけるかは別でｗ

<h2>uskさん</h2>

<h3>昨日あったことの報告</h3>

<ul>
<li>検査うけた</li>
<li>体重めっちゃ減った</li>
<li>体脂肪率もめっちゃ減った</li>
</ul>

仕事に役立てるダイエットの考え方
肥満が４割いる会社

なぜうまく行ったか？
1. 何もしなかった。いやなことをしない
2. こうしたいという自分の方向性を持つ
3. 目標の定義がはっきりしていた

目標がないのにやるの辛くない？

<h3>気づき</h3>

ちょっと話についていけてなかった感。申し訳ない。
でも目標設定が大事という人もいればその逆もいるって話はちらほら聞こえてきた

<h2>kabukawaさん</h2>

<h3>話の内容</h3>

2018年9月にで会社やめて無職という衝撃の告白からスタート

このまま定年まで仕事やるんだっけ？ と疑問
たまたま外の勉強会に出始めた。　結果、今年は１６５の勉強会に参加。
SES系企業に所属する中で「俺たちこのままでいいのか」　問題意識としてもってきた。

世界を変えるためには　会社をやめて、徹底的に勉強会にいって　SESに縛られてる技術者に
「こんなことができる、こんな世界がある」という世界に引っ張り出したい

現在は週２〜３の勉強会に参加して　ブログ書いてる
まだ成果は微妙だと思ってるが、続けていって何かを見つけていきたいとのこと。

目標としてたフォロワー1000人まで50人とあと一歩。　目標達成できそうだ。

DevRelMeetupに参加して エバンジェリストの人の話を聴いて
このやり方を真似ていけば、もっといろんなSEに広められるのではないかと思って、
精力的に活動をしている。

OSSライセンスの教科書
せっかくなので啓蒙してほしいからこの場にいる人にあげる

<h3>気づき</h3>

話の中でもあったけど、この場にいる人達は確かに「外の世界」に
出ていろんな「力」を吸収している人たち。
そんな輪の中でこの発表をしたのは、もっと自分だけじゃなくて他の人にも
同様の活動をやる楽しさを知ってほしいのかなと感じた。

とても壮大な話で、でも世の中のエンジニアが幸せになってほしいという
私の想いとも一致してるので、応援したいし一緒に頑張りたい。

<h3>TODO</h3>

今の会社も残り数営業日だけど、若い衆と話す機会や、
偉い人と話す機会はまだ残されているので、
自分も啓蒙活動やり直したいな。　リベンジしよう。

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">.<a href="https://twitter.com/kabukawa?ref_src=twsrc%5Etfw">@kabukawa</a> さんがOSSライセンスの本を会場の一人にランダムで提供！って企画やって当選して貰っちゃいました。<br><br>私、Kindleの良さを語ったのに物理本貰っちゃっていいのかしら、、（笑） <a href="https://t.co/uV7Qo3Ozjf">https://t.co/uV7Qo3Ozjf</a></p>&mdash; 首無しキリン (@Kill_In_Sun) <a href="https://twitter.com/Kill_In_Sun/status/1083348589013753857?ref_src=twsrc%5Etfw">2019年1月10日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

ちなみにOSSライセンスの教科書は、抽選の結果私が頂きました、　
これも素晴らしい縁・・・

<h2>Katushi murakamiさん</h2>

<h3>話の内容</h3>

スクラム開発を導入して　実践して　思ったこと

murakamiさんは守破離反対派
ルールが全てじゃないと思っている

YWTで振り返る。
Y: Daily scram scram on scram お客さん交えてやってる
W: コミュニケーションが増えた。　どんなことをやっているのか把握しやすくなった。　
T: モデルケースを作ることから始めよう。

<h4>結論　</h4>

全てをスクラムに合致させる必要はない
批判もあったりするので　少しずつ信頼を勝ち得ていって導入していくのが大切。

3ヶ月でいれたこと。

<h3>気づき</h3>

多くのお客さんと接していく中で今までなかったものを
取り組みとして入れるのって膨大なエネルギーが必要だったんじゃないかなと思う。
それなのに、この話は3ヶ月間で得た内容っていうのがすごい。とても濃い。

<h3>Todo</h3>

スクラムと離れるけどYWTでちょっと現職でやった活動もう一度振り返ってみよう。

<h2>スポンサーLT</h2>

２つのうち１つ今回会場提供いただいたCuebicさんからの話。
今回はPark っていうcuebicさんの会場をお借りしたとの事。
とても広くて、登壇発表に必要な機材も揃ってて、飲食OK　なのに無料で使える。
けれども認知度が低いせいか、まだ全然使ってもらえてないとのこと。
みんな使おう！　

私もちょっと今年やりたいことの一つで　勉強会を主催する側に立ちたいと思っているので
お世話になりそう・・・。

<h2>というわけで</h2>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">イベント主催したいと思ってるのでCuebicさんお世話になりたい。<a href="https://twitter.com/hashtag/engineers_lt?src=hash&amp;ref_src=twsrc%5Etfw">#engineers_lt</a></p>&mdash; 首無しキリン (@Kill_In_Sun) <a href="https://twitter.com/Kill_In_Sun/status/1083337712533291008?ref_src=twsrc%5Etfw">2019年1月10日</a></blockquote>

<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

最近勉強してるKotlinに関する勉強会を一つやってみたいなって思っています。
初心者のハードルを低くする、そんな勉強会を作りたい。（年末にかけて自分が苦労したので）
一人じゃ無理だと思っているので、何人か有志を募ってトライアルでいいからやってみたい。
そんなこんなで協力してくれる方を募集しています。　既にお二方からお声がけいただいています。
時期はそんなに急ぎでもなく、また求めるレベルも私が初学者ゆえにたいそうなこと言えず。

TwitterでDMください。

<h3>リンク</h3>

<a href="https://madowindahead.info/2019/01/nagashi/" rel="noopener noreferrer" target="_blank">カジュアルLT大会に参加　#engineers_lt</a>
<a href="https://kabukawa.hatenablog.jp/entry/2019/01/11/164039" rel="noopener noreferrer" target="_blank">カジュアルLT大会 #1</a>

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date><![CDATA[2019-01-11 10:03:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-11 01:03:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-joined-casuallt-at-engineers_lt-and-gave-a-presentation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="engineers_lt"><![CDATA[#engineers_lt]]></category>
		<category domain="post_tag" nicename="lt"><![CDATA[LT]]></category>
		<category domain="category" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e7%99%bb%e5%a3%87"><![CDATA[登壇]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[de616cb07a025611a60a23a59b0cdb048dd8d836]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-01-11-i-joined-casuallt-at-engineers_lt-and-gave-a-presentation.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[author]]></wp:meta_key>
		<wp:meta_value><![CDATA[killinsun]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[permalink]]></wp:meta_key>
		<wp:meta_value><![CDATA[/?p=384]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[mashsb_timestamp]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90engineers_lt%e3%80%91%e3%82%ab%e3%82%b8%e3%83%a5%e3%82%a2%e3%83%ablt%e5%a4%a7%e4%bc%9a%e3%80%80%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%a6%e7%99%bb%e5%a3%87%e3%81%97%e3%81%a6%e3%81%8d]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>107</wp:comment_id>
			<wp:comment_author><![CDATA[カジュアルLT大会に参加　#engineers_lt | マドびっ！ Madosan&#039;s View]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://madowindahead.info/2019/01/nagashi/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[219.94.128.49]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-11 12:34:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-11 03:34:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] &nbsp;お首が長いのよ【engineers_lt】カジュアルLT大会　に参加して登壇してきた　スライド無し、発表者はその場で指名、ネタはなんでもOKっていうLT会に行ってきました。 人数多いし当た [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1547177650.124573;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1547179453.546031;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>【Android App with Kotlin #2】画像を取り扱う(ImageView/ImageButton)</title>
		<link>https://blog.killinsun.com/2019/01/using-imageview-and-imagebutton-with-kotlin-android-part2/</link>
		<pubDate>Sun, 13 Jan 2019 13:54:57 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[ImageViewとImageButtonの使い方をまとめました。

<!--more-->

<h2>作るもの</h2>

<img src="https://blog.killinsun.com/wp-content/uploads/2019/01/02_imgView_Button.gif" alt="" width="640" height="400" class="alignnone size-full wp-image-403" />
Activity内に<code>ImageView</code>と<code>ImageButton</code>を配置し、<code>ImageButton</code>をタップすると
<code>ImageView</code>の画像が予め用意した画像に変わります。

<h2>環境</h2>

このコードは以下の環境で書いています。

<ul>
<li>macOS 10.14.2(Mojave)</li>
<li>Android Studio 3.2.1</li>
<li>Android SDK 28</li>
<li>gradle 4.6</li>
</ul>

<h2>事前準備</h2>

app/src/main/res/drawable 内に pngまたはjpgのファイルを格納します。
今回は「いらすとや」さんから適当な画像を拝借してきました。

<h2>レイアウトファイル</h2>

<img src="https://blog.killinsun.com/wp-content/uploads/2019/01/e72e013d37ef3effd4ec5d874cf2be67.png" alt="" width="700" height="430" class="alignnone size-full wp-image-406" />
<img src="https://blog.killinsun.com/wp-content/uploads/2019/01/3ef7b7ca71fc7ef590fba1c41f3912f3.png" alt="" width="700" height="441" class="alignnone size-full wp-image-407" />
デザインタブから「Image View」、「ImageButton」を挿入します。

<img src="https://blog.killinsun.com/wp-content/uploads/2019/01/f5d9f66c6b181612c7ed66f2cd044b78.png" alt="" width="700" height="556" class="alignnone size-full wp-image-409" />
ImageViewやImageButton挿入時、どの画像を使用するか選択するウィザードが表示されます。
元々入っている画像もあれば、自分で用意した画像を直ぐに利用することも出来ます。
今回はProjects内の適当な画像を選んでみました。

他にもスパナのアイコンなど、新たに用意する必要のない位デフォルトアイコンの種類が豊富なので、最初に画面上部の検索バーから探してみるのも良いかもしれません。

テキストタブでレイアウトやコードの微修正します。

<pre><code class="language-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
                                             xmlns:app="http://schemas.android.com/apk/res-auto"
                                             xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
                                             android:layout_height="match_parent"&gt;

    &lt;ImageView
            android:id="@+id/imgvIcon"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:layout_marginBottom="8dp"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            app:srcCompat="@mipmap/ic_launcher"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toTopOf="@+id/imgbManage"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"  /&gt;
    &lt;ImageButton
            android:id="@+id/imgbManage"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginBottom="156dp"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            app:srcCompat="@android:drawable/ic_menu_manage"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/&gt;
&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<h2>Activityファイル</h2>

<pre><code class="language-java">class ImgActivity : AppCompatActivity(){

    override fun onCreate(savedInstanceState: Bundle?){
        super.onCreate(savedInstanceState)
        setContentView(R.layout.imgv_imgb_activity)

        val imgvIcon: ImageView = findViewById(R.id.imgvIcon) //[1]
        val imgbManage: ImageButton = findViewById(R.id.imgbManage) //[2]

        //[3]
        imgbManage.setOnClickListener{
            imgvIcon.setImageResource(R.drawable.pose_kyosyu_boy) //[4]
        }
    }
}
</code></pre>

<h3>[1]、[2]</h3>

<code>ImageView</code>クラス、<code>Image Button</code>クラスを それぞれ<code>imgvIcon</code>、<code>imgbManage</code>という名前で宣言します。
同時に、レイアウトファイルに用意したウィジェットのIDを引っ張ってきます。

<ul>
<li><code>val</code> は定数。　Javaのfinalと同じ。基本はこっちで宣言するといい。</li>
<li><code>imgvIcon</code> ImageView型の定数を<code>imgvIcon</code>という名前で用意する</li>
<li><code>imgbManage</code> ImageButton型の定数を<code>imgbManage</code>という名前で用意する</li>
</ul>

<h3>[3]</h3>

ImageButtonクラスが持つメソッド<code>setOnClickListener</code>を使って、
ボタンがタップされた時の動作を記述しています。
(厳密にはImageButtonクラスの親クラス、更に親クラスのViewクラスが持つメソッド)

この時、<code>imgbManage</code>(すなわちImageButtonクラス）が
どんなメソッドを持っているかはここで調べられます。

<a href="https://developer.android.com/reference/android/widget/ImageButton">Image Button</a>

<h3>[4]</h3>

<code>setImageResource</code>メソッドを使って、　drawableディレクトリ内に格納した
画像のファイル名を<code>R.drawable</code>というキーから指定しています。
見ての通り、拡張子は指定しません。

<h2>Activityファイル（別の書き方）</h2>

Kotlin Android extentionsが有効であれば、以下のような書き方もできます。

valの宣言文がそのまま無くせます。

<pre><code class="language-java">class imgActivity : AppCompatActivity(){

    override fun onCreate(savedInstanceState: Bundle?){
        super.onCreate(savedInstanceState)
        setContentView(R.layout.imgv_imgb_activity)


        imgbManage.setOnClickListener{
            imgvIcon.setImageResource(R.drawable.pose_kyosyu_boy)
        }


    }
}

</code></pre>

<h2>リンク</h2>

<h3>次の記事</h3>

次回はListViewです。
<a href="https://blog.killinsun.com/?p=418">【Android App with Kotlin #3】ListViewを使う</a>

<h3>前回の記事</h3>

<a href="https://blog.killinsun.com/?p=353">【Android App with Kotlin #1】ボタンウィジェットを使う</a>

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[ImageViewとImageButtonの使い方をまとめました。]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date><![CDATA[2019-01-13 22:54:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-13 13:54:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-imageview-and-imagebutton-with-kotlin-android-part2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android-app-with-kotlin"><![CDATA[Android App with Kotlin]]></category>
		<category domain="category" nicename="android%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[Androidアプリ開発]]></category>
		<category domain="post_tag" nicename="imagebutton"><![CDATA[ImageButton]]></category>
		<category domain="post_tag" nicename="imageview"><![CDATA[ImageView]]></category>
		<category domain="category" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="kotlin"><![CDATA[Kotlin]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[3538f1add896ed73ed12432d34abe678303bda1a]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-01-13-using-imageview-and-imagebutton-with-kotlin-android-part2.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90android-app-for-kotlin-2%e3%80%91%e7%94%bb%e5%83%8f%e3%82%92%e5%8f%96%e3%82%8a%e6%89%b1%e3%81%86imageview-imagebutton]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[449]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90android-app-with-kotlin-2%e3%80%91%e7%94%bb%e5%83%8f%e3%82%92%e5%8f%96%e3%82%8a%e6%89%b1%e3%81%86imageview-imagebutton]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[【Android App for Kotlin #1】ボタンウィジェットを使う - お首が長いのよ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.killinsun.com/?p=353</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-13 22:58:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-13 13:58:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 次回はImage ViewとImage Buttonです。 【Android App for Kotlin #2】画像を取り扱う(ImageView/ImageButton) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1547387928.524056;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1547387959.4140739;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[【Android App for Kotlin #3】ListViewを使う - お首が長いのよ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.killinsun.com/?p=418</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-15 23:16:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-15 14:16:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【Android App for Kotlin #2】画像を取り扱う(ImageView/ImageButton) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1547561772.0793891;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1547561786.0620899;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>【Android App with Kotlin #3】ListViewを使う</title>
		<link>https://blog.killinsun.com/2019/01/using-listview-with-kotlin-android-part1/</link>
		<pubDate>Tue, 15 Jan 2019 14:15:56 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=418</guid>
		<description></description>
		<content:encoded><![CDATA[まずはListViewに適当なデータを表示させるシンプルなものを用意しました。

<!--more-->

<h2>作るもの</h2>

<img src="https://blog.killinsun.com/wp-content/uploads/2019/01/03_listview.gif" alt="" width="640" height="400" class="alignnone size-full wp-image-421" />
ListviewActivity.kt内で宣言したString型のコレクションを表示させるListViewです。

<h2>環境</h2>

このコードは以下の環境で書いています。

<ul>
<li>macOS 10.14.2(Mojave)</li>
<li>Android Studio 3.2.1</li>
<li>Android SDK 28</li>
<li>gradle 4.6</li>
</ul>

<h2>事前準備</h2>

特にありません。
表示させるアイテムのネタを考えておきましょう。

<h2>レイアウトファイル</h2>

<img src="https://blog.killinsun.com/wp-content/uploads/2019/01/3c645c95809a7bda6124f034e0b1eacf.png" alt="" width="1023" height="632" class="alignnone size-full wp-image-420" />
デザインタブから「ListView」を挿入します。
Paletteの<code>Legacy</code>に入っているので注意しましょう。

テキストタブでレイアウトやコードの微修正します。

<pre><code class="language-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
                                             xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
                                             android:layout_height="match_parent"&gt;

    &lt;ListView
            android:id="@+id/lvHeroes"
            android:layout_width="368dp"
            android:layout_height="495dp"
            android:layout_marginTop="8dp"
            android:layout_marginBottom="8dp"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent" /&gt;
&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<h2>Activityファイル</h2>

<pre><code class="language-Java">class ListviewActivity: AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?){
        super.onCreate(savedInstanceState)
        setContentView(R.layout.listview_activity)

        val heroes:Array&lt;String&gt; = arrayOf("Iron Man", "Captain America", "Thor") //[1]
        val adapter = ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_list_item_1, heroes) //[2]
        val lvHeroes: ListView = findViewById(R.id.lvHeroes) //[3]

        lvHeroes.adapter = adapter //[4]

    }
}
</code></pre>

コードの説明に入ります。

<h3>[1]</h3>

String型が格納されるコレクション(配列)を宣言すると同時に値を代入しています。

<h3>[2]</h3>

ListViewというレイアウトと、<code>[1]</code>で宣言したコレクションを紐付けるアダプターです。

<ul>
<li><code>this</code>
コンテキストです。まだ自分もよくわかっていないので調べて加筆します。</li>
<li><code>android.R.layout.simple_list_item_1</code>
はじめから用意されているListViewの項目１つ分のレイアウトです。
独自のレイアウトを適用させる場合は、この引数を変える事になります。</li>
<li><code>heroes</code>
<code>[1]</code>で宣言したコレクションの名前で、アダプターにセットしています。</li>
</ul>

<h3>[3]</h3>

レイアウトファイルで用意した<code>ListView</code>をActivityファイルで使えるように宣言しています。
Kotlin Andorid extentionsが有効であれば、この項目は書かなくてもレイアウトファイルで
宣言した<code>android:id</code>でそのまま扱えます。

<h3>[4]</h3>

<code>[3]</code>で宣言した<code>ListView</code>と、<code>[2]</code>で宣言したadapterを紐づけています。

<h2>リンク</h2>

<h3>次の記事</h3>

次回はListViewで用意したアイテムにタッチすると
処理が実行されるようにします。
<a href="https://blog.killinsun.com/?p=431">【Android App for Kotlin #4】ListViewを使う(2)</a>

<h3>前回の記事</h3>

<a href="https://blog.killinsun.com/?p=400">【Android App with Kotlin #2】画像を取り扱う(ImageView/ImageButton)</a>

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[まずはListViewに適当なデータを表示させるシンプルなものを用意しました。]]></excerpt:encoded>
		<wp:post_id>418</wp:post_id>
		<wp:post_date><![CDATA[2019-01-15 23:15:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-15 14:15:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-listview-with-kotlin-android-part1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android-app-with-kotlin"><![CDATA[Android App with Kotlin]]></category>
		<category domain="category" nicename="android%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[Androidアプリ開発]]></category>
		<category domain="category" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="listview"><![CDATA[ListView]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[f52076ba2435eecc8b42ddb178411e4e6ef5346f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-01-15-using-listview-with-kotlin-android-part1.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90android-app-for-kotlin-3%e3%80%91listview%e3%82%92%e4%bd%bf%e3%81%86]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[449]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90android-app-with-kotlin-3%e3%80%91listview%e3%82%92%e4%bd%bf%e3%81%86]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[【Android App for Kotlin #2】画像を取り扱う(ImageView/ImageButton) - お首が長いのよ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.killinsun.com/?p=400</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-15 23:17:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-15 14:17:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 次回はListViewです。 【Android App for Kotlin #3】ListViewを使う [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1547561846.7994499;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1547561933.274034;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[【Android App for Kotlin #4】ListViewを使う(2) - お首が長いのよ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.killinsun.com/?p=431</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-21 08:01:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-20 23:01:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 前回の記事の成果物を使います。 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1548025283.9554939;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1548025363.3311579;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>【Android App with Kotlin #4】ListViewを使う(2)</title>
		<link>https://blog.killinsun.com/2019/01/using-listview-with-kotlin-android-part2/</link>
		<pubDate>Sun, 20 Jan 2019 23:01:12 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=431</guid>
		<description></description>
		<content:encoded><![CDATA[ListViewの要素をタップした時の動作を追加しました。

<!--more-->

<h2>作るもの</h2>

<img src="https://blog.killinsun.com/wp-content/uploads/2019/01/04_listview_touchEvent.gif" alt="" width="640" height="400" class="alignnone size-full wp-image-433" />
前回の記事で作成したListViewに対し、タップイベントを追加しました。

<h2>環境</h2>

このコードは以下の環境で書いています。

<ul>
<li>macOS 10.14.2(Mojave)</li>
<li>Android Studio 3.2.1</li>
<li>Android SDK 28</li>
<li>gradle 4.6</li>
</ul>

<h2>事前準備</h2>

<a href="https://blog.killinsun.com/?p=418">前回の記事</a>の成果物を使います。

<h2>レイアウトファイル</h2>

<a href="https://blog.killinsun.com/?p=418">前回の記事</a>で利用したものを使います。

<h2>Activityファイル</h2>

<pre><code class="language-Java">class ListviewActivity: AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?){
        super.onCreate(savedInstanceState)
        setContentView(R.layout.listview_activity)

        val heroes:Array&lt;String&gt; = arrayOf("Iron Man", "Captain America", "Thor")
        val realName:Array&lt;String&gt; = arrayOf("Tony Stark", "Steve Rogers", "Thor Odinson") //追加[1]

        val adapter = ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_list_item_1, heroes)
        val lvHeroes: ListView = findViewById(R.id.lvHeroes)

        lvHeroes.adapter = adapter

        /*
            追加[2]
            引数は「parent」、「view」、「position」、「id」の４つで、
            使用しない引数については「_(アンダースコア)」で省略出来る。
        */
        lvHeroes.setOnItemClickListener{ _, _, position, _ -&gt;
            //タップされたアイテムの位置(Position)をインデックスに配列の中身をToastで表示
            Toast.makeText(this,realName[position],Toast.LENGTH_SHORT).show()
        }
    }
}
</code></pre>

コードの説明に入ります。

<h3>[1]</h3>

<pre><code class="language-java">val realName:Array&lt;String&gt; = arrayOf("Tony Stark", "Steve Rogers", "Thor Odinson") //追加
</code></pre>

新たに配列を宣言しました。　本来ならばHashMapを用いて<code>heroes</code>の要素と一致した
オブジェクトを作るのが望ましいですが、今回は単純にしました。

<h3>[2]</h3>

<pre><code class="language-java">lvHeroes.setOnItemClickListener{ _, _, position, _ -&gt;
}
</code></pre>

<code>setOnLitemClickListener</code>を使って、ListView内の単要素をタップされた際の
アクションイベントを定義しています。

コメントの通り、引数は４つ指定する必要がありますが、Kotlinの場合は<code>_</code>で省略出来ます。
今回は<code>position</code>という、<strong>どの要素がタップされたか</strong>を判断する為に使う引数を
使用しています。

<h2>リンク</h2>

<h3>次の記事</h3>

<a href="https://blog.killinsun.com/?p=444">【Android App with Kotlin #5】RecyclerViewを使う</a>

<h3>前回の記事</h3>

<a href="https://blog.killinsun.com/?p=418">【Android App with Kotlin #3】ListViewを使う</a>

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date><![CDATA[2019-01-21 08:01:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-20 23:01:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-listview-with-kotlin-android-part2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android-app-with-kotlin"><![CDATA[Android App with Kotlin]]></category>
		<category domain="category" nicename="android%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[Androidアプリ開発]]></category>
		<category domain="category" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="kotlin"><![CDATA[Kotlin]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_excerpt]]></wp:meta_key>
		<wp:meta_value><![CDATA[ListViewの要素をタップした時の動作を追加しました。]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[984beb35e4a9917e0cb945510f1e2ce6abc7a97c]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-01-21-using-listview-with-kotlin-android-part2.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[449]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90android-app-for-kotlin-4%e3%80%91listview%e3%82%92%e4%bd%bf%e3%81%862]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>114</wp:comment_id>
			<wp:comment_author><![CDATA[【Android App with Kotlin #3】ListViewを使う - お首が長いのよ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.killinsun.com/?p=418</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[127.0.0.1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-21 08:02:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-20 23:02:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] たアイテムにタッチすると 処理が実行されるようにします。 【Android App for Kotlin #4】ListViewを使う(2) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1548025342.5060191;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1548025363.310761;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[【Android App with Kotlin #5】RecyclerViewを使う - お首が長いのよ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.killinsun.com/?p=444</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.18.0.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-02-06 16:00:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-02-06 07:00:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【Android App with Kotlin #4】ListViewを使う(2) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1549436457.896876;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1550703033.189519;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>「集まれ！Kotlin好き！Kotlin愛好会 vol7」に参加し、登壇してきました</title>
		<link>https://blog.killinsun.com/2019/01/i-joined-kotlinlove-7-and-gave-a-presentation/</link>
		<pubDate>Tue, 22 Jan 2019 13:13:02 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=436</guid>
		<description></description>
		<content:encoded><![CDATA[KotlinでAndroidアプリ開発を初めて大体１ヶ月ぐらい経ち、
少しKotlinのことも深く知りたいと思ったので勉強会に飛び込んできました。

今年の目標通り、登壇回数を増やす為に談義枠で参加し、登壇してきました。

Kotlinの事についてなんでも自由にトークする会です。
基本は平日に開催しているようですが、３ヶ月に１会ぐらいは
もくもく会＋談義という形だそうです。
ちなみに、来月、もくもく会と談義やるらしい。

質問はいつでもOK
談義の中でアピールしたいプロダクトがあれば、
スター・ストック大歓迎だぜ！ってアピールするのもあり。
とにかくお酒を飲みながらゆったりKotlinに浸かれる場。

<h2>談義</h2>

<h3>談義: Kotlin serializationの色々な使い方 by たるさん</h3>

<script async class="speakerdeck-embed" data-id="cf6c5565cadb4c4faa3dec7d0275f9d1" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
(え、OS何使ってるんだろう？）
完全リモートワーク勤務の人らしい

Kotlin Serialization
３つのフォーマットを使える。(身近な所だとJSON?
また、yamlとかもアドオンで追加できる

リフレクションを使用しないので、json parserとかと比べて速度が早い

使い方は<code>build.gradle</code>の<code>dependencies</code>に書くだけ。
- ていうか値に変数使えるのかこれ

<code>@serializable</code>(@から始まるのはアノテーション) か
もしくはoptionalをつけてあげると動く。

拡張変数がついているのでアノテーションつけなくてもいける

<h4>便利</h4>

<ul>
<li>unquoted
ダブルクォテーションを外す。　JSONの二重引用符を外すのに便利！</li>
</ul>

<h4>気をつける</h4>

Nullになる可能性があるものは<code>Optional</code>をつけましょう

<h4>その他</h4>

SerialInfo　謎なアノテーションらしいｗ
アノテーションを自作することができるっぽい？　玄人向け？

<h3>談義: KotlinTest with Spring Boot by NaotoTakehataさん</h3>

<script async class="speakerdeck-embed" data-id="a0831839da3e4fa0a1ce13320604876d" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<code>所見：すげえ！SoftwareDesignで短期連載出してる人が出てきた！</code>

Takehataさんが実業務のサーバサイドで使っている
主要技術は６種類も！
そのうちKotlinTestについて話すよ

<strong>KotlinTestはAndroidアプリ開発でも使える</strong>

使い方は、gradleに一行かけば使える。

継承するクラスを変えると違う構文で書く事が出来る。
３種類のクラスが存在する。
StringSpec シンプルで割と自由にかける。
基本的なSpecらしく、初心者の私はここから着手するのがよさそうだ。

ちなみにSpecによって完成度や思想も全然違う

<h4>データ駆動テスト</h4>

<ul>
<li>forall
設定したレコード分テストが実行される
一つのテストコードに対して複数のデータのテストケースを実行できる
とても便利そう。</p></li>
<li><p>focus
名前の戦闘にf:をつけたコードのみ実行される</p></li>
<li>Bang
!をつけると実行されない</li>
</ul>

<h4>Spling</h4>

<p>KotlinもSpling対応したけど
gradleに依存関係追加してあげる必要がある

パッケージとクラスの名前が違うだけで動かない点に注意。
まだまだ日本語の情報が少ないので、もっと活発化したい。

<h3>談義: Kotlin歴0ヶ月がRecyclerViewに挑戦しました！ by 首無しキリンさん</h3>

<script async class="speakerdeck-embed" data-id="d283a18397774b74a6f24eb5b7d5474e" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
私です。エモい内容にしかならなかったな・・・。
唯一会場ウケする出だしで柔らかい雰囲気を作り出せたのはよかった。

<h3>談義: Paging Libraryの基本について理解してみた by ichi-katoさん</h3>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/kqIWUciCoq0a0j" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ichirokato5/paging-library-128667289" title="Paging Libraryの基本的な使い方について" target="_blank" rel="noopener noreferrer">Paging Libraryの基本的な使い方について</a> </strong> from <strong><a href="https://www.slideshare.net/ichirokato5" target="_blank" rel="noopener noreferrer">ichirokato5</a></strong> </div>

大体APIから１００件ほどのデータを取得したとき、
RecyclerViewで表示させていると、ユーザがみてない範囲は無駄になる。
ユーザがスクロールした時に、表示された範囲のみ取得してくるライブラリ。

使い方諸々のレクチャー

<h3>談義: Kotlin導入 5つのステップ by D_R_1009さん</h3>

<script async class="speakerdeck-embed" data-id="7c46cb273fae4c638d541e917ad13a8a" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>
Androidアプリエンジニアにmin SDKを投げつけると悲しくなるw

<h4>RxJava</h4>

RxJavaは必要？　
そんなに必要じゃないのがD_R_1009さん個人の答え
強力すぎて本当に必要かどうかがわからなくなる

<h4>EnumとKotlin Extention</h4>

enum と　Kotlin Extentionの相性がいい
要素の追加、削除が多い時に利用しやすい

<h4>DataClass</h4>

使いたい用途毎にオブジェクトのクラスは違う。
オブジェクトの特徴によって異なるからちゃんと分けて使うの大事
内部で使うオブジェクトはそれ用に作り込むし、外部に面しているオブジェクトは
柔軟な変更を受けやすく作る特徴がある。

<h4>通信状態</h4>

アプリの現在の状態をユーザに表示させるってすごい辛い。
Kotlin1.3で新しいのが生えた<code>result</code> は便利

<h2>全体での気づき</h2>

<ul>
<li>自分が発表する時にターゲットをちゃんと意識出来てなかったかも？
途中で話題になっていたけど、Androidアプリ開発者よりも
サーバサイドKotlinの人が多い会だったらしく、
自分の話した内容って刺さらない度高かったのでは…という気持ちになりました。</p></li>
<li><p>初心者相手でも、使えるシーンをイメージさせてあげる
知らないライブラリの話を聞いていて、まだ理解が追いつかない点が
とても多かったけど、「こんなシーンで使うライブラリなんだ」というのは
よく分かる話が出来る人は強いなって感じました。</p></li>
</ul>

<h2>Todo</h2>

<p>今日の話にあったSerializerやKotlin Testは
今作っているアプリでも実装できそうなので試してみよう！

<h2>感想</h2>

懇親会で印象に残ったのは、
「Javaメインで使ってるけど、現場で飽きた空気が出てるから
Kotlin推していきたい」という方が何人か見受けられました。

まだまだ若い言語なのてアーキテクチャ設計に裁量がある人が
実際のコードに落とし込むまでの苦労はきっとあるんだろうなと思いました。

一方で、まだまだ情報収集ってスタンスの人もいましたし、
そこから一歩出てKotlin人口増やす事ができれば
実績も増えて、日本での利用実績も増えるのかなってエモいこと考えました。

Java、Node、PHP、Pythonと触ってきましたが、
書いてて面白いなって思うのはKotlinとNodeが群を抜いています！
Kotlin触ったおかげでNode率がかなり低くなりました。

触っててとても楽しい言語なので、自分も初心者のハードル下げられるように
勉強会を主催したい！
いろいろと頭を整理している段階なので、力を貸してくれる方、お待ちしています。

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date><![CDATA[2019-01-22 22:13:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-22 13:13:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-joined-kotlinlove-7-and-gave-a-presentation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="love_kotlin"><![CDATA[#love_kotlin]]></category>
		<category domain="category" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="category" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
		<category domain="post_tag" nicename="%e5%8b%89%e5%bc%b7%e4%bc%9a"><![CDATA[勉強会]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[81ef8db371b767f518761ea4dbc7282f0d338748]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-01-22-i-joined-kotlinlove-7-and-gave-a-presentation.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%8c%e9%9b%86%e3%81%be%e3%82%8c%ef%bc%81kotlin%e5%a5%bd%e3%81%8d%ef%bc%81kotlin%e6%84%9b%e5%a5%bd%e4%bc%9a-vol7%e3%80%8d%e3%81%ab%e5%8f%82%e5%8a%a0%e3%81%97%e3%80%81%e7%99%bb%e5%a3%87%e3%81%97]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>【Android App with Kotlin #5】RecyclerViewを使う</title>
		<link>https://blog.killinsun.com/2019/02/using-recyclerview-with-kotlin-android/</link>
		<pubDate>Wed, 06 Feb 2019 06:37:19 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=444</guid>
		<description></description>
		<content:encoded><![CDATA[RecyclerViewを一番シンプルかつ実践的な機能で使いました。

<!--more-->

<h2>作るもの</h2>

<img src="https://blog.killinsun.com/wp-content/uploads/2019/02/05_recyclerview.gif" alt="" width="640" height="400" class="alignnone size-full wp-image-451" />
ImageViewとTextViewがリスト表示され、
タップするとTOASTが通知されるシンプルなものです。

<h2>環境</h2>

このコードは以下の環境で書いています。

<ul>
<li>macOS 10.14.2(Mojave)</li>
<li>Android Studio 3.3 <strong>前回の記事からバージョンップしました</strong></li>
<li>Android SDK 28</li>
<li>gradle 4.6</li>
</ul>

<h2>事前準備</h2>

特にありません。

<h2>レイアウトファイル</h2>

<h3>activity_recycler.xml</h3>

ここにはRecyclerViewのみ置かれます。
RecyclerViewの中身は別のレイアウトファイルで定義します。

<pre><code class="language-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
                                             xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
                                             android:layout_height="match_parent"&gt;

    &lt;android.support.v7.widget.RecyclerView
            android:id="@+id/rvAvaterList"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginTop="8dp"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            android:layout_marginBottom="8dp"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintBottom_toBottomOf="parent"/&gt;
&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<h3>item_profile.xml</h3>

ファイル名はそれっぽい適当な名前です。
RecyclerViewの１要素を表すレイアウトファイルです。
最上位のレイアウト（この場合はConstraintLayout)のheightは
<code>wrap_content</code>もしくは固定値にしないと、１要素が１ページ分のサイズになります。

<pre><code class="language-xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
                                             xmlns:app="http://schemas.android.com/apk/res-auto"
                                             xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
                                             android:layout_height="wrap_content"&gt;

    &lt;LinearLayout
            android:orientation="horizontal"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toEndOf="parent"&gt;
        &lt;ImageView
                android:id="@+id/ivAvater"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:layout_marginTop="8dp"
                tools:srcCompat="@mipmap/ic_launcher"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"/&gt;
        &lt;TextView
                android:id="@+id/tvAvtName"
                android:layout_width="wrap_content"
                android:layout_height="26dp"
                android:layout_marginTop="8dp"
                android:layout_marginStart="8dp"
                android:layout_marginEnd="8dp"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintStart_toEndOf="@+id/ivAvater"
                app:layout_constraintEnd_toEndOf="parent"
                tools:text="@tools:sample/full_names"/&gt;
    &lt;/LinearLayout&gt;
&lt;/android.support.constraint.ConstraintLayout&gt;
</code></pre>

<h2>ViewHolder</h2>

<h3>AvaterViewHolder.kt</h3>

<code>item_profile</code>で定義したレイアウト内のウィジェットを
後述の<code>Adapter</code>から利用出来る様に宣言しておくファイルになります。
また、<code>インターフェース</code>を用意してありますが、
これはタップした際の動作を定義出来るようにしておく受け口になります。
RecyclerViewの１要素をクラス化しているイメージで捉えています。

<pre><code class="language-java">class AvaterViewHolder(view: View): RecyclerView.ViewHolder(view) {

    val ivAvater: ImageView = view.findViewById(R.id.ivAvater)
    val tvAvtName: TextView = view.findViewById(R.id.tvAvtName)

    /*
    処理を持たないメソッド（インターフェース）を用意する事で
    AdapterやActivityで処理が実装出来るようになる
    */
    interface ItemInterface{
        fun onClickItem(position: Int)
    }
}
</code></pre>

<h2>Adapter</h2>

<h3>AvaterAdapter.kt</h3>

<code>Activity</code>によって生成(インスタンス化)されます。
RecyclerViewの要素数分、行データを読み取り、
<code>ViewHolder</code>とレイアウトファイルを紐づけます。

<pre><code class="language-java">class AvaterAdapter(
        private val avtList:List&lt;String&gt;, 
        private val ItemListener:AvaterViewHolder.ItemInterface
        ): RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;(){

    override fun getItemCount(): Int{
        return avtList.size
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {

        val layoutInflater = LayoutInflater.from(parent.context)
        val view: View =  layoutInflater.inflate(R.layout.item_profile, parent, false)

        return AvaterViewHolder(view)
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        val myHolder:AvaterViewHolder = holder as AvaterViewHolder

        myHolder.tvAvtName.text = avtList[position]
        myHolder.ivAvater.setImageResource(R.mipmap.ic_launcher)

        //テキストをクリックされた時の動作を新規にバインドさせる
        myHolder.tvAvtName.setOnClickListener{
            ItemListener.onClickItem(position)
        }

    }
}
</code></pre>

コードの説明に入ります。

<pre><code class="language-java">class AvaterAdapter(
        private val avtList:List&lt;String&gt;, 
        private val ItemListener:AvaterViewHolder.ItemInterface
        ): RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt;(){
</code></pre>

第一引数ではActivityから受け取るリスト要素を、
第二引数では、<code>AvaterViewHolder</code>内に宣言したインターフェースを<code>ItemListener</code>という名前で待ちます。

<pre><code class="language-java">    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {

        val layoutInflater = LayoutInflater.from(parent.context)
        val view: View =  layoutInflater.inflate(R.layout.item_profile, parent, false)

        return AvaterViewHolder(view)
    }
</code></pre>

Adapterに与えられたリスト要素（今回は<code>avtList:List&lt;String&gt;</code>)から１要素ずつ受け取り、
viewtypeに応じたRecyclerViewのレイアウトファイルを読み込みます。
最も、今回の場合は全部同じレイアウトのリストなので、<code>viewtype</code>にかかわらず同じ<code>view</code>を読み込みます。

もし、複数種類のレイアウトファイルを使い分ける場合は、<code>getItemViewType</code>を使います。
<code>position</code>(要素の位置)に応じたviewtypeを返却するメソッドです。

サンプル

<pre><code class="language-java">override fun getItemViewType(position:Int):Int{
        val VIEW_T_HEADER:Int = 0
        val VIEW_T_FOOTER:Int = 1
        val VIEW_T_BODY:Int = 3
        when(position){
                //一番最初の要素の場合
                0 -&gt; {
                        return VIEW_T_HEADER
                }
                //リスト要素と同じサイズ + 1 = 最終行の場合
                avtList.size + 1 -&gt; {
                        return VIEW_T_FOOTER
                }
                else -&gt; {
                        return VIEW_T_BODY
                }
        }
}
</code></pre>

<pre><code class="language-java">    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        val myHolder:AvaterViewHolder = holder as AvaterViewHolder

        myHolder.tvAvtName.text = avtList[position]
        myHolder.ivAvater.setImageResource(R.mipmap.ic_launcher)

        //テキストをクリックされた時の動作を新規にバインドさせる
        myHolder.tvAvtName.setOnClickListener{
            ItemListener.onClickItem(position)
        }

    }

</code></pre>

要素毎にテキストや画像をバインド（割り当て）しています。
ここで、<code>setOnCLickListener</code>等のメソッドも普通のウィジェット同様に使えるので、
インターフェース<code>ItemListener</code>が持つメソッド<code>onClickItem</code>を実行させます。（AvaterViewHolderで用意しましたね）

<h2>Activity</h2>

<h3>RecyclerActivity.kt</h3>

Adapterに比べればここは宣言するだけなので非常にシンプルです。

<pre><code class="language-java">class RecyclerActivity: AppCompatActivity(), AvaterViewHolder.ItemInterface {

    val avtList: List&lt;String&gt; = listOf("John","Pawl","Amanda")

    override fun onCreate(savedInstanceState: Bundle?){
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_recycler)

        rvAvaterList.layoutManager = LinearLayoutManager(this)
        rvAvaterList.adapter = AvaterAdapter(avtList, this)
    }

    override fun onClickItem(position: Int) {
        Toast.makeText(this, "Item Positon:" + position + ", Item:" + avtList[position], Toast.LENGTH_SHORT).show()
    }
}
</code></pre>

<pre><code class="language-java">rvAvaterList.layoutManager = LinearLayoutManager(this)
</code></pre>

<code>activirty_recycler.xml</code>で用意したRecyclerViewのウィジェットをIDから使用しています。
layoutManagerというものを定義しています。
<code>LinearLayoutManager</code>と、<code>GridLayoutManager</code>の２種類があります。
前者はListViewのような１行形式のレイアウトで、
後者は縦横の格子状に要素を持つ事が出来るレイアウトです。
今回は前者を使います。

<pre><code class="language-java">rvAvaterList.adapter = AvaterAdapter(avtList, this)
</code></pre>

先程までで作成したAdapterをこのRecyclerViewに割り当てています。
１つ目の引数では、このアクティビティクラスのメンバ変数として宣言している<code>avtList</code>を、
２つ目の引数ではアクティビティクラスの戻り値として持つ<code>AvaterViewHolder</code>を割り当てています。
（この辺のつながりが自分でもまだよくわかっていません。わかる方いたらコメントやDMで教えてください。)

長くなりましたが、ここまでで一旦、シンプルなRecyclerViewを
扱う事が出来たかと思います。

<h2>リンク</h2>

<h3>次の記事</h3>

<h3>前回の記事</h3>

<a href="https://blog.killinsun.com/?p=431">【Android App with Kotlin #4】ListViewを使う(2)</a>

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[RecyclerViewを一番シンプルかつ実践的な機能で使いました。]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date><![CDATA[2019-02-06 15:37:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-06 06:37:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[using-recyclerview-with-kotlin-android]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android-app-with-kotlin"><![CDATA[Android App with Kotlin]]></category>
		<category domain="category" nicename="android%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[Androidアプリ開発]]></category>
		<category domain="category" nicename="kotlin"><![CDATA[Kotlin]]></category>
		<category domain="post_tag" nicename="kotlin"><![CDATA[Kotlin]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[03f142c47bb2c57fd7980434b0981e3ee8444088]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-02-06-using-recyclerview-with-kotlin-android.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[__trashed-2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[449]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[__trashed-2__trashed]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>116</wp:comment_id>
			<wp:comment_author><![CDATA[【Android App with Kotlin #4】ListViewを使う(2) - お首が長いのよ]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://blog.killinsun.com/?p=431</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.18.0.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-02-06 16:02:13]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-02-06 07:02:13]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 【Android App with Kotlin #5】RecyclerViewを使う [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1549436534.028948;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1550703033.178548;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"killinsun";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>転職から一ヶ月経ったので近況とか書いていく</title>
		<link>https://blog.killinsun.com/2019/03/notes-of-my-switching-job/</link>
		<pubDate>Fri, 15 Mar 2019 16:44:33 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=467</guid>
		<description></description>
		<content:encoded><![CDATA[退職エントリは書くつもりないが、転職後の振り返りはする。

ポエムです。
<!--more-->

<h2>今何やってるのか</h2>

<a href="https://wovn.io/ja/">WovnTechnologies</a>という会社にいます。
WEBサイトやスマホアプリに対してSaaSを使って多言語化ソリューションを提供するスタートアップ企業です。

外資系ではなく日系企業ですが、ビジネスの性質上、外国人が多いので色々な言語がオフィスで飛び交っている会社です。

この会社のカスタマー・エクスペリエンスという部署にいます。
この部署では主に３つのロールが分けられています。

<ul>
<li>プロジェクト推進</li>
<li>カスタマーサクセス</li>
<li>テクニカルサポート</li>
</ul>

このうち、プロジェクト推進とカスタマーサクセスをやっています。

前者は主にサービスをお客さんの環境に導入してあげるのがメインで、
後者はサービスの導入後にお客さんが「このサービス入れて成功した！」と思えるように引っ張っていくお仕事です。

カスタマーサクセスは、名前の雰囲気から、「カスタマーサービス」や「カスタマーサポート」と間違えられやすいですが、
やっていることは結構違ったりします。

<a href="https://satori.marketing/marketing-blog/what-is-marketing/customer-success/">「カスタマーサクセス」と「カスタマーサービス」の違いとは？</a>

※今期からCustomerExperience -> EnterpriseSuccessという部署名に変わりました。

<h2>厳密に言うと私はエンジニアではなくなった</h2>

転職活動しているときはゴリゴリとコードを書いたり、サーバやコンテナを建てたりする仕事を夢見ていたのは事実ですが、面接したり、自分を振り返っているうちに、<strong>今のうちに経験しておくべき事</strong>に気が付きました。

主に理由は3つです。

<h3>ヒューマンスキルは一生もの</h3>

例えば、WEB業界なんかはとても顕著だなと思うんですが、WEB業界をを志したときに技術の進歩が早すぎて、ついていくの大変だと思いませんか？　頑張って勉強しても、数年経てばレガシーだと指さされる。

いくら転職活動に向けてそのスキルを身に着けた所で、ゆくゆくは新しい技術を学ぶ必要がある。

<strong>それ自体はとてもエキサイティングな事だし、やり続けたい事だと思ってます</strong>

ですが、仕事をする上で今身に着けておいた方が絶対得な事って他にあると思うんですよね。それは人それぞれ、色々なシチュエーションであると思いますが、私は<strong>お客さんと接する機会が少なかったのが弱点</strong>でした。前職は客先常駐（親会社に派遣で常駐）で、あまりカウンターパート、エンドユーザと接する機会がなかったです。むしろ、<strong><em>「俺はエンジニアだから出来る限り客先に行きたくないし、そういう役割の人が頑張ってくれ」</em></strong>と思っているぐらいでした。

私のこの考えに違和感を持つ人はいませんか？　長い人生を歩む上でこれは損だと思ったので、補いたい弱点だと転職活動の中で考えました。

誰かと話して意図を汲み取った動きをしたり、誰かのために寄り添った事をするのは一生もののヒューマンスキルだと思っています。これを身に着けずに、上記の様な考えでエンジニアを続けていても生き残れないなと感じました。

<h3>今までの武器が通用しない所で働く</h3>

前職は、お山の大将でした。何かやればすぐ評価してもらえて、お給料もトントン拍子で増えていって、とても気持ちよかったです。ただ、このままぬるま湯に浸かっていたら、<strong>自分自身が仕事に対して手を抜き出してしまうダメ人間になってしまう気がした</strong>ので、それが通用しない所で働く必要があると思いました。これは割とマジな話です。内心焦っていたぐらいなので。

<h3>「深く狭く」ではなく「浅く広く」タイプだと悟った</h3>

昔は「〇〇にとても知見がある強い人」に憧れていました。しかし、今までの自分を振り返ってみると色々な理由があれ、<em>「なんか俺、色々な事やっててその辺の人よりは知ってるけど、専門の人には到底及ばない」</em>と悟りました。

「深く狭く」タイプの方々の意図や話はなんとなく理解できます。ただ、私はそれを突き詰めて何かを成し遂げたりするのは得意じゃないか、本質的には好きではないのかも。

恐らく、<strong>私は「深く狭く」の人達と会話ができて、意図が理解出来るのを武器に、全く知見の無い人たちを助ける役回りが適しているんじゃないかと考え始めました。</strong>

なので、ゴリゴリの「フロントエンジニア」や「サーバサイドエンジニア」、「クラウドエンジニア」からは一歩離れた立ち位置で仕事しようと思いました。

前職の人たちに「私って何が出来る人だと思ってました？」って聞いたらバラバラの答えが返ってくるか、「あんまりイメージなかった」と言われる事が多かったのも、納得しました。

<h2>転職してみて</h2>

<h3>なんだかんだやれてる</h3>

今月で５周年を迎えたとても若いスタートアップ企業で、ゴリゴリのエンジニアからちょっと離れて仕事をして、なんだかんだやっていけてるなというのが素直な感想です。

というのも、元々求められていなかった業務範囲の中に自分の武器（浅く広いテクニカルな知見）を活かして、面倒くさい作業を効率化していったり、お客さんの課題に対して技術でカスタマーサクセスに導く事ができているからです。

<h3>英語力</h3>

あとは、エンジニアや翻訳チームと話す際には必然と英語力が求められます。読み書きが何となく雰囲気で出来る程度の私に英会話など無理ゲーに近いので、苦労しながら勉強しています。ただ、通訳をしてくれたりする人がいるので英語が必須というわけではありません。ただ、出来れば自分の業務の幅が広がりやすい会社であるとともに、評価にもつながりやすいだろうなとは思ってます。

<hr />

前職の方には夜道で刺される覚悟で大企業からスタートアップへの転職をしました。内心かなり勇気が必要とされましたが、私のケースではとても良いアクションだと思っています。相談を聞いてくださった方々や、飲みに連れて行ってくださったり、明るく送ってくださった前職の方々には感謝しています。

これから、新しい分野で前職以上の成果を出していきたい。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>467</wp:post_id>
		<wp:post_date><![CDATA[2019-03-16 01:44:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-15 16:44:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[notes-of-my-switching-job]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="tirashi-no-ura"><![CDATA[雑記]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[409f912adf5714d0d407a5478ca3e655e635775f]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-03-16-notes-of-my-switching-job.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e8%bb%a2%e8%81%b7%e3%81%8b%e3%82%89%e4%b8%80%e3%83%b6%e6%9c%88%e7%b5%8c%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%a7%e8%bf%91%e6%b3%81%e3%81%a8%e3%81%8b%e6%9b%b8%e3%81%84%e3%81%a6%e3%81%84%e3%81%8f]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>【ISUCON9予選】初参加しました</title>
		<link>https://blog.killinsun.com/2019/09/i-attended-isucon9/</link>
		<pubDate>Sun, 08 Sep 2019 12:54:31 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=483</guid>
		<description></description>
		<content:encoded><![CDATA[#　ISUCON9に参加しました

前々から気になってたけどチーム組んで参加するのがハードル高かったんですが、友人と参加する事ができました。

<h2>結果</h2>

結果は予選落ちです。
スコアは5,010ｲｽｺｲﾝでした。

<h2>やったこと</h2>

一緒に参加した友人に比べて特別に高いスキルを持っているわけではないので、
浅く広い技術の知見を生かしてメンバーの壁打ちやissueの調査をメインに、チームメンバーが気持ちよく動ける立ち回りを意識しました。

<ul>
<li>オフライン会場の準備</li>
<li>アプリの調査</li>
<li>Nginxのログフォーマット設定issueのヘルプ</li>
<li>ローカル開発環境準備のヘルプ</li>
<li>DBのチューンナップ</li>
<li>アプリとDBの分離</li>
</ul>

<h3>オフライン会場の準備</h3>

ほぼこれに終始といっても過言ではない。
結果的に「下手なコワーキングスペースより充実してて良い」といってもらえたのがモチベーション。

https://twitter.com/NakadEngineer/status/1170112341649711107?s=20

https://twitter.com/Kill_In_Sun/status/1170127267919302657?s=20

<ul>
<li>壁一面にデプロイされたホワイトボード</li>
<li>無線接続できる55インチ4Kテレビを使った共同作業用モニタ</li>
<li>1人1台ずつ使えるディスプレイ</li>
<li>昼食は手軽に食べられるホットドッグを無償提供（近所のスーパーで半額になっているもの）</li>
<li>その他軽食、エナジードリンク（結局メンバーが来るときに自分で調達してたので不要に）</li>
<li>電波ソングを自由に流しながら作業ができるBlueToothスピーカー</li>
</ul>

若干ネタに振り切ってますが、気軽にくつろげて会話ができて作業に集中できる環境はかなり大事

<h3>アプリの調査</h3>

アリババクラウドのアカウントを用意してくれたメンバーがインスタンスのデプロイをしてくれた後、アプリの調査を行いました。
が、Frontend周りが自分には難解すぎて良い動きができなかった。　
バックエンドの改修をするにもフロントエンド側の修正も必要だと想像し（本当は必要ない部分もあったと思うが）
結局ソースコード周りは手がつけられなさそうだと判断してMWへ。

<h3>NginxのLogFormat設定issueのヘルプ</h3>

nginxにkataribeを入れ込もうとしているメンバーがnginxのLogFormat修正に苦戦しているのをヘルプ
原因は単純なところだったけど調べてさっと解決できるところなのでよかった。
(ログの出力設定にLogFormat名指定しているのにLogFormatの部分で名前記載してなかった)

<h3>ローカル開発環境準備のヘルプ</h3>

もうひとりのメンバーはソースコードをgithubに用意してくれており、そいつをクローンして開発できるように。
予め用意してくれたDB用のdocker-composeファイルをISUCON9用に修正しても動かず、
initialize.sqlファイルがISUCON9の.gitignoreに記載されてる上にサイズが大きすぎてgithubにも乗っけられないので
SCPで無理やり引っ張ってデータをコンテナ上DBに突っ込んだ。

この辺はメンバーにヘルプしたりされたりだったので個人でどうにかできればよかったなと反省

<h3>DBのチューンナップ</h3>

後半はコードの修正で貢献ができないと判断したのでDBのチューンナップへ。
一応ネットに落ちているものを拝借しつつ、細かいパラメータをコンテスト用に設定したけど、
そもそもアプリ側でCPUを浪費していたので大きな貢献には至らなかった。

<h3>DBとアプリの分離</h3>

もともとはインフラメンバーがやりたがってたリバースプロキシも2台構成にしないと意味がなく、
であれば　アプリとDBだけひとまず分けちゃおうっていうことで、アプリのDB向き先を別のインスタンスに変更。

が、その後こいつが原因で port:8000番が開かなくなってしまった原因の調査にかなり時間を費やしてしまった。
systemdのステータスみてもLoadedになってるし、いくら<code>ss</code>コマンドでも<code>lsof</code>コマンドでもサービスの受付をしているように見えない。

systemdが叩いているアプリの実行コマンドを直打ちで試したところ、向き先をかえたDBが接続を弾いているためと判明。
そこからはまた長い道のりで、
<code>mysql.user</code>テーブル内の接続許可設定を見るために<code>root</code>アカウントの情報探しても見つからず、泣く泣くsafeモードでパスワード初期化して入れたと思ったら
設定に違和感は無く、アプリの修正をゴリゴリやっているメンバーにアリババクラウドのセキュリティグループ設定を追加してもらっても動かず
最終的にメンバーの「この設定は？」の一言から解決した。

原因は<code>/etc/mysql/my.cnf</code>内にある<code>bind-address</code>の設定だった。　泣きたい。
こんなのあったのかという感じだった。

壁打ちで助けてくれたメンバーに感謝・・・

<h2>所感</h2>

と、いろいろ上記を振り返ってみて思うのはアプリの修正に全く貢献できてなかったし、アプリいじれるメンバーも
チームで1人しかいない尚且ISUCON経験者ってことで彼の負担がかなり大きかったと思う。
やるべきことは見えてるのに時間が足りないって漏らしてたし、もう少しこのあたり貢献できるくらいの自力はつけないとだめだなと反省した。

Discordの感想部屋で流れている内容は、どれも自分でも「あーそういやそうだよな」ってネタばかりで、
知識レベルでは大きくずれてるわけじゃないと安心できたので、もう少し実践でどうにかできないとなとただただ思うばかり。

ISUCONの問題はかなりよく出来ていて、物語の設定もそれ用のデータもよく作り込まれてて非常に関心した。

現職はカスタマーサクセスや、自社のサービスを導入するみたいなロールで、あまりWEB開発やインフラからかなり離れたところになっているけど、
定期的にこういったコンテストに参加してモチベーションを高めて趣味の時間でも実力を維持したり、高める機会にしたいと思った。

とにかく準備と開催してくださった運営スタッフの皆様お疲れ様でした。
一緒にやってくれたメンバーもお疲れ様でした。

リベンジ会しましょう。

/以上]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date><![CDATA[2019-09-08 21:54:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-08 12:54:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[i-attended-isucon9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e3%82%b3%e3%83%b3%e3%83%86%e3%82%b9%e3%83%88"><![CDATA[コンテスト]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[0028ffffd8fcdfe4eb384c4d164c6f0bae99b52c]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-09-08-i-attended-isucon9.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6b61e421fda33537e166ab632504d115]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="ja" dir="ltr">イイカンジスピードダウンコンテストです <a href="https://t.co/EBkJosCNQh">pic.twitter.com/EBkJosCNQh</a></p>&mdash; 🤔なかでぃまる (@NakadEngineer) <a href="https://twitter.com/NakadEngineer/status/1170112341649711107?ref_src=twsrc%5Etfw">September 6, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_6b61e421fda33537e166ab632504d115]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567947016]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_942af8128c177f8f50980796746dd0d3]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="ja" dir="ltr">我が家でISUCON<br><br>設備はいいと思う <a href="https://t.co/yeBhcYHOh0">pic.twitter.com/yeBhcYHOh0</a></p>&mdash; 首無しキリン (@Kill_In_Sun) <a href="https://twitter.com/Kill_In_Sun/status/1170127267919302657?ref_src=twsrc%5Etfw">September 7, 2019</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_942af8128c177f8f50980796746dd0d3]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567947040]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[%e3%80%90isucon9%e4%ba%88%e9%81%b8%e3%80%91%e5%88%9d%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%be%e3%81%97%e3%81%9f]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>iOSの自作フレームワーク読み込み後のビルドでエラー</title>
		<link>https://blog.killinsun.com/2019/09/ios-framework-build-error/</link>
		<pubDate>Sun, 29 Sep 2019 14:06:48 +0000</pubDate>
		<dc:creator><![CDATA[killinsun]]></dc:creator>
		<guid isPermaLink="false">https://blog.killinsun.com/?p=494</guid>
		<description></description>
		<content:encoded><![CDATA[自作というよりは自社製っていう感じなんですが、お客さんのアプリにインストールしている際に発生したエラーです。

以下のエラーが出ました。

<h2>no matching architecture in universal wrapper</h2>

<pre class="lang:default decode:true " >dyld: Library not loaded: @rpath/libswiftCore.dylib
  Referenced from: /Users/hoge/Library/Developer/CoreSimulator/Devices/977028FF-E9A8-4608-AF32-7436C0542091/
  data/Containers/Bundle/Application/9A7DA83A-9C33-404E-89ED-49D3715489F4/Dev.app/
  Frameworks/myFramework.framework/myFramework
  Reason: no suitable image found.  Did find:
    /Users/hoge/Library/Developer/CoreSimulator/Devices/977028FF-E9A8-4608-AF32-7436C0542091/data/Containers/Bundle/
        Application/9A7DA83A-9C33-404E-89ED-49D3715489F4/Dev.app/Frameworks/myFramework.framework/
        Frameworks/libswiftCore.dylib: 
        no matching architecture in universal wrapper</pre>

このエラーは、ユニバーサルフレームワークとしてビルドしたFrameworkをインストールする前は全く出ておらず、
対応を行った後に出るようになった上、<code>universal wrapper</code>という文言につられて、
<code>x86_64</code>や<code>i386</code>、<code>arm</code>系のバイナリは入っているのになぜ発生するのかと暫く頭を悩ませました。

結論からいうと、導入対象のプロジェクトがObjective-C製であり、このフレームワークはSwift製で、Swiftの動作に必要な標準ライブラリがロードされていない為でした。

Objective-C製のプロジェクトはデフォルトでこの様な状態らしく、以下設定を変更する必要がありました。

<h2>Always Embed Swift Standard Librariesを有効にする</h2>

<code>Build Settings</code> -> <code>Build Options</code> にある<code>Alway Embed Swift Standard Libraries</code>を有効にします。
<img src="https://blog.killinsun.com/wp-content/uploads/2019/09/Screen-Shot-2019-09-29-at-23.03.11.png" alt="" width="829" height="172" class="alignnone size-full wp-image-496" />

上記を有効にする事で無事ビルドと動作の確認が出来ました。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>494</wp:post_id>
		<wp:post_date><![CDATA[2019-09-29 23:06:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-29 14:06:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ios-framework-build-error]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="framework"><![CDATA[Framework]]></category>
		<category domain="post_tag" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="category" nicename="iphone%e3%82%a2%e3%83%97%e3%83%aa%e9%96%8b%e7%99%ba"><![CDATA[iPhoneアプリ開発]]></category>
		<category domain="post_tag" nicename="sdk"><![CDATA[SDK]]></category>
		<category domain="post_tag" nicename="xcode"><![CDATA[XCode]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-disabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-insert]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-heading-levels]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-alttext]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_ez-toc-exclude]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpghs_github_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[_posts/2019-09-29-ios-framework-build-error.md]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_sha]]></wp:meta_key>
		<wp:meta_value><![CDATA[57656212df4a55d39891a61455e78941a2871101]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_all]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_pingme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_encloseme]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[ios%e3%81%ae%e8%87%aa%e4%bd%9c%e3%83%95%e3%83%ac%e3%83%bc%e3%83%a0%e3%83%af%e3%83%bc%e3%82%af%e8%aa%ad%e3%81%bf%e8%be%bc%e3%81%bf%e5%be%8c%e3%81%ae%e3%83%93%e3%83%ab%e3%83%89%e3%81%a7%e3%82%a8]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	